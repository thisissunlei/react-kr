'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _fetch = require('kr/Redux/Utils/fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _promisePolyfill = require('promise-polyfill');

var _promisePolyfill2 = _interopRequireDefault(_promisePolyfill);

var _es6Promise = require('es6-promise');

var _es6Promise2 = _interopRequireDefault(_es6Promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_es6Promise2.default.polyfill();

function callAPIMiddleware(_ref) {
	var dispatch = _ref.dispatch,
	    getState = _ref.getState;


	return function (next) {

		return function (action) {
			var types = action.types,
			    apiName = action.apiName,
			    request = action.request,
			    _action$payload = action.payload,
			    payload = _action$payload === undefined ? {} : _action$payload;


			if (!types) {
				return next(action);
			}

			if (!Array.isArray(types) || types.length !== 3 || !types.every(function (type) {
				return typeof type === 'string';
			})) {
				//throw new Error('参数有问题');
			}

			if (!apiName) {
				//throw new Error('参数有问题');
			}

			var _types = _slicedToArray(types, 3),
			    requestType = _types[0],
			    successType = _types[1],
			    failureType = _types[2];

			//获取数据

			dispatch((0, _simpleAssign2.default)({}, payload, {
				type: requestType,
				name: apiName
			}));

			return new _promisePolyfill2.default(function (resolve, reject) {

				_fetch2.default.request(apiName, request, payload).then(function (response) {

					dispatch((0, _simpleAssign2.default)({}, payload, {
						type: successType,
						response: response,
						name: apiName
					}));

					resolve(response);
				}).catch(function (err) {

					dispatch((0, _simpleAssign2.default)({}, payload, {
						type: failureType,
						error: err,
						name: apiName
					}));
					reject(err);
				});
			});
		};
	};
}

module.exports = callAPIMiddleware;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(callAPIMiddleware, 'callAPIMiddleware', '/Users/tmac_zc/Code/kr-admin/src/Redux/Middlewares/callAPIMiddleware.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9SZWR1eC9NaWRkbGV3YXJlcy9jYWxsQVBJTWlkZGxld2FyZS5qcyJdLCJuYW1lcyI6WyJwb2x5ZmlsbCIsImNhbGxBUElNaWRkbGV3YXJlIiwiZGlzcGF0Y2giLCJnZXRTdGF0ZSIsIm5leHQiLCJhY3Rpb24iLCJ0eXBlcyIsImFwaU5hbWUiLCJyZXF1ZXN0IiwicGF5bG9hZCIsIkFycmF5IiwiaXNBcnJheSIsImxlbmd0aCIsImV2ZXJ5IiwidHlwZSIsInJlcXVlc3RUeXBlIiwic3VjY2Vzc1R5cGUiLCJmYWlsdXJlVHlwZSIsIm5hbWUiLCJyZXNvbHZlIiwicmVqZWN0IiwidGhlbiIsInJlc3BvbnNlIiwiY2F0Y2giLCJlcnIiLCJlcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxxQkFBV0EsUUFBWDs7QUFHQSxTQUFTQyxpQkFBVCxPQUErQztBQUFBLEtBQW5CQyxRQUFtQixRQUFuQkEsUUFBbUI7QUFBQSxLQUFWQyxRQUFVLFFBQVZBLFFBQVU7OztBQUU5QyxRQUFPLFVBQVNDLElBQVQsRUFBYzs7QUFFcEIsU0FBTyxVQUFTQyxNQUFULEVBQWdCO0FBQUEsT0FHckJDLEtBSHFCLEdBT2xCRCxNQVBrQixDQUdyQkMsS0FIcUI7QUFBQSxPQUlyQkMsT0FKcUIsR0FPbEJGLE1BUGtCLENBSXJCRSxPQUpxQjtBQUFBLE9BS3JCQyxPQUxxQixHQU9sQkgsTUFQa0IsQ0FLckJHLE9BTHFCO0FBQUEseUJBT2xCSCxNQVBrQixDQU1yQkksT0FOcUI7QUFBQSxPQU1yQkEsT0FOcUIsbUNBTVosRUFOWTs7O0FBU3RCLE9BQUcsQ0FBQ0gsS0FBSixFQUFVO0FBQ1QsV0FBT0YsS0FBS0MsTUFBTCxDQUFQO0FBQ0E7O0FBRUQsT0FBRyxDQUFDSyxNQUFNQyxPQUFOLENBQWNMLEtBQWQsQ0FBRCxJQUNGQSxNQUFNTSxNQUFOLEtBQWdCLENBRGQsSUFFRixDQUFDTixNQUFNTyxLQUFOLENBQVk7QUFBQSxXQUFRLE9BQU9DLElBQVAsS0FBZ0IsUUFBeEI7QUFBQSxJQUFaLENBRkYsRUFFZ0Q7QUFDOUM7QUFDRDs7QUFFRCxPQUFHLENBQUNQLE9BQUosRUFBWTtBQUNYO0FBQ0E7O0FBckJxQiwrQkF1QndCRCxLQXZCeEI7QUFBQSxPQXVCZlMsV0F2QmU7QUFBQSxPQXVCSEMsV0F2Qkc7QUFBQSxPQXVCU0MsV0F2QlQ7O0FBMkJ0Qjs7QUFFQWYsWUFBUyw0QkFBYyxFQUFkLEVBQWlCTyxPQUFqQixFQUF5QjtBQUNqQ0ssVUFBS0MsV0FENEI7QUFFakNHLFVBQUtYO0FBRjRCLElBQXpCLENBQVQ7O0FBS0EsVUFBTyw4QkFBWSxVQUFDWSxPQUFELEVBQVVDLE1BQVYsRUFBcUI7O0FBR3ZDLG9CQUFLWixPQUFMLENBQWFELE9BQWIsRUFBcUJDLE9BQXJCLEVBQTZCQyxPQUE3QixFQUFzQ1ksSUFBdEMsQ0FBMkMsVUFBU0MsUUFBVCxFQUFrQjs7QUFFNURwQixjQUFTLDRCQUFjLEVBQWQsRUFBaUJPLE9BQWpCLEVBQXlCO0FBQ2pDSyxZQUFLRSxXQUQ0QjtBQUVqQ00sZ0JBQVNBLFFBRndCO0FBR2pDSixZQUFLWDtBQUg0QixNQUF6QixDQUFUOztBQU1BWSxhQUFRRyxRQUFSO0FBRUEsS0FWRCxFQVVHQyxLQVZILENBVVMsVUFBU0MsR0FBVCxFQUFhOztBQUVyQnRCLGNBQVMsNEJBQWMsRUFBZCxFQUFpQk8sT0FBakIsRUFBeUI7QUFDakNLLFlBQUtHLFdBRDRCO0FBRWpDUSxhQUFNRCxHQUYyQjtBQUdqQ04sWUFBS1g7QUFINEIsTUFBekIsQ0FBVDtBQUtBYSxZQUFPSSxHQUFQO0FBQ0EsS0FsQkQ7QUFtQkEsSUF0Qk0sQ0FBUDtBQXdCQSxHQTFERDtBQTREQSxFQTlERDtBQWlFQTs7QUFFREUsT0FBT0MsT0FBUCxHQUFpQjFCLGlCQUFqQjs7Ozs7Ozs7K0JBckVTQSxpQiIsImZpbGUiOiJjYWxsQVBJTWlkZGxld2FyZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvdG1hY196Yy9Db2RlL2tyLWFkbWluIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0dHAgZnJvbSAna3IvUmVkdXgvVXRpbHMvZmV0Y2gnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAncHJvbWlzZS1wb2x5ZmlsbCc7XG5pbXBvcnQgRVM2UHJvbWlzZSBmcm9tICdlczYtcHJvbWlzZSc7XG5cbkVTNlByb21pc2UucG9seWZpbGwoKTtcblxuXG5mdW5jdGlvbiBjYWxsQVBJTWlkZGxld2FyZSh7ZGlzcGF0Y2gsZ2V0U3RhdGV9KXtcblxuXHRyZXR1cm4gZnVuY3Rpb24obmV4dCl7XG5cblx0XHRyZXR1cm4gZnVuY3Rpb24oYWN0aW9uKXtcblxuXHRcdFx0Y29uc3Qge1xuXHRcdFx0XHR0eXBlcyxcblx0XHRcdFx0YXBpTmFtZSxcblx0XHRcdFx0cmVxdWVzdCxcblx0XHRcdFx0cGF5bG9hZD0ge31cblx0XHRcdH0gPSBhY3Rpb247XG5cblx0XHRcdGlmKCF0eXBlcyl7XG5cdFx0XHRcdHJldHVybiBuZXh0KGFjdGlvbik7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFBcnJheS5pc0FycmF5KHR5cGVzKSB8fFxuXHRcdFx0XHR0eXBlcy5sZW5ndGggIT09MyB8fFxuXHRcdFx0XHQhdHlwZXMuZXZlcnkodHlwZSA9PiB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpKXtcblx0XHRcdFx0XHQvL3Rocm93IG5ldyBFcnJvcign5Y+C5pWw5pyJ6Zeu6aKYJyk7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCFhcGlOYW1lKXtcblx0XHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoJ+WPguaVsOaciemXrumimCcpO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBbcmVxdWVzdFR5cGUsc3VjY2Vzc1R5cGUsZmFpbHVyZVR5cGVdID0gdHlwZXM7XG5cblxuXG5cdFx0XHQvL+iOt+WPluaVsOaNrlxuXG5cdFx0XHRkaXNwYXRjaChPYmplY3QuYXNzaWduKHt9LHBheWxvYWQse1xuXHRcdFx0XHR0eXBlOnJlcXVlc3RUeXBlLFxuXHRcdFx0XHRuYW1lOmFwaU5hbWVcblx0XHRcdH0pKTtcblxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblxuXG5cdFx0XHRcdGh0dHAucmVxdWVzdChhcGlOYW1lLHJlcXVlc3QscGF5bG9hZCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ZGlzcGF0Y2goT2JqZWN0LmFzc2lnbih7fSxwYXlsb2FkLHtcblx0XHRcdFx0XHRcdHR5cGU6c3VjY2Vzc1R5cGUsXG5cdFx0XHRcdFx0XHRyZXNwb25zZTpyZXNwb25zZSxcblx0XHRcdFx0XHRcdG5hbWU6YXBpTmFtZVxuXHRcdFx0XHRcdH0pKTtcblxuXHRcdFx0XHRcdHJlc29sdmUocmVzcG9uc2UpO1xuXG5cdFx0XHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycil7XG5cblx0XHRcdFx0XHRkaXNwYXRjaChPYmplY3QuYXNzaWduKHt9LHBheWxvYWQse1xuXHRcdFx0XHRcdFx0dHlwZTpmYWlsdXJlVHlwZSxcblx0XHRcdFx0XHRcdGVycm9yOmVycixcblx0XHRcdFx0XHRcdG5hbWU6YXBpTmFtZVxuXHRcdFx0XHRcdH0pKVxuXHRcdFx0XHRcdHJlamVjdChlcnIpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0fVxuXG5cdH1cblxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gY2FsbEFQSU1pZGRsZXdhcmU7XG4iXX0=