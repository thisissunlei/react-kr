'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Redux = require('kr/Redux');

var _reduxForm = require('redux-form');

var _krUi = require('kr-ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EquipmentAdvancedQueryForm = function (_Component) {
	_inherits(EquipmentAdvancedQueryForm, _Component);

	function EquipmentAdvancedQueryForm(props) {
		_classCallCheck(this, EquipmentAdvancedQueryForm);

		var _this2 = _possibleConstructorReturn(this, (EquipmentAdvancedQueryForm.__proto__ || Object.getPrototypeOf(EquipmentAdvancedQueryForm)).call(this, props));

		_this2.onSubmit = function (values) {
			// console.log("values",values);
			var _this2$props = _this2.props,
			    content = _this2$props.content,
			    filter = _this2$props.filter;
			var searchForm = _this2.state.searchForm;

			if (!searchForm) {
				values.type = filter;
				values.value = content;
			}
			if (!values.type) {
				values.type = filter;
			}
			// console.log("values",values);
			var onSubmit = _this2.props.onSubmit;

			onSubmit && onSubmit(values);
		};

		_this2.onReset = function () {
			_Redux.Store.dispatch((0, _reduxForm.reset)('EquipmentAdvancedQueryForm', ''));
			// console.log("this.refs.IndexsearchForm.refs.componentSearchInput",this.refs.IndexsearchForm.refs.componentSearchInput)
			_this2.refs.IndexsearchForm.refs.componentSearchInput.value = "";
			_Redux.Store.dispatch((0, _reduxForm.change)('EquipmentAdvancedQueryForm', 'type', "deviceCode"));
			var onReset = _this2.props.onReset;

			onReset && onReset();
		};

		_this2.onFilter = function (search) {
			console.log("search", search);
			_this2.setState({ searchForm: true });
			if (search.content) {
				_Redux.Store.dispatch((0, _reduxForm.change)('EquipmentAdvancedQueryForm', 'type', search.value));
				_Redux.Store.dispatch((0, _reduxForm.change)('EquipmentAdvancedQueryForm', 'value', search.content));
			} else {
				_Redux.Store.dispatch((0, _reduxForm.change)('EquipmentAdvancedQueryForm', 'type', search.value));
				_Redux.Store.dispatch((0, _reduxForm.change)('EquipmentAdvancedQueryForm', 'value', ''));
			}
		};

		_this2.onSearchFloor = function (community) {
			var _this = _this2;
			if (community == null) {
				return;
			}
			var CommunityId = {
				communityId: community.id
			};
			_Redux.Store.dispatch(_Redux.Actions.callAPI('getFloorByComunity', CommunityId)).then(function (response) {
				var arrNew = [];
				for (var i = 0; i < response.whereFloors.length; i++) {
					arrNew[i] = { label: response.whereFloors[i], value: response.whereFloors[i] };
				}
				_this.setState({
					floorsOptions: arrNew
				});
			}).catch(function (err) {});
		};

		_this2.state = {
			searchForm: false,
			floorsOptions: [{ label: "", value: "" }]
		};
		return _this2;
	}

	_createClass(EquipmentAdvancedQueryForm, [{
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps() {}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this = this;
			_Redux.Store.dispatch((0, _reduxForm.change)('EquipmentAdvancedQueryForm', 'type', this.props.filter));
			_Redux.Store.dispatch((0, _reduxForm.change)('EquipmentAdvancedQueryForm', 'value', this.props.content));
		}
		// 提交

		// 重置

		// 过滤器失去焦点执行

		// 查询楼层

	}, {
		key: 'render',
		value: function render() {
			var floorsOptions = this.state.floorsOptions;
			var _props = this.props,
			    error = _props.error,
			    handleSubmit = _props.handleSubmit,
			    content = _props.content,
			    filter = _props.filter;

			var options = [{
				label: "门编号",
				value: "deviceCode"
			}, {
				label: "硬件编号",
				value: "hardwareId"
			}];
			// 类型待选项
			var typeOptions = [{
				label: '门禁',
				value: 1
			}];
			// 属性待选项
			var propertyOption = [{
				label: '大门',
				value: 1
			}, {
				label: '会议室',
				value: 2
			}, {
				label: '功能室',
				value: 3
			}];
			// 对应功能选项
			var correspondingFunction = [{
				label: '开门',
				value: 1
			}, {
				label: '开门／预定',
				value: 2
			}, {
				label: '预定',
				value: 3
			}];
			return _react2.default.createElement(
				'form',
				{ onSubmit: handleSubmit(this.onSubmit), style: { marginTop: '37px', marginLeft: '40px' } },
				_react2.default.createElement(
					_krUi.ListGroup,
					null,
					_react2.default.createElement(
						_krUi.ListGroupItem,
						{ style: { marginBottom: 5 } },
						_react2.default.createElement(_krUi.SearchForm, {
							searchFilter: options,
							style: { width: 252, marginBottom: 10 },
							defaultFilter: filter,
							defaultContent: content,
							onSubmit: this.onFilter,
							ref: 'IndexsearchForm'
						})
					)
				),
				_react2.default.createElement(_krUi.KrField, _defineProperty({ name: 'communityId',
					component: 'searchCommunity',
					onChange: this.onChangeSearchCommunity,
					label: '\u793E\u533A\u540D\u79F0',
					style: { width: '252px', margin: '0 35px 5px 0' }
				}, 'onChange', this.onSearchFloor)),
				_react2.default.createElement(_krUi.KrField, { name: 'floor',
					component: 'select',
					label: '\u697C\u5C42',
					options: floorsOptions,
					errors: { requiredValue: '社区为必填项' },
					style: { width: '252px' }
				}),
				_react2.default.createElement(_krUi.KrField, { name: 'typeId',
					component: 'select',
					label: '\u7C7B\u578B',
					onChange: this.onchooseType,
					options: typeOptions,
					style: { width: '252px', margin: '0 35px 5px 0' }
				}),
				_react2.default.createElement(_krUi.KrField, { name: 'propertyId',
					component: 'select',
					label: '\u5C5E\u6027',
					onChange: this.onchooseProperty,
					options: propertyOption,
					style: { width: '252px' }
				}),
				_react2.default.createElement(_krUi.KrField, { name: 'functionId',
					component: 'select',
					options: correspondingFunction,
					label: '\u5BF9\u5E94\u529F\u80FD',
					onChange: this.onchooseCorrespondingFunction,
					style: { width: '252px', margin: '0 35px 5px 0' }
				}),
				_react2.default.createElement(
					_krUi.Grid,
					{ style: { margin: "20px 0 3px -10px" } },
					_react2.default.createElement(
						_krUi.Row,
						null,
						_react2.default.createElement(
							_krUi.ListGroup,
							null,
							_react2.default.createElement(
								_krUi.ListGroupItem,
								{ style: { width: '269px', textAlign: 'right', padding: 0, paddingRight: 15 } },
								_react2.default.createElement(_krUi.Button, { label: '\u786E\u5B9A', type: 'submit' })
							),
							_react2.default.createElement(
								_krUi.ListGroupItem,
								{ style: { width: '254px', textAlign: 'left', padding: 0, paddingLeft: 15 } },
								_react2.default.createElement(_krUi.Button, { label: '\u91CD\u7F6E', type: 'button', cancle: true, onTouchTap: this.onReset })
							)
						)
					)
				)
			);
		}
	}]);

	return EquipmentAdvancedQueryForm;
}(_react.Component);

var _default = EquipmentAdvancedQueryForm = (0, _reduxForm.reduxForm)({
	form: 'EquipmentAdvancedQueryForm'
})(EquipmentAdvancedQueryForm);

exports.default = _default;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(EquipmentAdvancedQueryForm, 'EquipmentAdvancedQueryForm', '/Users/liuyihao/Code/kr-admin/src/Containers/Operation/BasicConfig/EquipmentDefinition/EquipmentAdvancedQueryForm.js');

	__REACT_HOT_LOADER__.register(_default, 'default', '/Users/liuyihao/Code/kr-admin/src/Containers/Operation/BasicConfig/EquipmentDefinition/EquipmentAdvancedQueryForm.js');
}();

;
//# sourceMappingURL=data:application/json;base64,