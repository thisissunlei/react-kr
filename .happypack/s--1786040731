'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reduxForm = require('redux-form');

var _Redux = require('kr/Redux');

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _krUi = require('kr-ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CancleLeader = function (_Component) {
	_inherits(CancleLeader, _Component);

	function CancleLeader(props, context) {
		_classCallCheck(this, CancleLeader);

		var _this2 = _possibleConstructorReturn(this, (CancleLeader.__proto__ || Object.getPrototypeOf(CancleLeader)).call(this, props, context));

		_this2.test = function () {
			var _this = _this2;
			var form = new FormData();
			form.append('file', _this2.state.file);
			form.append('companyId', _this2.companyId);
			form.append('communityId', _this2.communityId);
			if (!_this2.state.file.name) {
				_krUi.Message.error('请选择上传文件');
				return false;
			}

			var xhr = new XMLHttpRequest();
			xhr.onreadystatechange = function () {
				if (xhr.readyState === 4) {
					if (xhr.status === 200) {
						console.log('ss', xhr.response);
						if (xhr.response.code == '-1') {
							_krUi.Message.error(xhr.response.message);
						} else {
							_krUi.Message.success("上传文件成功");
							_this.onCancel();
							_this.onSubmit();
						}
					} else {
						_this.onCancel();
						_krUi.Message.error('上传文件失败');
					}
				}
			};

			xhr.onerror = function (e) {
				console.error(xhr.statusText);
			};
			xhr.open('POST', 'http://optest02.krspace.cn/api/krspace-finance-web/member/member-excel', true);
			xhr.responseType = 'json';
			xhr.send(form);
		};

		_this2.onCancel = function () {
			var onCancel = _this2.props.onCancel;

			onCancel && onCancel();
		};

		_this2.onSubmit = function () {
			var onSubmit = _this2.props.onSubmit;

			onSubmit && onSubmit();
		};

		_this2.onLoadDemo = function () {
			var onLoadDemo = _this2.props.onLoadDemo;

			onLoadDemo && onLoadDemo();
		};

		_this2.importFile = function () {
			// console.log('importFile');
		};

		_this2.onTokenSuccess = function (form) {
			_this2.setState({
				form: form
			});
		};

		_this2.onChange = function (event) {

			var _this = _this2;
			var fileName = event.target.files[0].name;
			var arr = event.target.files[0].name.split('.');
			var type = arr[arr.length - 1];
			if (type != 'xls' && type != 'xlsx') {
				_krUi.Message.error('上传文件类型不对，请选择.xls或.xlsx');
				return;
			}
			_this.setState({
				fileName: fileName,
				file: event.target.files[0]
			});
		};

		_this2.companyId = _this2.context.router.params.companyId;
		_this2.communityId = _this2.context.router.params.communityId;
		_this2.state = {
			isInit: true,
			form: {},
			files: [],
			isUploading: false,
			progress: 0,
			file: {},
			fileName: ''
		};
		return _this2;
	}

	_createClass(CancleLeader, [{
		key: 'render',
		value: function render() {
			var fileName = this.state.fileName;


			return _react2.default.createElement(
				'form',
				{ name: 'import', style: { textAlign: 'center' } },
				_react2.default.createElement(
					'div',
					null,
					_react2.default.createElement(
						'span',
						{ className: 'import-logo icon-excel', onClick: this.importFile },
						_react2.default.createElement('input', { type: 'file', name: 'file', className: 'chooce-file', onChange: this.onChange })
					),
					_react2.default.createElement('input', { type: 'hidden', name: 'companyId' }),
					_react2.default.createElement(
						'span',
						{ className: 'import-font' },
						_react2.default.createElement(
							'span',
							{ className: 'chooce' },
							'\u8BF7\u9009\u62E9\u4E0A\u4F20\u6587\u4EF6'
						),
						_react2.default.createElement('input', { type: 'file', name: 'file', className: 'chooce-file', onChange: this.onChange })
					),
					fileName ? _react2.default.createElement(
						'span',
						{ className: 'file-name' },
						fileName
					) : '',
					_react2.default.createElement(
						'span',
						{ className: 'load-demo icon-template', onClick: this.onLoadDemo },
						'\u4E0B\u8F7Dexcel\u6A21\u677F'
					)
				),
				_react2.default.createElement(
					_krUi.Grid,
					{ style: { marginTop: 10, marginBottom: 6 } },
					_react2.default.createElement(
						_krUi.Row,
						null,
						_react2.default.createElement(
							_krUi.ListGroup,
							null,
							_react2.default.createElement(
								_krUi.ListGroupItem,
								{ style: { width: '180px', textAlign: 'right', padding: 0, paddingRight: 15 } },
								_react2.default.createElement(_krUi.Button, { label: '\u786E\u5B9A\u5BFC\u5165', type: 'button', width: 90, height: 34, onClick: this.test })
							),
							_react2.default.createElement(
								_krUi.ListGroupItem,
								{ style: { width: '150px', textAlign: 'left', padding: 0, paddingLeft: 15 } },
								_react2.default.createElement(_krUi.Button, { label: '\u53D6\u6D88', type: 'button', cancle: true, onTouchTap: this.onCancel, width: 90, height: 34 }),
								' '
							)
						)
					)
				)
			);
		}
	}]);

	return CancleLeader;
}(_react.Component);

CancleLeader.propTypes = {
	initialValues: _react2.default.PropTypes.object,
	communityOptions: _react2.default.PropTypes.array,
	orderTypeOptions: _react2.default.PropTypes.array
};
CancleLeader.contextTypes = {
	router: _react2.default.PropTypes.object.isRequired
};
exports.default = CancleLeader;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(CancleLeader, 'CancleLeader', '/Users/liuyihao/Code/kr-admin/src/Containers/Operation/CommunityManage/CompanyMembers/ImportData.js');
}();

;
//# sourceMappingURL=data:application/json;base64,