'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Input = require('../Input');

var _Input2 = _interopRequireDefault(_Input);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Field = function (_React$Component) {
  _inherits(Field, _React$Component);

  function Field(props, context) {
    _classCallCheck(this, Field);

    var _this = _possibleConstructorReturn(this, (Field.__proto__ || Object.getPrototypeOf(Field)).call(this, props, context));

    _initialiseProps.call(_this);

    var name = _this.props.name;


    _this.name = name;
    _this.value = '';

    return _this;
  }

  _createClass(Field, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _context = this.context,
          initializeField = _context.initializeField,
          initializeValidations = _context.initializeValidations;
      var _props = this.props,
          name = _props.name,
          defaultValue = _props.defaultValue;

      initializeField && initializeField(name, defaultValue);

      var props = this.props;
      var errors = this.props.errors;


      if (!errors) {
        return;
      }
      var validationKeys = Object.keys(errors);

      var validation = {
        errors: errors
      };

      validationKeys.map(function (item, index) {
        if (item && props.hasOwnProperty(item)) {
          validation[item] = props[item];
        }
      });

      initializeValidations && initializeValidations(name, validation);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          name = _props2.name,
          children = _props2.children,
          minLength = _props2.minLength,
          maxLength = _props2.maxLength,
          errors = _props2.errors,
          requiredValue = _props2.requiredValue,
          component = _props2.component;


      return _react2.default.createElement(
        'span',
        null,
        this.renderComponent(component)
      );
    }
  }]);

  return Field;
}(_react2.default.Component);

Field.displayName = 'Field';
Field.propTypes = {
  name: _react2.default.PropTypes.string,
  component: _react2.default.PropTypes.any
};
Field.contextTypes = {
  blur: _react2.default.PropTypes.func.isRequired,
  focus: _react2.default.PropTypes.func.isRequired,
  error: _react2.default.PropTypes.func.isRequired,
  change: _react2.default.PropTypes.func.isRequired,
  initializeField: _react2.default.PropTypes.func.isRequired,
  syncErrors: _react2.default.PropTypes.object.isRequired,
  fields: _react2.default.PropTypes.object.isRequired,
  initializeValidations: _react2.default.PropTypes.func.isRequired,
  values: _react2.default.PropTypes.object.isRequired
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.onFocus = function () {
    var focus = _this2.context.focus;

    focus && focus(_this2.props.name);
  };

  this.onBlur = function () {};

  this.onError = function (message) {
    var error = _this2.context.error;
    var name = _this2.props.name;

    error && error(name, message);
  };

  this.onChange = function (value) {
    var change = _this2.context.change;
    var _props3 = _this2.props,
        name = _props3.name,
        onChange = _props3.onChange;


    change && change(name, value);
    onChange && onChange(value);
  };

  this.renderComponent = function (component) {
    var _context2 = _this2.context,
        syncErrors = _context2.syncErrors,
        fields = _context2.fields,
        values = _context2.values;
    var name = _this2.props.name;


    var input = {
      name: _this2.props.name,
      value: values[name],
      onChange: _this2.onChange,
      onBlur: _this2.oBlur,
      onFocus: _this2.onFocus,
      onError: _this2.onError
    };

    var field = {
      touched: false,
      active: false
    };

    if (fields && fields.hasOwnProperty(name)) {
      field = fields[name];
    }

    var meta = _defineProperty({
      dirty: false,
      autofilled: false,
      error: '',
      warning: '',
      pristine: false,
      invalid: false,
      valid: false,
      visited: false,
      active: field.active,
      touched: field.touched
    }, 'error', syncErrors[_this2.props.name]);

    var props = (0, _simpleAssign2.default)({}, {
      ref: name,
      input: input,
      meta: meta
    }, _extends({}, _this2.props));

    var handles = {};

    if (typeof component === 'undefined' || typeof component === 'string') {
      return _react2.default.createElement(_Input2.default, _extends({ name: name, type: 'text' }, props, handles));
    }

    return _react2.default.createElement(component, _extends({}, props, handles));
  };
};

exports.default = Field;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(Field, 'Field', '/Users/smile/Documents/kr-admin/src/Components/KrForm/Field/index.js');
}();

;