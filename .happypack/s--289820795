'use strict';

var _stripDiacritics = require('./stripDiacritics');

var _stripDiacritics2 = _interopRequireDefault(_stripDiacritics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function filterOptions(options, filterValue, excludeOptions, props) {
	var _this = this;

	if (props.ignoreAccents) {
		filterValue = (0, _stripDiacritics2.default)(filterValue);
	}

	if (props.ignoreCase) {
		filterValue = filterValue.toLowerCase();
	}

	if (excludeOptions) excludeOptions = excludeOptions.map(function (i) {
		return i[props.valueKey];
	});

	return options.filter(function (option) {
		if (excludeOptions && excludeOptions.indexOf(option[props.valueKey]) > -1) return false;
		if (props.filterOption) return props.filterOption.call(_this, option, filterValue);
		if (!filterValue) return true;
		var valueTest = String(option[props.valueKey]);
		var labelTest = String(option[props.labelKey]);
		if (props.ignoreAccents) {
			if (props.matchProp !== 'label') valueTest = (0, _stripDiacritics2.default)(valueTest);
			if (props.matchProp !== 'value') labelTest = (0, _stripDiacritics2.default)(labelTest);
		}
		if (props.ignoreCase) {
			if (props.matchProp !== 'label') valueTest = valueTest.toLowerCase();
			if (props.matchProp !== 'value') labelTest = labelTest.toLowerCase();
		}
		return props.matchPos === 'start' ? props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;
	});
}

module.exports = filterOptions;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(filterOptions, 'filterOptions', '/Users/liuyihao/Code/kr-admin/src/Components/Select/utils/defaultFilterOptions.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9Db21wb25lbnRzL1NlbGVjdC91dGlscy9kZWZhdWx0RmlsdGVyT3B0aW9ucy5qcyJdLCJuYW1lcyI6WyJmaWx0ZXJPcHRpb25zIiwib3B0aW9ucyIsImZpbHRlclZhbHVlIiwiZXhjbHVkZU9wdGlvbnMiLCJwcm9wcyIsImlnbm9yZUFjY2VudHMiLCJpZ25vcmVDYXNlIiwidG9Mb3dlckNhc2UiLCJtYXAiLCJpIiwidmFsdWVLZXkiLCJmaWx0ZXIiLCJpbmRleE9mIiwib3B0aW9uIiwiZmlsdGVyT3B0aW9uIiwiY2FsbCIsInZhbHVlVGVzdCIsIlN0cmluZyIsImxhYmVsVGVzdCIsImxhYmVsS2V5IiwibWF0Y2hQcm9wIiwibWF0Y2hQb3MiLCJzdWJzdHIiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFFQSxTQUFTQSxhQUFULENBQXdCQyxPQUF4QixFQUFpQ0MsV0FBakMsRUFBOENDLGNBQTlDLEVBQThEQyxLQUE5RCxFQUFxRTtBQUFBOztBQUNwRSxLQUFJQSxNQUFNQyxhQUFWLEVBQXlCO0FBQ3hCSCxnQkFBYywrQkFBZ0JBLFdBQWhCLENBQWQ7QUFDQTs7QUFFRCxLQUFJRSxNQUFNRSxVQUFWLEVBQXNCO0FBQ3JCSixnQkFBY0EsWUFBWUssV0FBWixFQUFkO0FBQ0E7O0FBRUQsS0FBSUosY0FBSixFQUFvQkEsaUJBQWlCQSxlQUFlSyxHQUFmLENBQW1CO0FBQUEsU0FBS0MsRUFBRUwsTUFBTU0sUUFBUixDQUFMO0FBQUEsRUFBbkIsQ0FBakI7O0FBRXBCLFFBQU9ULFFBQVFVLE1BQVIsQ0FBZSxrQkFBVTtBQUMvQixNQUFJUixrQkFBa0JBLGVBQWVTLE9BQWYsQ0FBdUJDLE9BQU9ULE1BQU1NLFFBQWIsQ0FBdkIsSUFBaUQsQ0FBQyxDQUF4RSxFQUEyRSxPQUFPLEtBQVA7QUFDM0UsTUFBSU4sTUFBTVUsWUFBVixFQUF3QixPQUFPVixNQUFNVSxZQUFOLENBQW1CQyxJQUFuQixRQUE4QkYsTUFBOUIsRUFBc0NYLFdBQXRDLENBQVA7QUFDeEIsTUFBSSxDQUFDQSxXQUFMLEVBQWtCLE9BQU8sSUFBUDtBQUNsQixNQUFJYyxZQUFZQyxPQUFPSixPQUFPVCxNQUFNTSxRQUFiLENBQVAsQ0FBaEI7QUFDQSxNQUFJUSxZQUFZRCxPQUFPSixPQUFPVCxNQUFNZSxRQUFiLENBQVAsQ0FBaEI7QUFDQSxNQUFJZixNQUFNQyxhQUFWLEVBQXlCO0FBQ3hCLE9BQUlELE1BQU1nQixTQUFOLEtBQW9CLE9BQXhCLEVBQWlDSixZQUFZLCtCQUFnQkEsU0FBaEIsQ0FBWjtBQUNqQyxPQUFJWixNQUFNZ0IsU0FBTixLQUFvQixPQUF4QixFQUFpQ0YsWUFBWSwrQkFBZ0JBLFNBQWhCLENBQVo7QUFDakM7QUFDRCxNQUFJZCxNQUFNRSxVQUFWLEVBQXNCO0FBQ3JCLE9BQUlGLE1BQU1nQixTQUFOLEtBQW9CLE9BQXhCLEVBQWlDSixZQUFZQSxVQUFVVCxXQUFWLEVBQVo7QUFDakMsT0FBSUgsTUFBTWdCLFNBQU4sS0FBb0IsT0FBeEIsRUFBaUNGLFlBQVlBLFVBQVVYLFdBQVYsRUFBWjtBQUNqQztBQUNELFNBQU9ILE1BQU1pQixRQUFOLEtBQW1CLE9BQW5CLEdBQ0xqQixNQUFNZ0IsU0FBTixLQUFvQixPQUFwQixJQUErQkosVUFBVU0sTUFBVixDQUFpQixDQUFqQixFQUFvQnBCLFlBQVlxQixNQUFoQyxNQUE0Q3JCLFdBQTVFLElBQ0NFLE1BQU1nQixTQUFOLEtBQW9CLE9BQXBCLElBQStCRixVQUFVSSxNQUFWLENBQWlCLENBQWpCLEVBQW9CcEIsWUFBWXFCLE1BQWhDLE1BQTRDckIsV0FGdEUsR0FJTEUsTUFBTWdCLFNBQU4sS0FBb0IsT0FBcEIsSUFBK0JKLFVBQVVKLE9BQVYsQ0FBa0JWLFdBQWxCLEtBQWtDLENBQWxFLElBQ0NFLE1BQU1nQixTQUFOLEtBQW9CLE9BQXBCLElBQStCRixVQUFVTixPQUFWLENBQWtCVixXQUFsQixLQUFrQyxDQUxuRTtBQU9BLEVBckJNLENBQVA7QUFzQkE7O0FBRURzQixPQUFPQyxPQUFQLEdBQWlCekIsYUFBakI7Ozs7Ozs7OytCQW5DU0EsYSIsImZpbGUiOiJkZWZhdWx0RmlsdGVyT3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvbGl1eWloYW8vQ29kZS9rci1hZG1pbiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzdHJpcERpYWNyaXRpY3MgZnJvbSAnLi9zdHJpcERpYWNyaXRpY3MnO1xuXG5mdW5jdGlvbiBmaWx0ZXJPcHRpb25zIChvcHRpb25zLCBmaWx0ZXJWYWx1ZSwgZXhjbHVkZU9wdGlvbnMsIHByb3BzKSB7XG5cdGlmIChwcm9wcy5pZ25vcmVBY2NlbnRzKSB7XG5cdFx0ZmlsdGVyVmFsdWUgPSBzdHJpcERpYWNyaXRpY3MoZmlsdGVyVmFsdWUpO1xuXHR9XG5cblx0aWYgKHByb3BzLmlnbm9yZUNhc2UpIHtcblx0XHRmaWx0ZXJWYWx1ZSA9IGZpbHRlclZhbHVlLnRvTG93ZXJDYXNlKCk7XG5cdH1cblxuXHRpZiAoZXhjbHVkZU9wdGlvbnMpIGV4Y2x1ZGVPcHRpb25zID0gZXhjbHVkZU9wdGlvbnMubWFwKGkgPT4gaVtwcm9wcy52YWx1ZUtleV0pO1xuXG5cdHJldHVybiBvcHRpb25zLmZpbHRlcihvcHRpb24gPT4ge1xuXHRcdGlmIChleGNsdWRlT3B0aW9ucyAmJiBleGNsdWRlT3B0aW9ucy5pbmRleE9mKG9wdGlvbltwcm9wcy52YWx1ZUtleV0pID4gLTEpIHJldHVybiBmYWxzZTtcblx0XHRpZiAocHJvcHMuZmlsdGVyT3B0aW9uKSByZXR1cm4gcHJvcHMuZmlsdGVyT3B0aW9uLmNhbGwodGhpcywgb3B0aW9uLCBmaWx0ZXJWYWx1ZSk7XG5cdFx0aWYgKCFmaWx0ZXJWYWx1ZSkgcmV0dXJuIHRydWU7XG5cdFx0dmFyIHZhbHVlVGVzdCA9IFN0cmluZyhvcHRpb25bcHJvcHMudmFsdWVLZXldKTtcblx0XHR2YXIgbGFiZWxUZXN0ID0gU3RyaW5nKG9wdGlvbltwcm9wcy5sYWJlbEtleV0pO1xuXHRcdGlmIChwcm9wcy5pZ25vcmVBY2NlbnRzKSB7XG5cdFx0XHRpZiAocHJvcHMubWF0Y2hQcm9wICE9PSAnbGFiZWwnKSB2YWx1ZVRlc3QgPSBzdHJpcERpYWNyaXRpY3ModmFsdWVUZXN0KTtcblx0XHRcdGlmIChwcm9wcy5tYXRjaFByb3AgIT09ICd2YWx1ZScpIGxhYmVsVGVzdCA9IHN0cmlwRGlhY3JpdGljcyhsYWJlbFRlc3QpO1xuXHRcdH1cblx0XHRpZiAocHJvcHMuaWdub3JlQ2FzZSkge1xuXHRcdFx0aWYgKHByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJykgdmFsdWVUZXN0ID0gdmFsdWVUZXN0LnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRpZiAocHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnKSBsYWJlbFRlc3QgPSBsYWJlbFRlc3QudG9Mb3dlckNhc2UoKTtcblx0XHR9XG5cdFx0cmV0dXJuIHByb3BzLm1hdGNoUG9zID09PSAnc3RhcnQnID8gKFxuXHRcdFx0KHByb3BzLm1hdGNoUHJvcCAhPT0gJ2xhYmVsJyAmJiB2YWx1ZVRlc3Quc3Vic3RyKDAsIGZpbHRlclZhbHVlLmxlbmd0aCkgPT09IGZpbHRlclZhbHVlKSB8fFxuXHRcdFx0KHByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJyAmJiBsYWJlbFRlc3Quc3Vic3RyKDAsIGZpbHRlclZhbHVlLmxlbmd0aCkgPT09IGZpbHRlclZhbHVlKVxuXHRcdCkgOiAoXG5cdFx0XHQocHJvcHMubWF0Y2hQcm9wICE9PSAnbGFiZWwnICYmIHZhbHVlVGVzdC5pbmRleE9mKGZpbHRlclZhbHVlKSA+PSAwKSB8fFxuXHRcdFx0KHByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJyAmJiBsYWJlbFRlc3QuaW5kZXhPZihmaWx0ZXJWYWx1ZSkgPj0gMClcblx0XHQpO1xuXHR9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmaWx0ZXJPcHRpb25zO1xuIl19