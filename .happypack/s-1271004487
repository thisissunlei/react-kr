'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reduxForm = require('redux-form');

var _Redux = require('kr/Redux');

var _fetch = require('kr/Redux/Utils/fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _krUi = require('kr-ui');

require('./index.less');

var _NewCreateForm = require('./NewCreateForm');

var _NewCreateForm2 = _interopRequireDefault(_NewCreateForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var JoinCreate = function (_Component) {
	_inherits(JoinCreate, _Component);

	function JoinCreate(props, context) {
		_classCallCheck(this, JoinCreate);

		var _this2 = _possibleConstructorReturn(this, (JoinCreate.__proto__ || Object.getPrototypeOf(JoinCreate)).call(this, props, context));

		_this2.onCreateSubmit = _this2.onCreateSubmit.bind(_this2);
		_this2.onCancel = _this2.onCancel.bind(_this2);

		_this2.state = {
			stationVos: [],
			initialValues: {},
			optionValues: {},
			formValues: {}
		};

		_Redux.Store.dispatch((0, _reduxForm.reset)('increaseCreateForm'));
		return _this2;
	}

	_createClass(JoinCreate, [{
		key: 'onCreateSubmit',
		value: function onCreateSubmit(formValues) {
			formValues = (0, _simpleAssign2.default)({}, formValues);
			var params = this.props.params;

			_Redux.Store.dispatch(_Redux.Actions.callAPI('addOrEditIncreaseContract', {}, formValues)).then(function (response) {
				_krUi.Notify.show([{
					message: '更新成功',
					type: 'success'
				}]);
				location.href = "./#/operation/customerManage/" + params.customerId + "/order/" + params.orderId + "/agreement/increase/" + response.contractId + "/detail";
			}).catch(function (err) {
				_krUi.Notify.show([{
					message: err.message,
					type: 'danger'
				}]);
			});
		}
	}, {
		key: 'onCancel',
		value: function onCancel() {
			var params = this.context.params;

			window.location.href = './#/operation/customerManage/' + params.customerId + '/order/' + params.orderId + '/detail';
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {

			var _this = this;
			var params = this.props.params;

			var initialValues = {};
			var optionValues = {};
			var stationVos = [];

			_Redux.Store.dispatch(_Redux.Actions.callAPI('fina-contract-intention', {
				customerId: params.customerId,
				mainBillId: params.orderId,
				communityId: 1
			})).then(function (response) {

				initialValues.contractstate = 'UNSTART';
				initialValues.mainbillid = params.orderId;
				initialValues.leaseContact = response.customer.customerMember;
				initialValues.leaseContacttel = response.customer.customerPhone;
				initialValues.signdate = +new Date(new Date().getTime() - 24 * 60 * 60 * 1000);

				optionValues.communityAddress = response.customer.communityAddress;
				optionValues.leaseAddress = response.customer.customerAddress;
				//合同类别，枚举类型（1:意向书,2:入住协议,3:增租协议,4.续租协议,5:减租协议,6退租协议）
				initialValues.contracttype = 'ADDRENT';

				optionValues.fnaCorporationList = response.fnaCorporation.map(function (item, index) {
					item.value = item.id;
					item.label = item.corporationName;
					return item;
				});
				optionValues.paymentList = response.payment.map(function (item, index) {
					item.value = item.id;
					item.label = item.dicName;
					return item;
				});
				optionValues.payTypeList = response.payType.map(function (item, index) {
					item.value = item.id;
					item.label = item.dicName;
					return item;
				});

				optionValues.floorList = response.customer.floor;
				optionValues.customerName = response.customer.customerName;
				optionValues.leaseAddress = response.customer.customerAddress;
				optionValues.communityName = response.customer.communityName;
				optionValues.communityId = response.customer.communityid;
				optionValues.mainbillCommunityId = response.mainbillCommunityId || 1;

				_Redux.Store.dispatch(_Redux.Actions.callAPI('show-checkin-agreement', {
					id: params.id
				})).then(function (response) {
					console.log('response', response);

					optionValues.lessorContactName = response.lessorContactName;

					optionValues.contractFileList = response.contractFileList;

					initialValues.id = response.id;
					initialValues.leaseId = response.leaseId;
					initialValues.contractcode = response.contractcode;
					initialValues.contractVersionType = response.contractVersion;

					initialValues.lessorContactid = response.lessorContactid;
					initialValues.lessorContactName = response.lessorContactName;

					initialValues.leaseId = response.leaseId;
					initialValues.leaseAddress = response.leaseAddress;
					initialValues.leaseContact = response.leaseContact;
					initialValues.leaseContacttel = response.leaseContacttel;
					initialValues.paytype = response.payType.id;
					initialValues.paymodel = response.payment.id;
					initialValues.stationnum = response.stationnum;
					initialValues.wherefloor = response.wherefloor;
					initialValues.rentaluse = response.rentaluse;
					initialValues.contractmark = response.contractmark || '';
					initialValues.totalrent = response.totalrent;
					initialValues.totaldeposit = response.totaldeposit;
					initialValues.lessorContacttel = response.lessorContacttel;

					//时间
					initialValues.firstpaydate = new Date(response.firstpaydate);
					initialValues.signdate = new Date(response.signdate);
					initialValues.leaseBegindate = new Date(response.leaseBegindate);
					initialValues.leaseEnddate = new Date(response.leaseEnddate);

					console.log('时间', initialValues);

					//处理stationvos
					stationVos = response.stationVos;

					_this.setState({
						initialValues: initialValues,
						optionValues: optionValues,
						stationVos: stationVos
					});
				}).catch(function (err) {
					_krUi.Notify.show([{
						message: '后台出错请联系管理员',
						type: 'danger'
					}]);
				});
			}).catch(function (err) {
				_krUi.Notify.show([{
					message: '后台出错请联系管理员',
					type: 'danger'
				}]);
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _state = this.state,
			    initialValues = _state.initialValues,
			    optionValues = _state.optionValues,
			    stationVos = _state.stationVos;


			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_krUi.Title, { value: '\u7F16\u8F91\u589E\u79DF\u534F\u8BAE\u4E66_\u8D22\u52A1\u7BA1\u7406' }),
				_react2.default.createElement(_krUi.BreadCrumbs, { children: ['系统运营', '客户管理', '增租协议书'] }),
				_react2.default.createElement(
					_krUi.Section,
					{ title: '\u589E\u79DF\u534F\u8BAE\u4E66', description: '' },
					_react2.default.createElement(_NewCreateForm2.default, { onSubmit: this.onCreateSubmit, initialValues: initialValues, onCancel: this.onCancel, optionValues: optionValues, stationVos: stationVos })
				)
			);
		}
	}]);

	return JoinCreate;
}(_react.Component);

JoinCreate.contextTypes = {
	params: _react2.default.PropTypes.object.isRequired
};
exports.default = JoinCreate;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(JoinCreate, 'JoinCreate', '/Users/tmac_zc/Code/kr-admin/src/Containers/Operation/CustomerManage/Agreement/Increase/Edit/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,