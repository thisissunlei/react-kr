{"version":3,"sources":["src/Components/DatePicker/internal/FocusRipple.js"],"names":["pulsateDuration","FocusRipple","pulsate","innerCircle","findDOMNode","refs","startScale","endScale","currentScale","style","transform","nextScale","set","timeout","setTimeout","props","show","setRippleSize","nextProps","nextState","state","clearTimeout","color","innerStyle","opacity","context","muiTheme","prepareStyles","ripple","innerStyles","position","height","width","borderRadius","backgroundColor","transition","easeOut","easeInOutFunction","el","offsetHeight","offsetWidth","size","Math","max","oldTop","top","indexOf","length","parseInt","mergedRootStyles","left","getRippleElement","propTypes","string","object","number","bool","contextTypes","isRequired"],"mappings":"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","file":"FocusRipple.js","sourceRoot":"/Users/tmac_zc/Code/kr-admin","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport ReactDOM from 'react-dom';\nimport shallowEqual from 'recompose/shallowEqual';\nimport autoPrefix from '../utils/autoPrefix';\nimport transitions from '../styles/transitions';\nimport ScaleInTransitionGroup from './ScaleIn';\n\nconst pulsateDuration = 750;\n\nclass FocusRipple extends Component {\n  static propTypes = {\n    color: PropTypes.string,\n    innerStyle: PropTypes.object,\n    opacity: PropTypes.number,\n    show: PropTypes.bool,\n    style: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    if (this.props.show) {\n      this.setRippleSize();\n      this.pulsate();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      !shallowEqual(this.props, nextProps) ||\n      !shallowEqual(this.state, nextState)\n    );\n  }\n\n  componentDidUpdate() {\n    if (this.props.show) {\n      this.setRippleSize();\n      this.pulsate();\n    } else {\n      if (this.timeout) clearTimeout(this.timeout);\n    }\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  getRippleElement(props) {\n    const {\n      color,\n      innerStyle,\n      opacity,\n    } = props;\n\n    const {prepareStyles, ripple} = this.context.muiTheme;\n\n    const innerStyles = Object.assign({\n      position: 'absolute',\n      height: '100%',\n      width: '100%',\n      borderRadius: '50%',\n      opacity: opacity ? opacity : 0.16,\n      backgroundColor: color || ripple.color,\n      transition: transitions.easeOut(`${pulsateDuration}ms`, 'transform', null, transitions.easeInOutFunction),\n    }, innerStyle);\n\n    return <div ref=\"innerCircle\" style={prepareStyles(Object.assign({}, innerStyles))} />;\n  }\n\n  pulsate = () => {\n    const innerCircle = ReactDOM.findDOMNode(this.refs.innerCircle);\n    if (!innerCircle) return;\n\n    const startScale = 'scale(1)';\n    const endScale = 'scale(0.85)';\n    const currentScale = innerCircle.style.transform || startScale;\n    const nextScale = currentScale === startScale ? endScale : startScale;\n\n    autoPrefix.set(innerCircle.style, 'transform', nextScale);\n    this.timeout = setTimeout(this.pulsate, pulsateDuration);\n  };\n\n  setRippleSize() {\n    const el = ReactDOM.findDOMNode(this.refs.innerCircle);\n    const height = el.offsetHeight;\n    const width = el.offsetWidth;\n    const size = Math.max(height, width);\n\n    let oldTop = 0;\n    // For browsers that don't support endsWith()\n    if (el.style.top.indexOf('px', el.style.top.length - 2) !== -1) {\n      oldTop = parseInt(el.style.top);\n    }\n    el.style.height = `${size}px`;\n    el.style.top = `${(height / 2) - (size / 2 ) + oldTop}px`;\n  }\n\n  render() {\n    const {\n      show,\n      style,\n    } = this.props;\n\n    const mergedRootStyles = Object.assign({\n      height: '100%',\n      width: '100%',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n    }, style);\n\n    const ripple = show ? this.getRippleElement(this.props) : null;\n\n    return (\n      <ScaleInTransitionGroup\n        maxScale={0.85}\n        style={mergedRootStyles}\n      >\n        {ripple}\n      </ScaleInTransitionGroup>\n    );\n  }\n}\n\nexport default FocusRipple;\n"]}