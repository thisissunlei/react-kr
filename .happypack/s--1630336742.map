{"version":3,"sources":["src/Components/KrField/GroupCheckboxComponent/index.js"],"names":["GroupCheckboxComponent","props","onChange","checked","index","options","state","setState","valuationInputValue","onSelectAll","checkedAll","forEach","item","renderSelectAllSwitch","_this","renderOptions","children","name","map","label","value","component","values","input","push","join","defaultValue","nextProps","type","meta","touched","error","requireLabel","disabled","placeholder","style","inline","Component","displayName","propTypes","PropTypes","bool"],"mappings":"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","file":"index.js","sourceRoot":"/Users/liuyihao/Code/kr-admin","sourcesContent":["import React from 'react';\n\nimport {\n  ShallowEqual\n} from 'kr/Utils';\n\nimport Checkbox from '../../Checkbox';\n\nimport WrapComponent from '../WrapComponent';\n\nexport default class GroupCheckboxComponent extends React.Component {\n\n\tstatic displayName = 'GroupCheckboxComponent';\n\n\tstatic propTypes = {\n\t\tinline: React.PropTypes.bool,\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n    this.state = {\n      defaultValue:props.defaultValue,\n      options:props.defaultValue,\n      checkedAll:false,\n    }\n\n\t}\n\n  componentWillReceiveProps(nextProps){\n    if(!ShallowEqual(this.props.defaultValue,nextProps.defaultValue)){\n        this.setState({\n          defaultValue:nextProps.defaultValue,\n          options:nextProps.defaultValue\n        });\n    }\n  }\n\n  onChange =(checked,index)=>{\n      let {options} = this.state;\n      options[index].checked = checked;\n      this.setState({\n        options\n      },function(){\n          this.valuationInputValue();\n      });\n  }\n\n  onSelectAll = (checkedAll)=>{\n      let {options} = this.state;\n\n      options.forEach(function(item,index){\n          item.checked = checkedAll;\n      });\n\n      this.setState({\n        options,\n        checkedAll\n      },function(){\n        this.valuationInputValue();\n      });\n  }\n\n  renderSelectAllSwitch = ()=>{\n\n    var _this = this;\n\n    return <Checkbox label=\"全部\" value=\"all\" checked={this.state.checkedAll} onCheck={(checked)=>{\n        _this.onSelectAll(checked);\n      }}/>\n  }\n\n  renderOptions = ()=>{\n\n\n    let children = [];\n    let {options} = this.state;\n    let {name} = this.props;\n\n    var _this = this;\n\n    children = options.map(function(item,index){\n        return <div key={index}>\n         <Checkbox  label={item.label} value={item.value} checked={item.checked} onCheck={(checked)=>{\n            _this.onChange(checked,index);\n          }}/>\n          {item.checked && item.component && item.component()}\n        </div>\n    })\n\n    return children;\n  }\n\n  valuationInputValue=()=>{\n\n    let {options} = this.state;\n    let values = [];\n    let {input,onChange} = this.props;\n\n    options.map(function(item,index){\n      if (item.checked) {\n        values.push(item.value);\n      }\n    });\n\n    input.onChange && input.onChange(values.join(','));\n    onChange && onChange(options);\n  }\n\n\trender() {\n\n\t\tlet {\n\t\t\tinput,\n\t\t\tlabel,\n\t\t\ttype,\n\t\t\tmeta: {\n\t\t\t\ttouched,\n\t\t\t\terror\n\t\t\t},\n\t\t\trequireLabel,\n\t\t\tdisabled,\n\t\t\tplaceholder,\n\t\t\tstyle,\n\t\t\tdefaultValue,\n\t\t\tinline,\n\t\t} = this.props;\n\n\t\treturn (\n\n\t\t\t<WrapComponent label={label} wrapStyle={style} requireLabel={requireLabel} inline={inline} >\n\t\t\t\t\t<div className=\"ui-group-checkbox\">\n              {/*{this.renderSelectAllSwitch()}*/}\n              {this.renderOptions()}\n\t\t\t\t\t</div>\n\t\t\t\t</WrapComponent>\n\t\t);\n\t}\n\n}\n"]}