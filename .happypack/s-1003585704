'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Redux = require('kr/Redux');

var _fetch = require('kr/Redux/Utils/fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _dateformat = require('dateformat');

var _dateformat2 = _interopRequireDefault(_dateformat);

var _DatePicker = require('material-ui/DatePicker');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _krUi = require('kr-ui');

var _reduxForm = require('redux-form');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FloorPlan = function (_Component) {
	_inherits(FloorPlan, _Component);

	function FloorPlan(props, context) {
		_classCallCheck(this, FloorPlan);

		var _this2 = _possibleConstructorReturn(this, (FloorPlan.__proto__ || Object.getPrototypeOf(FloorPlan)).call(this, props, context));

		_this2.firstDate = function (personel) {

			// Store.dispatch(change('FloorPlan', 'start', dateFormat(new Date(), "yyyy-mm-dd")));
			var firstDate = new Date(personel);
			var date = _this2.state.date;

			if (_this2.state.dateend) {
				var endDate = new Date(_this2.state.dateend);
				var start = firstDate.getTime();
				var end = endDate.getTime();
				if (start <= end) {
					_this2.setState({
						date: personel
					});
				} else {
					_krUi.Notify.show([{
						message: '结束时间不能小于开始时间',
						type: 'danger'
					}]);
					_Redux.Store.dispatch((0, _reduxForm.change)('FloorPlan', 'start', (0, _dateformat2.default)(date, "yyyy-mm-dd")));
				}
			} else {
				_this2.setState({
					date: personel
				});
			}
		};

		_this2.secondDate = function (personel) {
			var dateend = _this2.state.dateend;


			var secondDate = new Date(personel);
			var end = _this2.state.dateend;
			if (_this2.state.date) {
				var firstDate = new Date(_this2.state.date);
				var start = firstDate.getTime();
				var _end = secondDate.getTime();
				if (start <= _end) {
					_this2.setState({
						dateend: personel
					});
				} else {
					_krUi.Notify.show([{
						message: '结束时间不能小于开始时间',
						type: 'danger'
					}]);
					_Redux.Store.dispatch((0, _reduxForm.change)('FloorPlan', 'end', (0, _dateformat2.default)(dateend, "yyyy-mm-dd")));
				}
			} else {
				_this2.setState({
					dateend: personel
				});
			}
		};

		var _this = _this2;
		_this2.getStationUrl = _this2.getStationUrl.bind(_this2);
		_this2.onSubmit = _this2.onSubmit.bind(_this2);
		_this2.scrollLoad = _this2.scrollLoad.bind(_this2);
		_this2.onLoad = _this2.onLoad.bind(_this2);
		_this2.iframeWindow = null;
		_this2.state = {

			form: {},
			floors: '',
			community: '',
			communityIdList: [],
			communityInfoFloorList: [],
			url: '',
			dateend: (0, _dateformat2.default)(new Date(), "yyyy-mm-dd"),
			date: (0, _dateformat2.default)(new Date(), "yyyy-mm-dd")
		};

		_this2.getcommunity = _this2.getcommunity.bind(_this2);
		_this2.selectCommunity = _this2.selectCommunity.bind(_this2);
		_this2.getcommunity();
		_this2.getCommunityFloors = _this2.getCommunityFloors.bind(_this2);
		_this2.selectFloors = _this2.selectFloors.bind(_this2);
		_Redux.Store.dispatch((0, _reduxForm.change)('FloorPlan', 'start', (0, _dateformat2.default)(new Date(), "yyyy-mm-dd")));
		_Redux.Store.dispatch((0, _reduxForm.change)('FloorPlan', 'end', (0, _dateformat2.default)(new Date(), "yyyy-mm-dd")));

		return _this2;
	}
	// static contextTypes = {
	// 	onSetCommunity: React.PropTypes.func.isRequired,
	// 	communityId: React.PropTypes.string.isRequired,
	// }


	_createClass(FloorPlan, [{
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (nextProps.url != this.props.url) {
				this.setState({
					url: nextProps.url
				}, function () {
					this.getStationUrl();
				});
			}
		}
	}, {
		key: 'onLoad',
		value: function onLoad(iframeWindow) {
			this.iframeWindow = iframeWindow;
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.setState({
				url: this.getStationUrl()
			});
		}
	}, {
		key: 'getStationUrl',
		value: function getStationUrl(form) {

			var url = "/krspace_operate_web/commnuity/communityFloorPlan/toCommunityFloorPlanList?communityId={communityId}&wherefloor={wherefloor}&date={date}&dateend={dateend}";

			var formList = form || {};
			var params = void 0;
			var _state = this.state,
			    community = _state.community,
			    floors = _state.floors,
			    date = _state.date,
			    dateend = _state.dateend;

			if (community == 0) {
				community = '';
			}

			params = {
				communityId: community,
				wherefloor: floors,
				date: date,
				dateend: dateend
			};

			if (Object.keys(params).length) {
				for (var item in params) {
					if (params.hasOwnProperty(item)) {
						url = url.replace('{' + item + '}', params[item]);
						delete params[item];
					}
				}
			};

			return url;
		}
	}, {
		key: 'onSubmit',
		value: function onSubmit(form) {
			form = (0, _simpleAssign2.default)({}, form);

			var _state2 = this.state,
			    floors = _state2.floors,
			    community = _state2.community;

			var that = this;
			var params = {
				communityId: community,
				wherefloor: floors,
				date: (0, _dateformat2.default)(form.start, "yyyy-mm-dd") || (0, _dateformat2.default)(new Date(), "yyyy-mm-dd"),
				dateend: (0, _dateformat2.default)(form.end, "yyyy-mm-dd") || (0, _dateformat2.default)(new Date(), "yyyy-mm-dd")
			};
			if (form.start && form.end) {
				var datastart = Date.parse(form.start),
				    dataend = Date.parse(form.end);
				if (datastart > dataend) {
					_krUi.Notify.show([{
						message: '开始时间不能大于结束时间',
						type: 'danger'
					}]);
				} else {
					this.setState({
						date: (0, _dateformat2.default)(form.start, "yyyy-mm-dd"),
						dateend: (0, _dateformat2.default)(form.end, "yyyy-mm-dd"),
						url: this.getStationUrl(params)
					});
				}
			} else {
				_krUi.Notify.show([{
					message: '注册时间不能为空',
					type: 'danger'
				}]);
			}
		}
		// 监听滚动事件

	}, {
		key: 'scrollLoad',
		value: function scrollLoad() {
			var that = this;
			(0, _jquery2.default)(window).bind('scroll', function () {
				var top = (0, _jquery2.default)(window).scrollTop() || 0; //539滚出的距离
				var height = (0, _jquery2.default)(window).height() || 0; //705浏览器高度
				var num = (0, _jquery2.default)(document).height() - (0, _jquery2.default)(window).height(); //页面高-浏览器高度
				// var scrollBottom = $('#planTable').offset().top +1000 - top - height;
				var scrollBottom = top - num;
				var isOutBoundary = scrollBottom >= 0;
				if (isOutBoundary) {
					that.iframeWindow.pagequery();
				}
			});
		}
	}, {
		key: 'getcommunity',
		value: function getcommunity() {
			var _this = this;
			var communityIdList = this.state.communityIdList;

			_Redux.Store.dispatch(_Redux.Actions.callAPI('getCommunity')).then(function (response) {
				communityIdList = response.communityInfoList.map(function (item, index) {
					item.value = item.id;
					item.label = item.name;
					return item;
				});
				communityIdList.unshift({
					label: '请选择',
					value: '0',
					id: '0'
				});
				_this.setState({
					communityIdList: communityIdList
				});
			}).catch(function (err) {
				_krUi.Notify.show([{
					message: err.message,
					type: 'danger'
				}]);
			});
		}
	}, {
		key: 'selectCommunity',
		value: function selectCommunity(personel) {
			var id = '';
			if (personel) {
				id = personel.id;
				this.getCommunityFloors(personel.id);
			}

			_Redux.Store.dispatch((0, _reduxForm.change)('FloorPlan', 'floor', ''));

			this.setState({
				community: id,
				floors: ''

			});
		}
	}, {
		key: 'getCommunityFloors',
		value: function getCommunityFloors(id) {
			var communityId = {
				communityId: parseInt(id)
			};
			var communityInfoFloorList;
			var that = this;
			_Redux.Store.dispatch(_Redux.Actions.callAPI('getCommunityFloors', communityId)).then(function (response) {
				communityInfoFloorList = response.floors.map(function (item, index) {
					var obj = {};
					obj.value = item;
					obj.label = item;
					return obj;
				});
				that.setState({
					communityInfoFloorList: communityInfoFloorList
				});
			}).catch(function (err) {
				_krUi.Notify.show([{
					message: err.message,
					type: 'danger'
				}]);
			});
		}
	}, {
		key: 'selectFloors',
		value: function selectFloors(personel) {
			var value = '';
			if (personel) {
				value = personel.value;
			}
			this.setState({
				floors: value
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _state3 = this.state,
			    height = _state3.height,
			    communityLabel = _state3.communityLabel,
			    communityIdList = _state3.communityIdList,
			    communityId = _state3.communityId,
			    communityInfoFloorList = _state3.communityInfoFloorList,
			    dateend = _state3.dateend,
			    date = _state3.date;

			var url = this.getStationUrl();

			var _props = this.props,
			    tab = _props.tab,
			    handleSubmit = _props.handleSubmit;


			if (tab === 'floorplan') {
				(0, _jquery2.default)(window).bind('scroll.floorplan', this.scrollLoad());
			} else {
				(0, _jquery2.default)(window).unbind('scroll.floorplan', this.scrollLoad());
			}

			return _react2.default.createElement(
				'div',
				{ id: 'planTable', style: { margin: 20, paddingBottom: 30 } },
				_react2.default.createElement(
					'form',
					{ name: 'planTable', onSubmit: handleSubmit(this.onSubmit), className: 'form-list', style: { textAlign: 'right' } },
					_react2.default.createElement(
						_krUi.ListGroup,
						null,
						_react2.default.createElement(
							_krUi.ListGroupItem,
							null,
							_react2.default.createElement(
								'span',
								{ style: { display: 'inline-block', lineHeight: '45px', textAlign: 'left' } },
								'\u793E\u533A'
							)
						),
						_react2.default.createElement(
							_krUi.ListGroupItem,
							{ style: { maxWidth: 170, marginTop: '-6px', minWidth: 110, width: '100%', textAlign: 'left' } },
							_react2.default.createElement(_krUi.KrField, { grid: 1 / 1, name: 'community', component: 'select', options: communityIdList, onChange: this.selectCommunity })
						),
						_react2.default.createElement(
							_krUi.ListGroupItem,
							null,
							_react2.default.createElement(
								'span',
								{ style: { display: 'inline-block', lineHeight: '45px', textAlign: 'left' } },
								'\u697C\u5C42'
							)
						),
						_react2.default.createElement(
							_krUi.ListGroupItem,
							{ style: { maxWidth: 170, marginTop: '-6px', minWidth: 100, width: '100%', textAlign: 'left' } },
							_react2.default.createElement(_krUi.KrField, { name: 'floor', grid: 1 / 1, component: 'select', options: communityInfoFloorList, onChange: this.selectFloors })
						),
						_react2.default.createElement(
							_krUi.ListGroupItem,
							{ style: { minWidth: 100, marginTop: '-6px', marginLeft: '-3px', textAlign: 'left' } },
							' ',
							_react2.default.createElement(_krUi.KrField, { name: 'start', component: 'date', simple: true, onChange: this.firstDate })
						),
						_react2.default.createElement(
							_krUi.ListGroupItem,
							{ style: { marginLeft: '10px', textAlign: 'left' } },
							_react2.default.createElement(
								'span',
								{ style: { display: 'inline-block', lineHeight: '45px' } },
								'\u81F3'
							)
						),
						_react2.default.createElement(
							_krUi.ListGroupItem,
							{ style: { minWidth: 100, marginTop: '-6px', textAlign: 'left' } },
							' ',
							_react2.default.createElement(_krUi.KrField, { name: 'end', component: 'date', simple: true, onChange: this.secondDate }),
							' '
						)
					)
				),
				_react2.default.createElement('p', { style: { margin: 10 } }),
				_react2.default.createElement(_krUi.IframeContent, { src: url, onClose: this.getState, className: 'floorIframe', onLoad: this.onLoad, width: '100%', height: 800, scrolling: 'no' })
			);
		}
	}]);

	return FloorPlan;
}(_react.Component);

FloorPlan.defaultProps = {
	tab: ''
};
exports.default = FloorPlan;


exports.default = FloorPlan = (0, _reduxForm.reduxForm)({
	form: 'FloorPlan'
})(FloorPlan);
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(FloorPlan, 'FloorPlan', '/Users/tmac_zc/Code/kr-admin/src/Containers/Operation/CommunityManage/Detail/FloorPlan/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,