'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _CalendarDay = require('../CalendarDay');

var _CalendarDay2 = _interopRequireDefault(_CalendarDay);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CalendarMonthDate = function (_React$Component) {
	_inherits(CalendarMonthDate, _React$Component);

	function CalendarMonthDate(props) {
		_classCallCheck(this, CalendarMonthDate);

		var _this2 = _possibleConstructorReturn(this, (CalendarMonthDate.__proto__ || Object.getPrototypeOf(CalendarMonthDate)).call(this, props));

		_this2.getLoading = function () {

			_this2.setState({
				isLoading: false
			}, function () {
				var _this = this;
				window.setTimeout(function () {
					_this.setState({
						isLoading: !_this.state.isLoading
					});
				}, 100);
			});
		};

		_this2.getDaysInMonth = function (year, month) {
			//  month = parseInt(month,10)+1;
			var temp = new Date(year, month, 0);
			return temp.getDate();
		};

		_this2.createPlaceholderElement = function (key) {
			return _react2.default.createElement(
				'span',
				{ className: 'calendar-day placeholder', key: key },
				'\xA0'
			);
		};

		_this2.renderMonthDate = function () {

			var monthDateAll = [];
			var _this2$props = _this2.props,
			    year = _this2$props.year,
			    month = _this2$props.month,
			    date = _this2$props.date;

			var lastDate = _this2.getDaysInMonth(year, month);
			var nowTime = new Date(year + '-' + month + '-' + 1);
			var placeholderSize = nowTime.getDay();
			for (var i = 1; i <= placeholderSize; i++) {
				monthDateAll.push(_this2.createPlaceholderElement(i));
			}
			for (i = 1; i <= lastDate; i++) {
				monthDateAll.push(_this2.createDate(i, i + placeholderSize));
			}
			return monthDateAll;
		};

		_this2.state = {
			isLoading: false
		};

		return _this2;
	}

	_createClass(CalendarMonthDate, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			//this.getLoading();
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {

			if (nextProps.month !== this.props.month) {
				this.getLoading();
			}
		}
	}, {
		key: 'createDate',
		value: function createDate(date, key) {

			var handlers = {
				onClick: this.context.onSelectedDate
			};
			var props = {
				value: date,
				key: key,
				date: this.props.date,
				year: this.props.year,
				month: this.props.month
			};

			return _react2.default.createElement(_CalendarDay2.default, _extends({}, props, handlers));
		}
	}, {
		key: 'render',
		value: function render() {
			var isLoading = this.state.isLoading;

			var className = 'calendar-month-date animated';

			if (isLoading) {
				className += ' fadeInRightBig';
			} else {
				className += ' ';
			}
			return _react2.default.createElement(
				'div',
				{ className: className, style: { 'animationDuration': '0.2s' } },
				this.renderMonthDate()
			);
		}
	}]);

	return CalendarMonthDate;
}(_react2.default.Component);

CalendarMonthDate.displayName = 'CalendarMonthDate';
CalendarMonthDate.contextTypes = {
	onSelectedYear: _react2.default.PropTypes.func.isRequired,
	onSelectedMonth: _react2.default.PropTypes.func.isRequired,
	onSelectedDate: _react2.default.PropTypes.func.isRequired
};
CalendarMonthDate.propTypes = {
	/**
 *样式class类名
 */
	className: _react2.default.PropTypes.string,
	/**
 * 样式
 */
	style: _react2.default.PropTypes.object,
	year: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number]),
	month: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number]),
	date: _react2.default.PropTypes.oneOfType([_react2.default.PropTypes.string, _react2.default.PropTypes.number])
};
exports.default = CalendarMonthDate;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(CalendarMonthDate, 'CalendarMonthDate', '/Users/liuyihao/Code/kr-admin/src/Components/InputDate/CalendarMonthDate/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,