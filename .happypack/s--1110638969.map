{"version":3,"sources":["src/Components/Notify/index.js"],"names":["defaultConfig","localPath","containerID","displayTimeout","transition","sound","dismissible","keepHistory","defaultNotificationSound","require","_notifications","_config","NowtifyBox","props","state","notificationSound","Audio","handleNewNotifications","notifications","map","notification","addNotification","bind","push","id","config","play","notificationNodes","index","removeNotification","playNotificationSound","Component","init","setConfig","show","render","document","getElementById","transisiton","getConfig","module","exports"],"mappings":"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","file":"index.js","sourceRoot":"/Users/tmac_zc/Code/kr-admin","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport NowtifyItem from './NowtifyItem';\n\n\nconst defaultConfig = {\n  localPath: '/node_modules/react-nowtify/',\n  containerID: 'nowtify-wrapper',\n  displayTimeout: 2000,\n  transition: 'growl',\n  sound: true,\n  dismissible: true,\n  keepHistory: false,\n};\n\nconst defaultNotificationSound = require('file!./notification-sound.mp3');\n\nimport './index.less';\n\n\nlet _notifications = [];\nlet _config = defaultConfig;\n\n\n\nclass NowtifyBox extends React.Component {\n\n    constructor(props){\n      super(props);\n      this.state = {\n        notificationSound: new Audio(defaultNotificationSound)\n      };\n    }\n    \n    componentWillMount(){\n      this.handleNewNotifications(this.props.notifications);\n    }\n\n    componentWillUpdate(props){\n      this.handleNewNotifications(props.notifications);\n    }\n    \n    /**\n     * Dispatch notifications\n     * @param  [] notifications Array of formatted notifications (JSON)\n     * @return {[type]}               [description]\n     */\n    handleNewNotifications(notifications){\n      notifications.map(function(notification){\n        this.addNotification(notification)\n      }.bind(this));\n    }\n\n    /**\n     * Display a notification\n     * @param  {} notification JSON formatted notification\n     * @return  inject new notification to the component notifications pool.\n     */\n    addNotification(notification){\n      return _notifications.push(notification);\n    }\n\n    /**\n     * TODO\n     * Remove a notification\n     * @param  {} notification JSON formatted notification\n     * @return  inject new notification to the component notifications pool.\n     */\n    removeNotification(id){\n      // TODO\n      // HINT: ajouter les notifications avec un systeme key:value ou (key est un timestamp)\n      /*\n      \n       if(!this.state.keepHistory){\n      }*/\n      return true;\n    }\n\n    /**\n     * Play soung on new notification\n     * @return {[type]} [description]\n     */\n    playNotificationSound(notificationSound){\n      if (notificationSound || this.props.config.sound ){\n        return this.state.notificationSound.play();\n      }\n      return false;\n    }\n\n    render() {\n      let notificationNodes = _notifications.map(function(notification, index){\n        return (\n          <NowtifyItem \n            key={index} \n            data={notification} \n            position={index} \n            displayTimeout={this.props.config.displayTimeout}\n            onRemove={(id) => this.removeNotification(id)}\n            playSound={() => this.playNotificationSound(notification.sound)} \n          />\n      );\n    }.bind(this));\n      return (\n        <div className=\"nowtify-box\">       \n          <div className=\"nowtify-box__notification-list\">\n            {notificationNodes}\n          </div>             \n        </div>\n      );\n    }\n};\n\n\n/**\n * Init Nowtify\n * @param  {} config configuration JSON formatted\n * @return {[type]}        [description]\n */\nfunction init(config){\n  return setConfig(config);\n}\n\n/**\n * Show an array of notifications\n * @param  [] notifications Array of formated notifications.\n * @return {[type]}               [description]\n */\nfunction show(notifications){\n  ReactDOM.render(\n    <NowtifyBox config={_config} notifications={notifications}/>,\n    document.getElementById(_config.containerID)\n  );\n};\n\n\n/**\n * Set Nowtify configuration\n * @param {} config JSON object\n */\nfunction setConfig(config){\n  _config =  {\n    localPath: config.localPath ? config.localPath : _config.localPath,\n    containerID: config.containerID ? config.containerID : _config.containerID,\n    displayTimeout: config.displayTimeout ? config.displayTimeout : _config.displayTimeout,\n    transition: config.transition ? config.transisiton :_config.transition,\n    sound: config.sound ? config.sound : _config.sound,\n    dismissible: config.dismissible ? config.dismissible : _config.dismissible,\n    keepHistory: config.dismissible ? config.dismissible : _config.keepHistory,\n  };\n  return _config;\n}\n\n/**\n * Get Nowtify configuration\n * @return {} config JSON object\n */\nfunction getConfig(){\n  return _config;\n}\n\nmodule.exports =  { \n  init, \n  getConfig, \n  setConfig,\n  show \n};\n"]}