'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./index.less');

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _DialogBody = require('./DialogBody');

var _DialogBody2 = _interopRequireDefault(_DialogBody);

var _DialogFooter = require('./DialogFooter');

var _DialogFooter2 = _interopRequireDefault(_DialogFooter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DialogComponent = function (_Component) {
	_inherits(DialogComponent, _Component);

	function DialogComponent() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, DialogComponent);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DialogComponent.__proto__ || Object.getPrototypeOf(DialogComponent)).call.apply(_ref, [this].concat(args))), _this), _this.getPageWidthOrHeight = function () {

			var page = {};
			page.width = window.innerWidth;
			page.height = window.innerHeight;
			if (document.compatMode == 'CSS1Compat') {
				page.width = document.documentElement.clientWidth;
				page.height = document.documentElement.clientHeight;
			} else {
				page.width = document.body.clientWidth;
				page.height = document.body.clientHeight;
			}
			return (0, _simpleAssign2.default)({}, page);
		}, _this.initializeStyles = function () {

			// var ele = ReactDOM.findDOMNode(this);
			var ele;
			try {
				ele = _this.refs.dialog;
			} catch (err) {
				ele = null;
			}
			if (!ele) {
				return;
			}

			var position = {};

			try {
				position = ele.getBoundingClientRect();
			} catch (err) {
				position = {};
			}

			var page = _this.getPageWidthOrHeight();

			ele.style.width = page.width + 'px';
			ele.style.height = page.height + 'px';
			ele.style.zIndex = 99;
			ele.style.top = -position.top + 'px';
			ele.style.left = -position.left + 'px';
			ele.style.bottom = -position.bottom + 'px';
			ele.style.right = -0 + 'px';
		}, _this.onClose = function () {
			//document.body.style.overflow = 'auto';
			var onClose = _this.props.onClose;

			onClose && onClose();
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(DialogComponent, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.initializeStyles();
			window.addEventListener('resize', function () {
				this.initializeStyles();
			}.bind(this));
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps() {}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    title = _props.title,
			    modal = _props.modal,
			    open = _props.open,
			    onClose = _props.onClose,
			    autoDetectWindowHeight = _props.autoDetectWindowHeight,
			    autoScrollBodyContent = _props.autoScrollBodyContent,
			    children = _props.children,
			    bodyStyle = _props.bodyStyle,
			    contentStyle = _props.contentStyle,
			    footerStyle = _props.footerStyle,
			    actions = _props.actions,
			    other = _objectWithoutProperties(_props, ['title', 'modal', 'open', 'onClose', 'autoDetectWindowHeight', 'autoScrollBodyContent', 'children', 'bodyStyle', 'contentStyle', 'footerStyle', 'actions']);

			var styles = {};

			if (open) {
				styles.display = 'block';
				//document.body.style.overflow = 'hidden';
			} else {
				styles.display = 'none';
			}

			return _react2.default.createElement(
				'div',
				{ className: 'ui-dialog', ref: 'dialog', style: styles },
				_react2.default.createElement('div', { className: 'dialog-modal' }),
				_react2.default.createElement(
					'div',
					{ className: 'dialog-content', style: contentStyle },
					_react2.default.createElement(
						'div',
						{ className: 'dialog-header' },
						_react2.default.createElement(
							'div',
							{ className: 'dialog-header-title' },
							' ',
							title,
							' '
						),
						_react2.default.createElement('span', { className: 'close', onClick: this.onClose })
					),
					open && _react2.default.createElement(
						_DialogBody2.default,
						{ bodyStyle: bodyStyle },
						' ',
						children,
						' '
					),
					open && actions && _react2.default.createElement(
						_DialogFooter2.default,
						{ footerStyle: footerStyle },
						' ',
						actions,
						' '
					)
				)
			);
		}
	}]);

	return DialogComponent;
}(_react.Component);

DialogComponent.displayName = 'DialogComponent';
DialogComponent.defaultProps = {
	autoScrollBodyContent: false
};
DialogComponent.propTypes = {
	/**
 *关闭时回调函数
 */
	onClose: _react2.default.PropTypes.func,
	/**
 *是否开启
 */
	open: _react2.default.PropTypes.bool,
	/**
 *标题
 */
	title: _react2.default.PropTypes.string,
	bodyStyle: _react2.default.PropTypes.object,
	/**
 *显示遮罩层
 */
	modal: _react2.default.PropTypes.bool,
	/**
 *
 */
	autoDetectWindowHeight: _react2.default.PropTypes.bool,
	/**
 * 内容出现滚动条
 */
	autoScrollBodyContent: _react2.default.PropTypes.bool,
	actions: _react2.default.PropTypes.node
};
exports.default = DialogComponent;