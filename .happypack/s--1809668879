'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactRouter = require('react-router');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _materialUi = require('material-ui');

var _krUi = require('kr-ui');

require('./index.less');

var _Toolbar = require('material-ui/Toolbar');

var _moreVert = require('material-ui/svg-icons/navigation/more-vert');

var _moreVert2 = _interopRequireDefault(_moreVert);

var _close = require('material-ui/svg-icons/navigation/close');

var _close2 = _interopRequireDefault(_close);

var _menu = require('material-ui/svg-icons/navigation/menu');

var _menu2 = _interopRequireDefault(_menu);

var _navigationArrowDropRight = require('material-ui/svg-icons/navigation-arrow-drop-right');

var _navigationArrowDropRight2 = _interopRequireDefault(_navigationArrowDropRight);

var _List = require('material-ui/List');

var _Avatar = require('material-ui/Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

var _Subheader = require('material-ui/Subheader');

var _Subheader2 = _interopRequireDefault(_Subheader);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SelectableList = (0, _List.MakeSelectable)(_krUi.List);

function wrapState(ComposedComponent) {
	var _class, _temp2;

	return _temp2 = _class = function (_Component) {
		_inherits(SelectableList, _Component);

		function SelectableList() {
			var _ref;

			var _temp, _this, _ret;

			_classCallCheck(this, SelectableList);

			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SelectableList.__proto__ || Object.getPrototypeOf(SelectableList)).call.apply(_ref, [this].concat(args))), _this), _this.handleRequestChange = function (event, index) {
				_this.setState({
					selectedIndex: index
				});
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}

		_createClass(SelectableList, [{
			key: 'componentWillMount',
			value: function componentWillMount() {
				this.setState({
					selectedIndex: this.props.defaultValue
				});
			}
		}, {
			key: 'render',
			value: function render() {
				return _react2.default.createElement(
					ComposedComponent,
					{ value: this.state.selectedIndex,
						onChange: this.handleRequestChange,
						selectedItemStyle: {
							backgroundColor: '#394457',
							color: '#fff'
						} },
					' ',
					this.props.children,
					' '
				);
			}
		}]);

		return SelectableList;
	}(_react.Component), _class.propTypes = {
		children: _react.PropTypes.node.isRequired,
		defaultValue: _react.PropTypes.number.isRequired,
		selectedItemStyle: _react.PropTypes.object
	}, _temp2;
}

SelectableList = wrapState(SelectableList);

var SidebarNav = function (_Component2) {
	_inherits(SidebarNav, _Component2);

	function SidebarNav(props, context) {
		_classCallCheck(this, SidebarNav);

		var _this2 = _possibleConstructorReturn(this, (SidebarNav.__proto__ || Object.getPrototypeOf(SidebarNav)).call(this, props, context));

		_this2.PropTypes = {
			items: _react2.default.PropTypes.isArray,
			current_parent: _react2.default.PropTypes.string,
			current_child: _react2.default.PropTypes.string
		};
		return _this2;
	}

	_createClass(SidebarNav, [{
		key: 'renderMenuItem',
		value: function renderMenuItem(item, index, parentIndex) {
			var _this3 = this;

			var _props = this.props,
			    current_router = _props.current_router,
			    current_child = _props.current_child;

			var childStyles = {};
			var initiallyOpen = false;
			var parentStyles = {
				fontSize: '16px',
				marginTop: '-8px',
				marginLeft: '-20px',
				width: "180px",
				color: '#79859a',
				paddingBottom: '3px',
				paddingTop: '22px'
			};

			var jumpUrl = '';

			if (item.originUrl) {
				jumpUrl = item.originUrl;
			} else {
				jumpUrl = './#' + item.router;
			}

			var styles = {};

			childStyles.fontSize = '14px';
			childStyles.color = '#333';
			childStyles.paddingLeft = "20px";
			childStyles.width = "180px";
			childStyles.lineHeight = "16px";
			var isSelected = false;

			isSelected = item.active;

			if (isSelected) {
				childStyles.backgroundColor = '#283243';
				childStyles.color = '#fff';
			} else {
				childStyles.backgroundColor = '#394457';
				childStyles.color = '#c8d2d9';
			}
			/*
   		if (item.router === current_router) {
   			childStyles.backgroundColor = '#328ECC';
   			childStyles.color = '#fff';
   		} else {
   			childStyles.backgroundColor = '#fff';
   		}
   		*/

			if (item.menuItems && item.menuItems.length) {
				return _react2.default.createElement(_krUi.ListItem, {
					key: index,
					style: parentStyles,
					initiallyOpen: true,
					value: index,
					open: true,
					primaryText: item.primaryText,
					primaryTogglesNestedList: false,
					autoGenerateNestedIndicator: false,
					disabled: true,

					leftIcon: _react2.default.createElement(_materialUi.FontIcon, { className: item.iconName, color: item.iconColor, style: { fontSize: 18, position: 'absolute', margin: '22px 0 0 39px' } }),

					nestedItems: item.menuItems.map(function (it, ind) {
						return _this3.renderMenuItem(it, ind, index);
					})

				});
			}
			return _react2.default.createElement(_krUi.ListItem, {
				primaryText: item.primaryText,
				key: index,
				value: parentIndex + '-' + index,
				href: jumpUrl,
				style: childStyles
			});
		}
	}, {
		key: 'openUrl',
		value: function openUrl() {}
	}, {
		key: 'render',
		value: function render() {
			var _this4 = this;

			var style = {
				margin: '20px 0 0 0 ',
				display: 'inline-block',
				boxShadow: ' 0 0 0 0',
				width: 120
			};

			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					SelectableList,
					{ defaultValue: 1000 },
					this.props.items.map(function (item, index) {
						return _this4.renderMenuItem(item, index);
					})
				)
			);
		}
	}]);

	return SidebarNav;
}(_react.Component);

exports.default = SidebarNav;
;

var _temp3 = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(SelectableList, 'SelectableList', '/Users/liuyihao/Code/kr-admin/src/Components/Global/SidebarNav/index.js');

	__REACT_HOT_LOADER__.register(wrapState, 'wrapState', '/Users/liuyihao/Code/kr-admin/src/Components/Global/SidebarNav/index.js');

	__REACT_HOT_LOADER__.register(SidebarNav, 'SidebarNav', '/Users/liuyihao/Code/kr-admin/src/Components/Global/SidebarNav/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,