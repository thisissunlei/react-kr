'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('../../Button');

var _Button2 = _interopRequireDefault(_Button);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TableRow = function (_React$Component) {
	_inherits(TableRow, _React$Component);

	function TableRow(props) {
		_classCallCheck(this, TableRow);

		var _this2 = _possibleConstructorReturn(this, (TableRow.__proto__ || Object.getPrototypeOf(TableRow)).call(this, props));

		_this2.onCellClick = _this2.onCellClick.bind(_this2);
		_this2.onCellHover = _this2.onCellHover.bind(_this2);
		_this2.onCellHoverExit = _this2.onCellHoverExit.bind(_this2);
		_this2.onRowHover = _this2.onRowHover.bind(_this2);
		_this2.onRowHoverExit = _this2.onRowHoverExit.bind(_this2);
		_this2.onRowClick = _this2.onRowClick.bind(_this2);
		_this2.onOperation = _this2.onOperation.bind(_this2);

		_this2.renderRow = _this2.renderRow.bind(_this2);
		_this2.createRowColumn = _this2.createRowColumn.bind(_this2);
		return _this2;
	}

	_createClass(TableRow, [{
		key: 'onCellClick',
		value: function onCellClick(event) {
			this.onRowClick(event);
		}
	}, {
		key: 'onCellHover',
		value: function onCellHover() {}
	}, {
		key: 'onOperation',
		value: function onOperation(event) {
			var onOperation = this.props.onOperation;

			var type = '';

			try {
				type = event.target.getAttribute('data-operation');
			} catch (err) {
				console.log("file:TableRow/index.js 53行 浏览器不支持getAttribute DOM方法");
			}
			onOperation && onOperation(type, this.props.itemData);
		}
	}, {
		key: 'onCellHoverExit',
		value: function onCellHoverExit() {}
	}, {
		key: 'onRowHover',
		value: function onRowHover() {}
	}, {
		key: 'onRowHoverExit',
		value: function onRowHoverExit() {}
	}, {
		key: 'onRowClick',
		value: function onRowClick(event) {
			if (this.props.onRowClick) {
				this.props.onRowClick(event, this.props.rowNumber);
			}
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps, nextContext) {}
	}, {
		key: 'componentWillUpdate',
		value: function componentWillUpdate(nextProps, nextState, nextContext) {}
	}, {
		key: 'createRowColumn',
		value: function createRowColumn(basic, columnNumber, rowNumber) {
			var itemData = this.props.itemData;
			var _basic$props = basic.props,
			    name = _basic$props.name,
			    actions = _basic$props.actions;

			var value = '';

			if (name && itemData && itemData.hasOwnProperty(name)) {
				value = itemData[name];
				value = value.toString();
			}
			var _this = this;
			var children = _react2.default.Children.map(basic.props.children, function (child, index) {
				if (_react2.default.isValidElement(child)) {
					var operation = child.props.operation;

					if (operation) {
						return _react2.default.cloneElement(child, {
							onClick: _this.onOperation,
							'data-operation': operation,
							'data-row': rowNumber
						});
					}
					return _react2.default.cloneElement(child);
				} else {
					return child;
				}
			});

			return _react2.default.cloneElement(basic, {
				columnNumber: columnNumber,
				hoverable: this.props.hoverable,
				key: this.props.rowNumber + '-' + columnNumber,
				onCellClick: this.onCellClick,
				onHover: this.onCellHover,
				onHoverExit: this.onCellHoverExit,
				value: value,
				itemData: itemData
			}, children);
		}
	}, {
		key: 'renderRow',
		value: function renderRow() {
			var _this3 = this;

			var _props = this.props,
			    className = _props.className,
			    hovered = _props.hovered,
			    onCellClick = _props.onCellClick,
			    onCellHover = _props.onCellHover,
			    onCellHoverExit = _props.onCellHoverExit,
			    onRowClick = _props.onRowClick,
			    onRowHover = _props.onRowHover,
			    onRowHoverExit = _props.onRowHoverExit,
			    rowNumber = _props.rowNumber,
			    selectable = _props.selectable,
			    selected = _props.selected,
			    visibility = _props.visibility,
			    style = _props.style,
			    itemData = _props.itemData,
			    other = _objectWithoutProperties(_props, ['className', 'hovered', 'onCellClick', 'onCellHover', 'onCellHoverExit', 'onRowClick', 'onRowHover', 'onRowHoverExit', 'rowNumber', 'selectable', 'selected', 'visibility', 'style', 'itemData']);

			var rowColumns = _react2.default.Children.map(this.props.children, function (child, columnNumber) {
				if (_react2.default.isValidElement(child)) {
					return _this3.createRowColumn(child, columnNumber, rowNumber);
				}
			});

			return rowColumns;
		}
	}, {
		key: 'render',
		value: function render() {
			var _props2 = this.props,
			    className = _props2.className,
			    visibility = _props2.visibility,
			    other = _objectWithoutProperties(_props2, ['className', 'visibility']);

			if (visibility) {
				return _react2.default.createElement(
					'tr',
					_extends({ className: className }, other),
					this.renderRow()
				);
			}

			return _react2.default.createElement('tr', null);
		}
	}]);

	return TableRow;
}(_react2.default.Component);

TableRow.displayName = 'TableRow';
TableRow.PropTypes = {
	className: _react2.default.PropTypes.string,
	children: _react2.default.PropTypes.node,
	onCellClick: _react2.default.PropTypes.func,
	onCellHover: _react2.default.PropTypes.func,
	onCellHoverExit: _react2.default.PropTypes.func,
	onRowClick: _react2.default.PropTypes.func,
	onRowHover: _react2.default.PropTypes.func,
	onRowHoverExit: _react2.default.PropTypes.func,
	rowNumber: _react2.default.PropTypes.number,
	selected: _react2.default.PropTypes.bool,
	visibility: _react2.default.PropTypes.bool,
	itemData: _react2.default.PropTypes.object,
	onOperation: _react2.default.PropTypes.func
};
exports.default = TableRow;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(TableRow, 'TableRow', '/Users/liuyihao/Code/kr-admin/src/Components/Table/TableRow/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,