{"version":3,"sources":["src/Components/KrField/GroupCheckboxComponent/index.js"],"names":["GroupCheckboxComponent","props","onChange","checked","index","options","state","setState","valuationInputValue","onSelectAll","checkedAll","forEach","item","renderSelectAllSwitch","_this","renderOptions","children","name","map","label","value","component","values","input","push","join","defaultValue","nextProps","type","meta","touched","error","requireLabel","disabled","placeholder","style","inline","Component","displayName","propTypes","PropTypes","bool"],"mappings":"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","file":"index.js","sourceRoot":"/Users/tmac_zc/Code/kr-admin","sourcesContent":["import React from 'react';\n\nimport {\n  ShallowEqual\n} from 'kr/Utils';\n\nimport Checkbox from '../../Checkbox';\n\nimport WrapComponent from '../WrapComponent';\n\nexport default class GroupCheckboxComponent extends React.Component {\n\n  static displayName = 'GroupCheckboxComponent';\n\n  static propTypes = {\n    inline: React.PropTypes.bool,\n  }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      defaultValue: props.defaultValue,\n      options: props.defaultValue,\n      checkedAll: false,\n    }\n\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (!ShallowEqual(this.props.defaultValue, nextProps.defaultValue)) {\n      this.setState({\n        defaultValue: nextProps.defaultValue,\n        options: nextProps.defaultValue\n      });\n    }\n  }\n\n  onChange = (checked, index) => {\n    let {\n      options\n    } = this.state;\n    options[index].checked = checked;\n    this.setState({\n      options\n    }, function() {\n      this.valuationInputValue();\n    });\n  }\n\n  onSelectAll = (checkedAll) => {\n    let {\n      options\n    } = this.state;\n\n    options.forEach(function(item, index) {\n      item.checked = checkedAll;\n    });\n\n    this.setState({\n      options,\n      checkedAll\n    }, function() {\n      this.valuationInputValue();\n    });\n  }\n\n  renderSelectAllSwitch = () => {\n\n    var _this = this;\n\n    return <Checkbox label = \"全部\"\n    value = \"all\"\n    checked = {\n      this.state.checkedAll\n    }\n    onCheck = {\n      (checked) => {\n        _this.onSelectAll(checked);\n      }\n    }\n    />\n  }\n\n  renderOptions = () => {\n\n\n    let children = [];\n    let {\n      options\n    } = this.state;\n    let {\n      name\n    } = this.props;\n\n    var _this = this;\n\n    children = options.map(function(item, index) {\n      return <div key={index}>\n         <Checkbox  label={item.label} value={item.value} checked={item.checked} onCheck={(checked)=>{\n            _this.onChange(checked,index);\n          }}/>\n          {item.checked && item.component && item.component()}\n        </div>\n    })\n\n    return children;\n  }\n\n  valuationInputValue = () => {\n\n    let {\n      options\n    } = this.state;\n    let values = [];\n    let {\n      input,\n      onChange\n    } = this.props;\n\n    options.map(function(item, index) {\n      if (item.checked) {\n        values.push(item.value);\n      }\n    });\n\n    input.onChange && input.onChange(values.join(','));\n    onChange && onChange(options);\n  }\n\n  render() {\n\n    let {\n      input,\n      label,\n      type,\n      meta: {\n        touched,\n        error\n      },\n      requireLabel,\n      disabled,\n      placeholder,\n      style,\n      defaultValue,\n      inline,\n    } = this.props;\n\n    return (\n\n      <WrapComponent label={label} wrapStyle={style} requireLabel={requireLabel} inline={inline} >\n\t\t\t\t\t<div className=\"ui-group-checkbox\">\n              {/*{this.renderSelectAllSwitch()}*/}\n              {this.renderOptions()}\n\t\t\t\t\t</div>\n\t\t\t\t</WrapComponent>\n    );\n  }\n\n}"]}