'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.plan = plan;

var _types = require('./types');

var Types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function plan() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var action = arguments[1];


	switch (action.type) {

		case Types.SET_NOW_DATE:
			{
				var items = state.items;

				var nowDate = action.response;

				var nowTrip = [];
				nowTrip = items.filter(function (item) {
					return item.createAt == nowDate;
				});

				return _extends({}, state, { now_date: +new Date(action.response.split('-').join()), now_trip: nowTrip });
			}

		case Types.LOAD_PLAN_REQUEST:
			{
				return _extends({}, state);
			}

		case Types.LOAD_PLAN_SUCCESS:
			{
				return _extends({}, state, action.response);
			}

		case Types.LOAD_PLAN_FAILURE:
			{
				//return action.error;
				return _extends({}, state);
			}

		case Types.CREATE_PLAN_REQUST:
			{
				return _extends({}, state);
			}

		case Types.CREATE_PLAN_SUCCESS:
			{
				var _items = state.items;

				_items.push(action.response);
				return _extends({}, state, { items: _items });
			}

		case Types.CREATE_PLAN_FAILURE:
			{
				return _extends({}, state);
				//return action.error;
			}

		default:
			{
				return state;
			}

	}
}