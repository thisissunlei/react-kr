'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DialogBody = function (_Component) {
	_inherits(DialogBody, _Component);

	function DialogBody() {
		var _ref;

		var _temp, _this2, _ret;

		_classCallCheck(this, DialogBody);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref = DialogBody.__proto__ || Object.getPrototypeOf(DialogBody)).call.apply(_ref, [this].concat(args))), _this2), _this2.initializeDialogBodyStyles = function () {

			var ele = null;
			try {
				ele = _this2.refs.dialogBody;
			} catch (err) {
				ele = null;
			}
			var autoScrollBodyContent = _this2.props.autoScrollBodyContent;


			if (!ele) {
				return;
			}
			var page = _this2.getPageWidthOrHeight();

			var eleBoxStyle = {};

			try {
				eleBoxStyle = ele.getBoundingClientRect();
			} catch (err) {
				eleBoxStyle = { width: 0, height: 0 };
			}

			console.log('=-=-', page, eleBoxStyle);

			ele.style.maxHeight = page.height - 200 + 'px';
			ele.style.minHeight = 100 + 'px';

			if (eleBoxStyle.height >= page.height - 250) {
				ele.style.overflowY = 'scroll';
			}
		}, _this2.getPageWidthOrHeight = function () {

			var page = {};
			page.width = window.innerWidth;
			page.height = window.innerHeight;
			if (document.compatMode == 'CSS1Compat') {
				page.width = document.documentElement.clientWidth;
				page.height = document.documentElement.clientHeight;
			} else {
				page.width = document.body.clientWidth;
				page.height = document.body.clientHeight;
			}
			return (0, _simpleAssign2.default)({}, page);
		}, _temp), _possibleConstructorReturn(_this2, _ret);
	}

	_createClass(DialogBody, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			window.addEventListener('resize', function () {
				this.initializeDialogBodyStyles();
			}.bind(this));
			var _this = this;
			_this.initializeDialogBodyStyles();
		}
	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			this.initializeDialogBodyStyles();
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    children = _props.children,
			    bodyStyle = _props.bodyStyle;


			return _react2.default.createElement(
				'div',
				{ className: 'dialog-body', ref: 'dialogBody', style: bodyStyle },
				children
			);
		}
	}]);

	return DialogBody;
}(_react.Component);

DialogBody.displayName = 'DialogBody';
DialogBody.propTypes = {
	children: _react2.default.PropTypes.node
};
exports.default = DialogBody;
;

var _temp2 = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(DialogBody, 'DialogBody', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Dialog/DialogBody/index.js');
}();

;