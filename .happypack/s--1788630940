'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Redux = require('kr/Redux');

var _reduxForm = require('redux-form');

var _krUi = require('kr-ui');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NewCreateDefinitionForm = function (_Component) {
	_inherits(NewCreateDefinitionForm, _Component);

	function NewCreateDefinitionForm(props, context) {
		var _this2$state;

		_classCallCheck(this, NewCreateDefinitionForm);

		var _this2 = _possibleConstructorReturn(this, (NewCreateDefinitionForm.__proto__ || Object.getPrototypeOf(NewCreateDefinitionForm)).call(this, props, context));

		_this2.onCancel = function () {
			var onCancel = _this2.props.onCancel;

			onCancel && onCancel();
		};

		_this2.onChangeSearchCommunity = function (community) {
			var _this = _this2;
			if (community == null) {
				_this.setState({
					locationOpen: false,
					floorsOptions: []
				});
				_Redux.Store.dispatch((0, _reduxForm.change)('NewCreateDefinitionForm', 'propertyId', ""));
				return;
			}
			var CommunityId = {
				communityId: community.id
			};
			_this2.setState({
				communityId: community.id
			});
			_Redux.Store.dispatch((0, _reduxForm.change)('NewCreateDefinitionForm', 'communityId', community.communityId));
			_Redux.Store.dispatch(_Redux.Actions.callAPI('getFloorByComunity', CommunityId)).then(function (response) {
				var arrNew = [];
				for (var i = 0; i < response.whereFloors.length; i++) {
					arrNew[i] = { label: response.whereFloors[i], value: response.whereFloors[i] };
				}
				_this.setState({
					floorsOptions: arrNew
				});
			}).catch(function (err) {});
		};

		_this2.onchooseType = function (typeId) {
			_this2.setState({
				typeId: typeId.value
			});
			if (typeId == null) {
				return;
			}
			_Redux.Store.dispatch((0, _reduxForm.change)('NewCreateDefinitionForm', 'typeId', typeId.value));
		};

		_this2.onchooseProperty = function (propertyId) {
			var _this = _this2;
			if (propertyId == null) {
				_this.setState({
					locationOpen: false
				});
				return;
			}
			if (propertyId.value == 2 || propertyId.value == 3) {
				_this.setState({
					locationOpen: true
				});
				var SearchLocationParams = { communityId: _this.state.communityId, whereFloor: _this.state.floorNum };

				_Redux.Store.dispatch(_Redux.Actions.callAPI('getLocationByProperty', SearchLocationParams)).then(function (response) {
					var locationArr = [];
					for (var i = 0; i < response.length; i++) {
						locationArr[i] = { label: response[i].boardroomname, value: response[i].id };
					}
					_this.setState({
						locationOptions: locationArr
					});
				});
			} else {
				_this.setState({
					locationOpen: false
				});
			}
			_this2.setState({
				propertyId: propertyId.value
			});
			_Redux.Store.dispatch((0, _reduxForm.change)('NewCreateDefinitionForm', 'propertyId', propertyId.value));
		};

		_this2.onchooseCorrespondingFunction = function (functionId) {
			_this2.setState({
				functionId: functionId.value
			});
			if (functionId == null) {
				return;
			}
			_Redux.Store.dispatch((0, _reduxForm.change)('NewCreateDefinitionForm', 'functionId', functionId.value));
		};

		_this2.onchooseCorrespondingLocation = function (locationId) {
			_this2.setState({
				locationId: locationId.value
			});
			if (locationId == null) {
				return;
			}
			_Redux.Store.dispatch((0, _reduxForm.change)('NewCreateDefinitionForm', 'locationId', locationId.value));
		};

		_this2.getFloor = function (floor) {
			var _this = _this2;
			if (!floor) {
				_this.setState({
					propertyOption: [{ label: '', value: '' }],
					locationOpen: false
				});
				_Redux.Store.dispatch((0, _reduxForm.change)('NewCreateDefinitionForm', 'propertyId', ""));
			} else {
				_this.setState({
					floorNum: floor.value
				}, function () {
					_this.setState({
						propertyOption: [{ label: '大门', value: 1 }, { label: '会议室', value: 2 }, { label: '独立办公室', value: 3 }]
					});
				});
			}
		};

		_this2.onChangeTitle = function (showTitle) {
			_this2.setState({
				showTitle: showTitle
			});
		};

		_this2.doorNumHasFun = function (deviceCode) {
			_this2.setState({
				doorNumHas: false,
				deviceCode: deviceCode
			});
			if (!deviceCode || /^\s+$/.test(deviceCode)) {
				return;
			}
			var _this = _this2;
			var params = {
				code: deviceCode,
				type: "deviceCode",
				id: ''
			};
			_Redux.Store.dispatch(_Redux.Actions.callAPI('doorNumberAndHardwareId', params)).then(function (response) {
				_this.setState({
					doorNumHasStatus: false
				});
			}).catch(function (err) {
				var isDoorNumHas = _this.props.isDoorNumHas;

				isDoorNumHas && isDoorNumHas();
				_this.setState({
					doorNumHas: true,
					doorNumHasStatus: true
				});
			});
		};

		_this2.hardwareIdHasFun = function (hardwareId) {
			_this2.setState({
				hardwareidHasStatus: false,
				hardwareId: hardwareId
			});
			if (!hardwareId || /^\s+$/.test(hardwareId)) {
				return;
			}
			var _this = _this2;
			var hardwareIdparams = {
				code: hardwareId,
				type: "hardwareid",
				id: ''
			};
			_Redux.Store.dispatch(_Redux.Actions.callAPI('doorNumberAndHardwareId', hardwareIdparams)).then(function (response) {
				_this.setState({
					hardwareidHasStatus: false,
					defaultChecked: true
				});
			}).catch(function (err) {
				var hardwareIdHas = _this.props.hardwareIdHas;

				hardwareIdHas && hardwareIdHas();
				_this.setState({
					hardwareidHasStatus: true,
					defaultChecked: true
				});
			});
		};

		_this2.chooseONLINE = function (e) {
			_this2.setState({
				isOnlines: !_this2.state.isOnlines
			}, function () {
				_Redux.Store.dispatch((0, _reduxForm.change)('NewCreateDefinitionForm', 'enable', this.state.isOnlines));
			});
		};

		_this2.onSubmit = function (values) {
			console.log("values", values);
			var _this = _this2;
			values.enable = _this.state.isOnlines ? "ONLINE" : "OFFLINE";
			var deviceCodeParams = {
				code: values.deviceCode,
				type: "deviceCode",
				id: ''
			};
			var hardwareIdParams = {
				code: values.hardwareId,
				type: "hardwareid",
				id: ''
			};
			// 此处判断门编号是否存在
			_Redux.Store.dispatch(_Redux.Actions.callAPI('doorNumberAndHardwareId', deviceCodeParams)).then(function (response) {
				_Redux.Store.dispatch(_Redux.Actions.callAPI('doorNumberAndHardwareId', hardwareIdParams)).then(function (response) {
					var onSubmit = _this.props.onSubmit;

					onSubmit && onSubmit(values);
				}).catch(function (err) {
					var hardwareIdHas = _this.props.hardwareIdHas;

					hardwareIdHas && hardwareIdHas();
				});
			}).catch(function (err) {
				var isDoorNumHas = _this.props.isDoorNumHas;

				isDoorNumHas && isDoorNumHas();
			});
		};

		_this2.state = (_this2$state = {
			locationOpen: false,
			floorsOptions: [],
			locationOptions: [],
			confirmSubmit: false,
			doorNumHas: false,
			doorNumHasStatus: false,
			communityId: '',
			propertyOption: [{ label: "", value: "" }],
			propertyId: "",
			hardwareidHasStatus: false,
			isOnlines: true,
			showTitle: '',
			deviceCode: '',
			hardwareId: '',
			typeId: ''
		}, _defineProperty(_this2$state, 'propertyId', ''), _defineProperty(_this2$state, 'functionId', ''), _defineProperty(_this2$state, 'locationId', ''), _this2$state);
		return _this2;
	}
	// 社区模糊查询

	//选择类型

	//选择属性(会议室／大门)

	//选择对应功能

	// 选择对应位置

	// 选择楼层

	// 判断门编号是否存在

	// 判断智能硬件ID是否存在

	// 新增设备定义


	_createClass(NewCreateDefinitionForm, [{
		key: 'render',
		value: function render() {
			var _state = this.state,
			    floorsOptions = _state.floorsOptions,
			    propertyOption = _state.propertyOption,
			    propertyId = _state.propertyId,
			    locationOptions = _state.locationOptions,
			    defaultChecked = _state.defaultChecked;
			// 类型待选项

			var typeOptions = [{
				label: '门禁',
				value: 1
			}];

			// 对应功能选项
			var correspondingFunction = [{
				label: '开门',
				value: 1
			}, {
				label: '开门／预定',
				value: 2
			}, {
				label: '预定',
				value: 3
			}];
			var _props = this.props,
			    error = _props.error,
			    handleSubmit = _props.handleSubmit,
			    pristine = _props.pristine,
			    reset = _props.reset;

			return _react2.default.createElement(
				'div',
				{ style: { padding: '35px 0 0 35px' } },
				_react2.default.createElement(
					'form',
					{ onSubmit: handleSubmit(this.onSubmit) },
					_react2.default.createElement(_krUi.KrField, { name: 'communityId',
						component: 'searchCommunity',
						onChange: this.onChangeSearchCommunity,
						label: '\u793E\u533A\u540D\u79F0',
						requireLabel: true,
						requiredValue: true,
						errors: { requiredValue: '社区为必填项' },
						style: { width: '252px', margin: '0 35px 5px 0' }
					}),
					_react2.default.createElement(_krUi.KrField, { name: 'floor',
						component: 'select',
						label: '\u697C\u5C42',
						options: floorsOptions,
						requireLabel: true,
						requiredValue: true,
						errors: { requiredValue: '社区为必填项' },
						style: { width: '252px' },
						onChange: this.getFloor
					}),
					_react2.default.createElement(_krUi.KrField, { grid: 1 / 2, name: 'showTitle',
						type: 'text',
						label: '\u5C55\u793A\u6807\u9898',
						requireLabel: true,
						requiredValue: true,
						errors: { requiredValue: '展示标题为必填项' },
						style: { width: '252px', margin: '0 35px 5px 0' },
						onBlur: this.onChangeTitle
					}),
					_react2.default.createElement(_krUi.KrField, { grid: 1 / 2, name: 'deviceCode',
						type: 'text',
						label: '\u95E8\u7F16\u53F7',
						requireLabel: true,
						requiredValue: true,
						errors: { requiredValue: '门编号为必填项' },
						style: { width: '252px' },
						onBlur: this.doorNumHasFun
					}),
					_react2.default.createElement(_krUi.KrField, { grid: 1 / 2, name: 'hardwareId',
						type: 'text',
						label: '\u667A\u80FD\u786C\u4EF6ID',
						requireLabel: true,
						requiredValue: true,
						errors: { requiredValue: '智能硬件ID为必填项' },
						style: { width: '252px', margin: '0 35px 5px 0' },
						onBlur: this.hardwareIdHasFun
					}),
					_react2.default.createElement(_krUi.KrField, { name: 'typeId',
						component: 'select',
						label: '\u7C7B\u578B',
						onChange: this.onchooseType,
						options: typeOptions,
						requireLabel: true,
						requiredValue: true,
						errors: { requiredValue: '类型为必填项' },
						style: { width: '252px' }
					}),
					_react2.default.createElement(_krUi.KrField, { name: 'propertyId',
						component: 'select',
						label: '\u5C5E\u6027',
						onChange: this.onchooseProperty,
						options: propertyOption,
						requireLabel: true,
						requiredValue: true,
						errors: { requiredValue: '属性为必填项' },
						style: { width: '252px', margin: '0 35px 5px 0' }
					}),
					_react2.default.createElement(_krUi.KrField, { name: 'functionId',
						component: 'select',
						options: correspondingFunction,
						label: '\u5BF9\u5E94\u529F\u80FD',
						onChange: this.onchooseCorrespondingFunction,
						requireLabel: true,
						requiredValue: true,
						errors: { requiredValue: '对应功能为必填项' },
						style: { width: '252px' }
					}),
					_react2.default.createElement(_krUi.KrField, { name: 'locationId',
						component: 'select',
						options: locationOptions,
						label: '\u5BF9\u5E94\u4F4D\u7F6E',
						onChange: this.onchooseCorrespondingLocation,
						style: { width: '252px', display: this.state.locationOpen ? 'block' : 'none' }
					}),
					_react2.default.createElement(
						'div',
						null,
						_react2.default.createElement('input', { type: 'checkbox', defaultChecked: this.state.isOnlines, onChange: this.chooseONLINE }),
						_react2.default.createElement(
							'span',
							{ style: { fontSize: 14, color: "#333333" } },
							'\u4FDD\u5B58\u540E\u81EA\u52A8\u4E0A\u7EBF'
						)
					),
					_react2.default.createElement(
						_krUi.Grid,
						{ style: { marginTop: 19, marginBottom: '4px' } },
						_react2.default.createElement(
							_krUi.Row,
							{ style: { textAlign: 'center' } },
							_react2.default.createElement(
								_krUi.ListGroup,
								null,
								_react2.default.createElement(
									_krUi.ListGroupItem,
									{ style: { padding: 0, display: 'inline-block', marginRight: 30 } },
									_react2.default.createElement(_krUi.Button, { label: '\u63D0\u4EA4', type: 'submit' })
								),
								_react2.default.createElement(
									_krUi.ListGroupItem,
									{ style: { padding: 0, display: 'inline-block', marginRight: 3 } },
									_react2.default.createElement(_krUi.Button, { label: '\u53D6\u6D88', type: 'button', cancle: true, onTouchTap: this.onCancel })
								)
							)
						)
					)
				)
			);
		}
	}]);

	return NewCreateDefinitionForm;
}(_react.Component);

var validate = function validate(values) {
	var errors = {};
	if (!values.communityId) {
		errors.communityId = '社区名称为必填项';
	}
	if (!values.floor) {
		errors.floor = '楼层为必填项';
	}
	if (!values.showTitle || /^\s+$/.test(values.showTitle)) {
		errors.showTitle = '展示标题为必填项';
	}
	if (values.showTitle && values.showTitle.length > 13) {
		errors.showTitle = '展示标题最多13个字符';
	}
	if (!values.deviceCode || /^\s+$/.test(values.deviceCode)) {
		errors.deviceCode = '门编号为必填项';
	}
	if (values.deviceCode && values.deviceCode.length > 50) {
		errors.deviceCode = '门编号最多50个字符';
	}
	if (!values.hardwareId || /^\s+$/.test(values.hardwareId)) {
		errors.hardwareId = '智能硬件ID为必填项';
	}
	if (values.hardwareId && values.hardwareId.length > 50) {
		errors.hardwareId = '智能硬件ID最多50个字符';
	}
	if (!values.typeId) {
		errors.typeId = '类型为必填项';
	}
	if (!values.propertyId) {
		errors.propertyId = '属性为必填项';
	}
	// if(values.property == "meetingRoom" || values.property == "functionRoom" ){
	// 	if(!values.locationId){
	// 		errors.locationId = '对应位置为必填项';
	// 	}
	// }
	if (!values.functionId) {
		errors.functionId = '对应功能为必填项';
	}
	return errors;
};

var _default = NewCreateDefinitionForm = (0, _reduxForm.reduxForm)({
	form: 'NewCreateDefinitionForm',
	validate: validate
})(NewCreateDefinitionForm);

exports.default = _default;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(NewCreateDefinitionForm, 'NewCreateDefinitionForm', '/Users/dongfanai/Desktop/project/kr-admin/src/Containers/Operation/BasicConfig/EquipmentDefinition/NewCreateDefinitionForm.js');

	__REACT_HOT_LOADER__.register(validate, 'validate', '/Users/dongfanai/Desktop/project/kr-admin/src/Containers/Operation/BasicConfig/EquipmentDefinition/NewCreateDefinitionForm.js');

	__REACT_HOT_LOADER__.register(_default, 'default', '/Users/dongfanai/Desktop/project/kr-admin/src/Containers/Operation/BasicConfig/EquipmentDefinition/NewCreateDefinitionForm.js');
}();

;