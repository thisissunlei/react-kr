{"version":3,"sources":["src/Components/DatePicker/DatePicker/CalendarYear.js"],"names":["CalendarYear","handleTouchTapYear","event","year","props","onTouchTapYear","scrollToSelectedYear","DateTimeFormat","locale","minDate","maxDate","selectedDate","minYear","getFullYear","maxYear","years","dateCheck","setFullYear","selected","selectedProps","ref","yearFormated","format","yearButton","push","refs","selectedYearButton","undefined","container","findDOMNode","yearButtonNode","containerHeight","clientHeight","yearButtonNodeHeight","scrollYOffset","offsetTop","scrollTop","context","muiTheme","prepareStyles","calendarYearBackgroundColor","datePicker","styles","root","backgroundColor","height","lineHeight","overflowX","overflowY","position","child","display","flexDirection","justifyContent","minHeight","getYears","propTypes","func","isRequired","string","object","wordings","contextTypes"],"mappings":"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","file":"CalendarYear.js","sourceRoot":"/Users/tmac_zc/Code/kr-admin","sourcesContent":["import React, {Component, PropTypes} from 'react';\nimport ReactDOM from 'react-dom';\nimport YearButton from './YearButton';\nimport {cloneDate} from './dateUtils';\n\nclass CalendarYear extends Component {\n  static propTypes = {\n    DateTimeFormat: PropTypes.func.isRequired,\n    locale: PropTypes.string.isRequired,\n    maxDate: PropTypes.object.isRequired,\n    minDate: PropTypes.object.isRequired,\n    onTouchTapYear: PropTypes.func,\n    selectedDate: PropTypes.object.isRequired,\n    wordings: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  componentDidMount() {\n    this.scrollToSelectedYear();\n  }\n\n  componentDidUpdate() {\n    this.scrollToSelectedYear();\n  }\n\n  getYears() {\n    const {\n      DateTimeFormat,\n      locale,\n      minDate,\n      maxDate,\n      selectedDate,\n    } = this.props;\n\n    const minYear = minDate.getFullYear();\n    const maxYear = maxDate.getFullYear();\n    const years = [];\n    const dateCheck = cloneDate(selectedDate);\n\n    for (let year = minYear; year <= maxYear; year++) {\n      dateCheck.setFullYear(year);\n      const selected = selectedDate.getFullYear() === year;\n      const selectedProps = {};\n      if (selected) {\n        selectedProps.ref = 'selectedYearButton';\n      }\n\n      const yearFormated = new DateTimeFormat(locale, {\n        year: 'numeric',\n      }).format(dateCheck);\n\n      const yearButton = (\n        <YearButton\n          key={`yb${year}`}\n          onTouchTap={this.handleTouchTapYear}\n          selected={selected}\n          year={year}\n          {...selectedProps}\n        >\n          {yearFormated}\n        </YearButton>\n      );\n\n      years.push(yearButton);\n    }\n\n    return years;\n  }\n\n  scrollToSelectedYear() {\n    if (this.refs.selectedYearButton === undefined) {\n      return;\n    }\n\n    const container = ReactDOM.findDOMNode(this);\n    const yearButtonNode = ReactDOM.findDOMNode(this.refs.selectedYearButton);\n\n    const containerHeight = container.clientHeight;\n    const yearButtonNodeHeight = yearButtonNode.clientHeight || 32;\n\n    const scrollYOffset = (yearButtonNode.offsetTop + yearButtonNodeHeight / 2) - containerHeight / 2;\n    container.scrollTop = scrollYOffset;\n  }\n\n  handleTouchTapYear = (event, year) => {\n    if (this.props.onTouchTapYear) {\n      this.props.onTouchTapYear(event, year);\n    }\n  };\n\n  render() {\n    const {\n      prepareStyles,\n      datePicker: {\n        calendarYearBackgroundColor,\n      },\n    } = this.context.muiTheme;\n\n    const styles = {\n      root: {\n        backgroundColor: calendarYearBackgroundColor,\n        height: 'inherit',\n        lineHeight: '35px',\n        overflowX: 'hidden',\n        overflowY: 'scroll',\n        position: 'relative',\n      },\n      child: {\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        minHeight: '100%',\n      },\n    };\n\n    return (\n      <div style={prepareStyles(styles.root)}>\n        <div style={prepareStyles(styles.child)}>\n          {this.getYears()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CalendarYear;\n"]}