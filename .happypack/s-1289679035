'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Value = _react2.default.createClass({

	displayName: 'Value',

	propTypes: {
		children: _react2.default.PropTypes.node,
		disabled: _react2.default.PropTypes.bool, // disabled prop passed to ReactSelect
		id: _react2.default.PropTypes.string, // Unique id for the value - used for aria
		onClick: _react2.default.PropTypes.func, // method to handle click on value label
		onRemove: _react2.default.PropTypes.func, // method to handle removal of the value
		value: _react2.default.PropTypes.object.isRequired },

	handleMouseDown: function handleMouseDown(event) {
		if (event.type === 'mousedown' && event.button !== 0) {
			return;
		}
		if (this.props.onClick) {
			event.stopPropagation();
			this.props.onClick(this.props.value, event);
			return;
		}
		if (this.props.value.href) {
			event.stopPropagation();
		}
	},
	onRemove: function onRemove(event) {
		event.preventDefault();
		event.stopPropagation();
		this.props.onRemove(this.props.value);
	},
	handleTouchEndRemove: function handleTouchEndRemove(event) {
		// Check if the view is being dragged, In this case
		// we don't want to fire the click event (because the user only wants to scroll)
		if (this.dragging) return;

		// Fire the mouse events
		this.onRemove(event);
	},
	handleTouchMove: function handleTouchMove(event) {
		// Set a flag that the view is being dragged
		this.dragging = true;
	},
	handleTouchStart: function handleTouchStart(event) {
		// Set a flag that the view is not being dragged
		this.dragging = false;
	},
	renderRemoveIcon: function renderRemoveIcon() {
		if (this.props.disabled || !this.props.onRemove) return;
		return _react2.default.createElement(
			'span',
			{ className: 'Select-value-icon',
				'aria-hidden': 'true',
				onMouseDown: this.onRemove,
				onTouchEnd: this.handleTouchEndRemove,
				onTouchStart: this.handleTouchStart,
				onTouchMove: this.handleTouchMove },
			'\xD7'
		);
	},
	renderLabel: function renderLabel() {
		var className = 'Select-value-label';
		return this.props.onClick || this.props.value.href ? _react2.default.createElement(
			'a',
			{ className: className, href: this.props.value.href, target: this.props.value.target, onMouseDown: this.handleMouseDown, onTouchEnd: this.handleMouseDown },
			this.props.children
		) : _react2.default.createElement(
			'span',
			{ className: className, role: 'option', 'aria-selected': 'true', id: this.props.id },
			this.props.children
		);
	},
	render: function render() {
		return _react2.default.createElement(
			'div',
			{ className: (0, _classnames2.default)('Select-value', this.props.value.className),
				style: this.props.value.style,
				title: this.props.value.title
			},
			this.renderRemoveIcon(),
			this.renderLabel()
		);
	}
});

module.exports = Value;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(Value, 'Value', '/Users/liuyihao/Code/kr-admin/src/Components/Select/Value.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9Db21wb25lbnRzL1NlbGVjdC9WYWx1ZS5qcyJdLCJuYW1lcyI6WyJWYWx1ZSIsImNyZWF0ZUNsYXNzIiwiZGlzcGxheU5hbWUiLCJwcm9wVHlwZXMiLCJjaGlsZHJlbiIsIlByb3BUeXBlcyIsIm5vZGUiLCJkaXNhYmxlZCIsImJvb2wiLCJpZCIsInN0cmluZyIsIm9uQ2xpY2siLCJmdW5jIiwib25SZW1vdmUiLCJ2YWx1ZSIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJoYW5kbGVNb3VzZURvd24iLCJldmVudCIsInR5cGUiLCJidXR0b24iLCJwcm9wcyIsInN0b3BQcm9wYWdhdGlvbiIsImhyZWYiLCJwcmV2ZW50RGVmYXVsdCIsImhhbmRsZVRvdWNoRW5kUmVtb3ZlIiwiZHJhZ2dpbmciLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwicmVuZGVyUmVtb3ZlSWNvbiIsInJlbmRlckxhYmVsIiwiY2xhc3NOYW1lIiwidGFyZ2V0IiwicmVuZGVyIiwic3R5bGUiLCJ0aXRsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7QUFDQTs7Ozs7O0FBRUEsSUFBTUEsUUFBUSxnQkFBTUMsV0FBTixDQUFrQjs7QUFFL0JDLGNBQWEsT0FGa0I7O0FBSS9CQyxZQUFXO0FBQ1ZDLFlBQVUsZ0JBQU1DLFNBQU4sQ0FBZ0JDLElBRGhCO0FBRVZDLFlBQVUsZ0JBQU1GLFNBQU4sQ0FBZ0JHLElBRmhCLEVBRW9DO0FBQzlDQyxNQUFJLGdCQUFNSixTQUFOLENBQWdCSyxNQUhWLEVBR29DO0FBQzlDQyxXQUFTLGdCQUFNTixTQUFOLENBQWdCTyxJQUpmLEVBSW9DO0FBQzlDQyxZQUFVLGdCQUFNUixTQUFOLENBQWdCTyxJQUxoQixFQUtvQztBQUM5Q0UsU0FBTyxnQkFBTVQsU0FBTixDQUFnQlUsTUFBaEIsQ0FBdUJDLFVBTnBCLEVBSm9COztBQWEvQkMsZ0JBYitCLDJCQWFkQyxLQWJjLEVBYVA7QUFDdkIsTUFBSUEs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b3VyY2VSb290IjoiL1VzZXJzL2xpdXlpaGFvL0NvZGUva3ItYWRtaW4iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5cbmNvbnN0IFZhbHVlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG5cdGRpc3BsYXlOYW1lOiAnVmFsdWUnLFxuXG5cdHByb3BUeXBlczoge1xuXHRcdGNoaWxkcmVuOiBSZWFjdC5Qcm9wVHlwZXMubm9kZSxcblx0XHRkaXNhYmxlZDogUmVhY3QuUHJvcFR5cGVzLmJvb2wsICAgICAgICAgICAgICAgLy8gZGlzYWJsZWQgcHJvcCBwYXNzZWQgdG8gUmVhY3RTZWxlY3Rcblx0XHRpZDogUmVhY3QuUHJvcFR5cGVzLnN0cmluZywgICAgICAgICAgICAgICAgICAgLy8gVW5pcXVlIGlkIGZvciB0aGUgdmFsdWUgLSB1c2VkIGZvciBhcmlhXG5cdFx0b25DbGljazogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsICAgICAgICAgICAgICAgIC8vIG1ldGhvZCB0byBoYW5kbGUgY2xpY2sgb24gdmFsdWUgbGFiZWxcblx0XHRvblJlbW92ZTogUmVhY3QuUHJvcFR5cGVzLmZ1bmMsICAgICAgICAgICAgICAgLy8gbWV0aG9kIHRvIGhhbmRsZSByZW1vdmFsIG9mIHRoZSB2YWx1ZVxuXHRcdHZhbHVlOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsICAgICAvLyB0aGUgb3B0aW9uIG9iamVjdCBmb3IgdGhpcyB2YWx1ZVxuXHR9LFxuXG5cdGhhbmRsZU1vdXNlRG93biAoZXZlbnQpIHtcblx0XHRpZiAoZXZlbnQudHlwZSA9PT0gJ21vdXNlZG93bicgJiYgZXZlbnQuYnV0dG9uICE9PSAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIHtcblx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0dGhpcy5wcm9wcy5vbkNsaWNrKHRoaXMucHJvcHMudmFsdWUsIGV2ZW50KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKHRoaXMucHJvcHMudmFsdWUuaHJlZikge1xuXHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXG5cdG9uUmVtb3ZlIChldmVudCkge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0dGhpcy5wcm9wcy5vblJlbW92ZSh0aGlzLnByb3BzLnZhbHVlKTtcblx0fSxcblxuXHRoYW5kbGVUb3VjaEVuZFJlbW92ZSAoZXZlbnQpe1xuXHRcdC8vIENoZWNrIGlmIHRoZSB2aWV3IGlzIGJlaW5nIGRyYWdnZWQsIEluIHRoaXMgY2FzZVxuXHRcdC8vIHdlIGRvbid0IHdhbnQgdG8gZmlyZSB0aGUgY2xpY2sgZXZlbnQgKGJlY2F1c2UgdGhlIHVzZXIgb25seSB3YW50cyB0byBzY3JvbGwpXG5cdFx0aWYodGhpcy5kcmFnZ2luZykgcmV0dXJuO1xuXG5cdFx0Ly8gRmlyZSB0aGUgbW91c2UgZXZlbnRzXG5cdFx0dGhpcy5vblJlbW92ZShldmVudCk7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hNb3ZlIChldmVudCkge1xuXHRcdC8vIFNldCBhIGZsYWcgdGhhdCB0aGUgdmlldyBpcyBiZWluZyBkcmFnZ2VkXG5cdFx0dGhpcy5kcmFnZ2luZyA9IHRydWU7XG5cdH0sXG5cblx0aGFuZGxlVG91Y2hTdGFydCAoZXZlbnQpIHtcblx0XHQvLyBTZXQgYSBmbGFnIHRoYXQgdGhlIHZpZXcgaXMgbm90IGJlaW5nIGRyYWdnZWRcblx0XHR0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG5cdH0sXG5cblx0cmVuZGVyUmVtb3ZlSWNvbiAoKSB7XG5cdFx0aWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgIXRoaXMucHJvcHMub25SZW1vdmUpIHJldHVybjtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PHNwYW4gY2xhc3NOYW1lPVwiU2VsZWN0LXZhbHVlLWljb25cIlxuXHRcdFx0XHRhcmlhLWhpZGRlbj1cInRydWVcIlxuXHRcdFx0XHRvbk1vdXNlRG93bj17dGhpcy5vblJlbW92ZX1cblx0XHRcdFx0b25Ub3VjaEVuZD17dGhpcy5oYW5kbGVUb3VjaEVuZFJlbW92ZX1cblx0XHRcdFx0b25Ub3VjaFN0YXJ0PXt0aGlzLmhhbmRsZVRvdWNoU3RhcnR9XG5cdFx0XHRcdG9uVG91Y2hNb3ZlPXt0aGlzLmhhbmRsZVRvdWNoTW92ZX0+XG5cdFx0XHRcdCZ0aW1lcztcblx0XHRcdDwvc3Bhbj5cblx0XHQpO1xuXHR9LFxuXG5cdHJlbmRlckxhYmVsICgpIHtcblx0XHRsZXQgY2xhc3NOYW1lID0gJ1NlbGVjdC12YWx1ZS1sYWJlbCc7XG5cdFx0cmV0dXJuIHRoaXMucHJvcHMub25DbGljayB8fCB0aGlzLnByb3BzLnZhbHVlLmhyZWYgPyAoXG5cdFx0XHQ8YSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gaHJlZj17dGhpcy5wcm9wcy52YWx1ZS5ocmVmfSB0YXJnZXQ9e3RoaXMucHJvcHMudmFsdWUudGFyZ2V0fSBvbk1vdXNlRG93bj17dGhpcy5oYW5kbGVNb3VzZURvd259IG9uVG91Y2hFbmQ9e3RoaXMuaGFuZGxlTW91c2VEb3dufT5cblx0XHRcdFx0e3RoaXMucHJvcHMuY2hpbGRyZW59XG5cdFx0XHQ8L2E+XG5cdFx0KSA6IChcblx0XHRcdDxzcGFuIGNsYXNzTmFtZT17Y2xhc3NOYW1lfSByb2xlPVwib3B0aW9uXCIgYXJpYS1zZWxlY3RlZD1cInRydWVcIiBpZD17dGhpcy5wcm9wcy5pZH0+XG5cdFx0XHRcdHt0aGlzLnByb3BzLmNoaWxkcmVufVxuXHRcdFx0PC9zcGFuPlxuXHRcdCk7XG5cdH0sXG5cblx0cmVuZGVyICgpIHtcblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZXMoJ1NlbGVjdC12YWx1ZScsIHRoaXMucHJvcHMudmFsdWUuY2xhc3NOYW1lKX1cblx0XHRcdFx0c3R5bGU9e3RoaXMucHJvcHMudmFsdWUuc3R5bGV9XG5cdFx0XHRcdHRpdGxlPXt0aGlzLnByb3BzLnZhbHVlLnRpdGxlfVxuXHRcdFx0XHQ+XG5cdFx0XHRcdHt0aGlzLnJlbmRlclJlbW92ZUljb24oKX1cblx0XHRcdFx0e3RoaXMucmVuZGVyTGFiZWwoKX1cblx0XHRcdDwvZGl2PlxuXHRcdCk7XG5cdH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gVmFsdWU7XG4iXX0=