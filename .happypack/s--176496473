'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _krUi = require('kr-ui');

var _Notify = require('../Notify');

var _Notify2 = _interopRequireDefault(_Notify);

var _Redux = require('kr/Redux');

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

require('./index.less');

var _Utils = require('kr/Utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var UpLoadList = function (_Component) {
	_inherits(UpLoadList, _Component);

	function UpLoadList(props) {
		_classCallCheck(this, UpLoadList);

		var _this2 = _possibleConstructorReturn(this, (UpLoadList.__proto__ || Object.getPrototypeOf(UpLoadList)).call(this, props));

		_this2.renderHover = function () {
			var detail = _this2.props.detail;

			var node = _reactDom2.default.findDOMNode(_this2.tooltip);
			var parent = node.parentNode;
			_this2.getFileList(detail.id);
			var open = _this2.props.open;

			if (open[1] == detail.id && open[0]) {
				node.style.visibility = 'visible';
			} else {
				node.style.visibility = 'hidden';
				// document.removeEventListener('click', this.docClick)
			}

			parent.style.position = "relative";
			_this2.setState({
				width: node.offsetWidth,
				height: node.offsetHeight
			});
		};

		_this2.docClick = function (event) {
			event = event || window.event;
			var target = event.target;
			if (target.innerHTML == '附件') {
				return;
			}
			if (target && target.className && (target.className.indexOf('upload') !== -1 || target.className.indexOf('file') !== -1)) {
				return;
			}
			var node = _reactDom2.default.findDOMNode(_this2.tooltip);
			node.style.visibility = 'hidden';
			document.removeEventListener('click', _this2.docClick);

			// document.addEventListener('click', this.docClick);
		};

		_this2.getFileList = function (id) {
			var _this = _this2;
			var open = _this2.props.open;

			if (open[1] != id) {
				return;
			}
			_Redux.Store.dispatch(_Redux.Actions.callAPI('getFileList', {
				detailId: id
			})).then(function (response) {
				_this.setState({
					files: response
				});
			}).catch(function (err) {
				var node = _reactDom2.default.findDOMNode(_this.tooltip);
				node.style.visibility = 'hidden';
				console.log(err.message);
			});
		};

		_this2.saveFileList = function (id) {
			var _this = _this2;
			_Redux.Store.dispatch(_Redux.Actions.callAPI('saveFileList', {
				detailId: _this.props.detail.id,
				fileId: id
			})).then(function (response) {}).catch(function (err) {
				_Notify2.default.show([{
					message: err.message,
					type: 'danger'
				}]);

				// let node = ReactDOM.findDOMNode(_this.tooltip);
				// node.style.visibility = 'hidden';
				// console.log(err.message);
			});
		};

		_this2.onChange = function (event) {

			var _this = _this2;

			var file = event.target.files[0];
			if (!file) {
				return;
			}

			_this2.setState({
				isUploading: true,
				fileName: file.name
			});

			if (file) {
				var progress = 0;
				var timer = window.setInterval(function () {
					if (progress >= 90) {
						window.clearInterval(timer);
						_this.setState({
							progress: 0,
							isUploading: false
						});
					}
					progress += 10;
					_this.setState({
						progress: progress
					});
				}, 100);
			}

			var form = new FormData();
			form.append('file', file);

			var xhr = new XMLHttpRequest();
			xhr.onreadystatechange = function () {
				if (xhr.readyState === 4) {
					if (xhr.status === 200) {

						var response = xhr.response.data;
						form.append('sourceservicetoken', response.token);
						form.append('docTypeCode', response.docTypeCode);
						form.append('operater', response.operater);

						_this.onTokenSuccess({
							sourceservicetoken: response.token,
							docTypeCode: response.docTypeCode,
							operater: response.operater
						});

						var xhrfile = new XMLHttpRequest();
						xhrfile.onreadystatechange = function () {
							if (xhrfile.readyState === 4) {
								var fileResponse = xhrfile.response;
								if (xhrfile.status === 200) {
									if (fileResponse && fileResponse.code > 0) {
										_this.onSuccess(fileResponse.data);
									} else {
										_this.onError(fileResponse.msg);
									}
								} else if (xhrfile.status == 413) {

									_this.onError('您上传的文件过大！');
								} else {
									_this.onError('后台报错请联系管理员！');
								}
							}
						};
						xhrfile.onerror = function (e) {
							console.error(xhr.statusText);
						};

						xhrfile.open('POST', '/api-old/krspace_oa_web/doc/docFile/uploadSingleFile', true);
						xhrfile.responseType = 'json';
						xhrfile.send(form);
					} else {
						_this.onTokenError();
					}
				}
			};

			xhr.onerror = function (e) {
				console.error(xhr.statusText);
			};
			xhr.open('GET', '/api/krspace-finance-web/finacontractdetail/getSourceServiceToken', true);
			xhr.responseType = 'json';
			xhr.send(null);
		};

		_this2.renderLoad = function () {
			var files = _this2.state.files;

			var className = 'ui-files';
			if (!files.length) {
				className += ' only-upload';
			}
			if (files.length < 6) {
				return _react2.default.createElement(
					'li',
					{ className: className },
					_react2.default.createElement(
						'div',
						{ className: 'file-button' },
						_react2.default.createElement(
							'span',
							{ className: 'file-icon' },
							'+'
						),
						_react2.default.createElement('input', { type: 'file', name: 'file', onChange: _this2.onChange }),
						'\u6DFB\u52A0\u6587\u4EF6'
					)
				);
			} else {
				return;
			}
		};

		_this2.state = {
			width: 0,
			height: 0,
			open: _this2.props.open,
			progress: 0,
			isUploading: false,
			isInit: true,
			form: {},
			files: [],
			offsetTop: _this2.props.offsetTop,
			fileName: '',
			close: false
		};

		return _this2;
	}

	_createClass(UpLoadList, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.renderHover();
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (!(0, _Utils.ShallowEqual)(this.state.open, nextProps.open)) {
				this.setState({
					open: nextProps.open,
					close: !this.state.close
				}, function () {
					this.renderHover();
					// document.addEventListener('click', this.docClick)

				});
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			console.log('componentWillUnmount');
			var node = _reactDom2.default.findDOMNode(this.tooltip);
			node.style.visibility = 'hidden';
		}
	}, {
		key: 'delete',
		value: function _delete(id) {
			var _this = this;
			_Redux.Store.dispatch(_Redux.Actions.callAPI('deleteFileList', {
				detailId: _this.props.detail.id,
				fileId: id.id
			})).then(function (response) {
				_this.getFileList(_this.props.detail.id);
			}).catch(function (err) {
				_Notify2.default.show([{
					message: err.message,
					type: 'danger'
				}]);
			});
		}
	}, {
		key: 'onError',
		value: function onError(message) {
			message = message || '上传文件失败';

			this.setState({
				progress: 0,
				isUploading: false
			});
			_Notify2.default.show([{
				message: message,
				type: 'danger'
			}]);
		}
	}, {
		key: 'onSuccess',
		value: function onSuccess(response) {
			response = (0, _simpleAssign2.default)({}, response);

			var form = this.state.form;


			var fileUrl = '/krspace_oa_web/doc/docFile/downFile?sourceservicetoken=' + form.sourceservicetoken + '&operater=' + form.operater + '&fileId=' + response.id;

			response.fileUrl = fileUrl;
			response.fileName = response.filename;

			var _props = this.props,
			    input = _props.input,
			    onChange = _props.onChange;
			var files = this.state.files;

			// files.unshift(response);

			files.push(response);
			this.saveFileList(response.id);

			this.setState({
				files: files,
				progress: 0,
				isUploading: false
			});

			// this.onSetInputValue();
			onChange && onChange(files);
		}
	}, {
		key: 'onSetInputValue',
		value: function onSetInputValue() {
			var files = this.state.files;
			var input = this.props.input;

			var fileIds = [];
			files.forEach(function (item, index) {
				fileIds.push(item.id);
			});
			input.onChange(fileIds.toString());
		}
	}, {
		key: 'onTokenSuccess',
		value: function onTokenSuccess(form) {
			this.setState({
				form: form
			});
		}
	}, {
		key: 'onTokenError',
		value: function onTokenError() {
			_Notify2.default.show([{
				message: '初始化上传文件失败',
				type: 'danger'
			}]);
		}
	}, {
		key: 'download',
		value: function download(item) {
			console.log('download', item);
			window.location.href = item.fileUrl;
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			var _state = this.state,
			    isUploading = _state.isUploading,
			    progress = _state.progress,
			    files = _state.files,
			    fileName = _state.fileName;

			var className = 'upload-list';
			var showUl = files.length ? 'visible' : 'hidden';

			var style = {};

			return _react2.default.createElement(
				'div',
				{ className: className, ref: function ref(div) {
						_this3.tooltip = div;
					}, style: style },
				_react2.default.createElement(
					'ul',
					{ className: 'upload-ul' },
					files.map(function (item, index) {
						var bottom = index == 5 ? '10px' : '0';
						return _react2.default.createElement(
							'li',
							{ className: 'upload-li', key: index, style: { marginBottom: bottom } },
							_react2.default.createElement(
								'span',
								{ className: 'file-name', onClick: _this3.download.bind(_this3, item) },
								item.fileName
							),
							_react2.default.createElement('span', { className: 'file-delete icon-delete', onClick: _this3.delete.bind(_this3, item) })
						);
					}),
					isUploading && _react2.default.createElement(
						'li',
						{ className: 'loading-progress', style: { position: 'relative' } },
						_react2.default.createElement(
							'span',
							{ className: 'progress', style: { width: progress + '%', height: '33px', position: 'absolute', top: 0, lineHeight: '33px' } },
							progress,
							'%'
						),
						_react2.default.createElement(
							'span',
							{ className: 'file-name-load' },
							fileName
						)
					),
					this.renderLoad()
				)
			);
		}
	}]);

	return UpLoadList;
}(_react.Component);

UpLoadList.defaultProps = {
	backgroundColor: "#fff",
	ShadowColor: 'transparent'
};
UpLoadList.PropTypes = {
	className: _react2.default.PropTypes.string,
	children: _react2.default.PropTypes.node,
	/**
  * place有四个参数值top,bottom,left,right
  */
	place: _react2.default.PropTypes.string,
	backgroundColor: _react2.default.PropTypes.string,
	/**
  * tooltip内容的阴影，box-shadow的参数
  */
	boxShadow: _react2.default.PropTypes.string,
	/**
  * 与box-shadow的阴影色相同
  */
	open: _react2.default.PropTypes.array

};
exports.default = UpLoadList;