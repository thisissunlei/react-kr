'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.navs = navs;

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _types = require('./types');

var Types = _interopRequireWildcard(_types);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function navs() {
	var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var action = arguments[1];


	switch (action.type) {
		//用户navs
		case Types.SET_USER_NAVS:
			{
				var items = [].concat(action.response);
				var aa = (0, _simpleAssign2.default)({}, state, { items: items });
				return aa;
			}
		case Types.SET_NAVS_CURRENT_CHILD_ROUTER:
			{
				return _extends({}, state, { current_child: action.router });
			}

		case Types.SET_NAVS_CURRENT_PARENT_ROUTER:
			{
				return _extends({}, state, { current_parent: action.router });
			}

		case Types.SET_NAVS_CURRENT_ROUTER:
			{
				return _extends({}, state, { current_router: action.router });
			}

		case Types.SET_NAVS_ACTIVITY:
			{

				var _items = state.items;

				var router = action.router;
				var childRouter = action.childRouter;

				_items.forEach(function (item, index) {
					if (item.router && item.router == router) {
						item.active = true;
					} else {
						item.active = false;
					}
					if (item.hasOwnProperty('menuItems') && Object.prototype.toString.call(item.menuItems) === '[object Array]' && item.menuItems.length) {
						item.menuItems.forEach(function (child) {

							if (child.hasOwnProperty('menuItems') && Object.prototype.toString.call(child.menuItems) === '[object Array]' && child.menuItems && child.menuItems.length) {
								child.menuItems.forEach(function (children) {
									if (children.router == childRouter) {
										children.active = true;
									} else {
										children.active = false;
									}
								});
							}
						});
					}
				});

				return _extends({}, state, { items: _items });
			}

		case Types.SET_NAVS_CURRENT_ITEMS:
			{
				var _items2 = state.items;
				var router = action.router;

				var currentItem = _items2.filter(function (item, index) {
					return item.router && item.router == router;
				}).pop() || { menuItems: [] };

				var children = currentItem.menuItems || [];

				return _extends({}, state, { current_items: children });
			}

		case Types.SET_NAVS_CURRENT_ITEM_ACTIVE:
			{
				return _extends({}, state);
			}

		default:
			{
				return state;
			}

	}
}