'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Redux = require('kr/Redux');

var _krUi = require('kr-ui');

var _OrderEditForm = require('./OrderEditForm');

var _OrderEditForm2 = _interopRequireDefault(_OrderEditForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OrderCreate = function (_Component) {
	_inherits(OrderCreate, _Component);

	function OrderCreate(props, context) {
		_classCallCheck(this, OrderCreate);

		var _this2 = _possibleConstructorReturn(this, (OrderCreate.__proto__ || Object.getPrototypeOf(OrderCreate)).call(this, props, context));

		_this2.onSubmit = function (values) {

			if (_this2.isOk) {
				return false;
			}

			_this2.isOk = true;
			values.customerid = _this2.context.params.customerId;

			var _this = _this2;

			_Redux.Store.dispatch(_Redux.Actions.callAPI('enter-order', {}, values)).then(function (response) {

				_krUi.Notify.show([{
					message: '保存成功',
					type: 'success'
				}]);

				window.setTimeout(function () {
					window.top.location.reload();
					_this.isOk = false;
				}, 100);
			}).catch(function (err) {

				_krUi.Notify.show([{
					message: '创建失败',
					type: 'danger'
				}]);

				window.setTimeout(function () {
					_this.isOk = false;
				}, 0);
			});
		};

		_this2.onCancel = function () {
			window.top.location.reload();
		};

		_this2.getInitValues = function () {
			var _this = _this2;
			var communityOptions = [];
			var initialValues = {};

			var orderTypeOptions = [];
			_Redux.Store.dispatch(_Redux.Actions.callAPI('community-city-selected')).then(function (response) {
				communityOptions = response.communityCity.map(function (item) {
					item.value = String(item.communityId);
					item.label = item.communityName;
					return item;
				});

				orderTypeOptions = response.sysDicPayments.map(function (item) {
					item.value = String(item.id);
					item.label = item.dicName;
					return item;
				});

				_this.setState({
					communityOptions: communityOptions,
					orderTypeOptions: orderTypeOptions
				});
			}).catch(function (err) {});

			_Redux.Store.dispatch(_Redux.Actions.callAPI('get-customName-orderName', {
				customerId: _this2.props.params.customerId
			}, {})).then(function (response) {

				var initialValues = {};
				initialValues = response;
				initialValues.communityid = String(initialValues.communityid);
				_this.setState({
					initialValues: initialValues,
					loading: false
				});
			}).catch(function (err) {
				_krUi.Notify.show([{
					message: err.message,
					type: 'danger'
				}]);
			});
		};

		_this2.isOk = false;

		_this2.state = {
			loading: true,
			communityOptions: [],
			initialValues: {},
			orderTypeOptions: [{
				value: '',
				label: '请选择类型'
			}, {
				value: 'STATION',
				label: '工位服务订单'
			}, {
				value: 'INCUBAZION',
				label: '孵化订单'
			}, {
				value: 'REGISTER',
				label: '注册订单'
			}, {
				value: 'INCUSTOM',
				label: '场内消费订单'
			}, {
				value: 'ACTIVITY',
				label: '广告订单'
			}, {
				value: 'ADDEDSERVICE',
				label: '增值服务订单'
			}, {
				value: 'TRAINING',
				label: '培训订单'
			}, {
				value: 'OTHER',
				label: '其他服务订单'
			}]

		};
		_Redux.Store.dispatch(_Redux.Actions.switchSidebarNav(false));
		_Redux.Store.dispatch(_Redux.Actions.switchHeaderNav(false));

		return _this2;
	}

	_createClass(OrderCreate, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var obj = document.body;
			obj.style.background = '#fff';
			this.getInitValues();
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {}
	}, {
		key: 'render',
		value: function render() {

			if (this.state.loading) {
				return _react2.default.createElement(_krUi.Loading, null);
			}
			var _state = this.state,
			    initialValues = _state.initialValues,
			    communityOptions = _state.communityOptions,
			    orderTypeOptions = _state.orderTypeOptions;


			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_OrderEditForm2.default, { onSubmit: this.onSubmit, communityOptions: communityOptions, initialValues: initialValues, orderTypeOptions: orderTypeOptions, onCancel: this.onCancel })
			);
		}
	}]);

	return OrderCreate;
}(_react.Component);

// const selector = formValueSelector('orderEditForm');

// function mapStateToProps(state){

// 	let communitys = state.common['community-city-selected'];

// 	if(Object.prototype.toString.call(communitys) !== '[object Array]'){
// 		communitys = [];
// 	}

// 	const communityid = selector(state, 'communityid');

// 	let cityName = '';
// 	communitys.map(function(item){
// 		if(item.communityId == communityid){
// 			cityName = item.cityName;
// 		}
// 	});

// 	return {
// 		cityName,
// 		initialValues:state.common['get-simple-order'],
// 		communitys,
//    	};
// }


// export default connect(mapStateToProps)(OrderCreate);

// }


OrderCreate.contextTypes = {
	params: _react2.default.PropTypes.object.isRequired

};
exports.default = OrderCreate;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(OrderCreate, 'OrderCreate', '/Users/tmac_zc/Code/kr-admin/src/Containers/Operation/CustomerManage/Order/Create/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9Db250YWluZXJzL09wZXJhdGlvbi9DdXN0b21lck1hbmFnZS9PcmRlci9DcmVhdGUvaW5kZXguanMiXSwibmFtZXMiOlsiT3JkZXJDcmVhdGUiLCJwcm9wcyIsImNvbnRleHQiLCJvblN1Ym1pdCIsInZhbHVlcyIsImlzT2siLCJjdXN0b21lcmlkIiwicGFyYW1zIiwiY3VzdG9tZXJJZCIsIl90aGlzIiwiZGlzcGF0Y2giLCJjYWxsQVBJIiwidGhlbiIsInJlc3BvbnNlIiwic2hvdyIsIm1lc3NhZ2UiLCJ0eXBlIiwid2luZG93Iiwic2V0VGltZW91dCIsInRvcCIsImxvY2F0aW9uIiwicmVsb2FkIiwiY2F0Y2giLCJlcnIiLCJvbkNhbmNlbCIsImdldEluaXRWYWx1ZXMiLCJjb21tdW5pdHlPcHRpb25zIiwiaW5pdGlhbFZhbHVlcyIsIm9yZGVyVHlwZU9wdGlvbnMiLCJjb21tdW5pdHlDaXR5IiwibWFwIiwiaXRlbSIsInZhbHVlIiwiU3RyaW5nIiwiY29tbXVuaXR5SWQiLCJsYWJlbCIsImNvbW11bml0eU5hbWUiLCJzeXNEaWNQYXltZW50cyIsImlkIiwiZGljTmFtZSIsInNldFN0YXRlIiwiY29tbXVuaXR5aWQiLCJsb2FkaW5nIiwic3RhdGUiLCJzd2l0Y2hTaWRlYmFyTmF2Iiwic3dpdGNoSGVhZGVyTmF2Iiwib2JqIiwiZG9jdW1lbnQiLCJib2R5Iiwic3R5bGUiLCJiYWNrZ3JvdW5kIiwibmV4dFByb3BzIiwiY29udGV4dFR5cGVzIiwiUHJvcFR5cGVzIiwib2JqZWN0IiwiaXNSZXF1aXJlZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFJQTs7QUFNQTs7QUFpQkE7Ozs7Ozs7Ozs7OztJQUdxQkEsVzs7O0FBTXBCLHNCQUFZQyxLQUFaLEVBQW1CQyxPQUFuQixFQUE0QjtBQUFBOztBQUFBLHlIQUNyQkQsS0FEcUIsRUFDZEMsT0FEYzs7QUFBQSxTQXFENUJDLFFBckQ0QixHQXFEakIsVUFBQ0MsTUFBRCxFQUFZOztBQUV0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QUN2QixXQUFRLGtEQUFSO0FBQ0E7QUFMTyxnQkFVSixLQUFLQyxLQVZEO0FBQUEsT0FPUGhCLGFBUE8sVUFPUEEsYUFQTztBQUFBLE9BUVBELGdCQVJPLFVBUVBBLGdCQVJPO0FBQUEsT0FTUEUsZ0JBVE8sVUFTUEEsZ0JBVE87OztBQWNSLFVBRVM7QUFBQTtBQUFBO0FBQ1IsNkRBQWUsVUFBVSxLQUFLekIsUUFBOUIsRUFBd0Msa0JBQWtCdUIsZ0JBQTFELEVBQTRFLGVBQWVDLGFBQTNGLEVBQTBHLGtCQUFrQkMsZ0JBQTVILEVBQThJLFVBQVUsS0FBS0osUUFBN0o7QUFEUSxJQUZUO0FBUUE7Ozs7OztBQUlGOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFJQTs7QUFFQTs7O0FBM01xQnhCLFcsQ0FFYm9ELFksR0FBZTtBQUNyQjdDLFNBQVEsZ0JBQU04QyxTQUFOLENBQWdCQyxNQUFoQixDQUF1QkM7O0FBRFYsQztrQkFGRnZELFc7Ozs7Ozs7OytCQUFBQSxXIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy90bWFjX3pjL0NvZGUva3ItYWRtaW4iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtcblx0Q29tcG9uZW50LFxuXHRQcm9wVHlwZXNcbn0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcblx0Y29ubmVjdCxcblx0U3RvcmUsXG5cdEFjdGlvbnNcbn0gZnJvbSAna3IvUmVkdXgnO1xuXG5pbXBvcnQge1xuXHRLckZpZWxkLFxuXHRMYWJlbFRleHQsXG5cdFNlY3Rpb24sXG5cdEJyZWFkQ3J1bWJzLFxuXHRHcmlkLFxuXHRSb3csXG5cdENvbCxcblx0Tm90aWZ5LFxuXHRMb2FkaW5nLFxuXHRCdXR0b24sXG5cdERpYWxvZyxcblx0U25hY2tiYXIsXG5cdExpc3RHcm91cCxcblx0TGlzdEdyb3VwSXRlbVxufSBmcm9tICdrci11aSc7XG5cbmltcG9ydCBPcmRlckVkaXRGb3JtIGZyb20gJy4vT3JkZXJFZGl0Rm9ybSc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT3JkZXJDcmVhdGUgZXh0ZW5kcyBDb21wb25lbnQge1xuXG5cdHN0YXRpYyBjb250ZXh0VHlwZXMgPSB7XG5cdFx0cGFyYW1zOiBSZWFjdC5Qcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG5cblx0fVxuXHRjb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCkge1xuXHRcdHN1cGVyKHByb3BzLCBjb250ZXh0KTtcblxuXG5cdFx0dGhpcy5pc09rID0gZmFsc2U7XG5cblxuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHRsb2FkaW5nOiB0cnVlLFxuXHRcdFx0Y29tbXVuaXR5T3B0aW9uczogW10sXG5cdFx0XHRpbml0aWFsVmFsdWVzOiB7fSxcblx0XHRcdG9yZGVyVHlwZU9wdGlvbnM6IFt7XG5cdFx0XHRcdHZhbHVlOiAnJyxcblx0XHRcdFx0bGFiZWw6ICfor7fpgInmi6nnsbvlnosnXG5cdFx0XHR9LCB7XG5cdFx0XHRcdHZhbHVlOiAnU1RBVElPTicsXG5cdFx0XHRcdGxhYmVsOiAn5bel5L2N5pyN5Yqh6K6i5Y2VJ1xuXHRcdFx0fSwge1xuXHRcdFx0XHR2YWx1ZTogJ0lOQ1VCQVpJT04nLFxuXHRcdFx0XHRsYWJlbDogJ+WtteWMluiuouWNlSdcblx0XHRcdH0sIHtcblx0XHRcdFx0dmFsdWU6ICdSRUdJU1RFUicsXG5cdFx0XHRcdGxhYmVsOiAn5rOo5YaM6K6i5Y2VJ1xuXHRcdFx0fSwge1xuXHRcdFx0XHR2YWx1ZTogJ0lOQ1VTVE9NJyxcblx0XHRcdFx0bGFiZWw6ICflnLrlhoXmtojotLnorqLljZUnXG5cdFx0XHR9LCB7XG5cdFx0XHRcdHZhbHVlOiAnQUNUSVZJVFknLFxuXHRcdFx0XHRsYWJlbDogJ+W5v+WRiuiuouWNlSdcblx0XHRcdH0sIHtcblx0XHRcdFx0dmFsdWU6ICdBRERFRFNFUlZJQ0UnLFxuXHRcdFx0XHRsYWJlbDogJ+WinuWAvOacjeWKoeiuouWNlSdcblx0XHRcdH0sIHtcblx0XHRcdFx0dmFsdWU6ICdUUkFJTklORycsXG5cdFx0XHRcdGxhYmVsOiAn5Z+56K6t6K6i5Y2VJ1xuXHRcdFx0fSwge1xuXHRcdFx0XHR2YWx1ZTogJ09USEVSJyxcblx0XHRcdFx0bGFiZWw6ICflhbbku5bmnI3liqHorqLljZUnXG5cdFx0XHR9XVxuXG5cdFx0fVxuXHRcdFN0b3JlLmRpc3BhdGNoKEFjdGlvbnMuc3dpdGNoU2lkZWJhck5hdihmYWxzZSkpO1xuXHRcdFN0b3JlLmRpc3BhdGNoKEFjdGlvbnMuc3dpdGNoSGVhZGVyTmF2KGZhbHNlKSk7XG5cblx0fVxuXG5cdGNvbXBvbmVudERpZE1vdW50KCkge1xuXHRcdHZhciBvYmogPSBkb2N1bWVudC5ib2R5O1xuXHRcdG9iai5zdHlsZS5iYWNrZ3JvdW5kID0gJyNmZmYnO1xuXHRcdHRoaXMuZ2V0SW5pdFZhbHVlcygpO1xuXG5cblx0fVxuXHRvblN1Ym1pdCA9ICh2YWx1ZXMpID0+IHtcblxuXHRcdGlmICh0aGlzLmlzT2spIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHR0aGlzLmlzT2sgPSB0cnVlO1xuXHRcdHZhbHVlcy5jdXN0b21lcmlkID0gdGhpcy5jb250ZXh0LnBhcmFtcy5jdXN0b21lcklkO1xuXG5cdFx0dmFyIF90aGlzID0gdGhpcztcblxuXHRcdFN0b3JlLmRpc3BhdGNoKEFjdGlvbnMuY2FsbEFQSSgnZW50ZXItb3JkZXInLCB7fSwgdmFsdWVzKSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdFx0XHROb3RpZnkuc2hvdyhbe1xuXHRcdFx0XHRtZXNzYWdlOiAn5L+d5a2Y5oiQ5YqfJyxcblx0XHRcdFx0dHlwZTogJ3N1Y2Nlc3MnLFxuXHRcdFx0fV0pO1xuXG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcblx0XHRcdFx0d2luZG93LnRvcC5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdFx0X3RoaXMuaXNPayA9IGZhbHNlO1xuXHRcdFx0fSwgMTAwKTtcblxuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuXG5cdFx0XHROb3RpZnkuc2hvdyhbe1xuXHRcdFx0XHRtZXNzYWdlOiAn5Yib5bu65aSx6LSlJyxcblx0XHRcdFx0dHlwZTogJ2RhbmdlcicsXG5cdFx0XHR9XSk7XG5cblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRfdGhpcy5pc09rID0gZmFsc2U7XG5cdFx0XHR9LCAwKTtcblxuXHRcdH0pO1xuXG5cdH1cblx0b25DYW5jZWwgPSAoKSA9PiB7XG5cdFx0d2luZG93LnRvcC5sb2NhdGlvbi5yZWxvYWQoKTtcblx0fVxuXG5cdGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7fVxuXHRnZXRJbml0VmFsdWVzID0gKCkgPT4ge1xuXHRcdHZhciBfdGhpcyA9IHRoaXM7XG5cdFx0bGV0IGNvbW11bml0eU9wdGlvbnMgPSBbXTtcblx0XHRsZXQgaW5pdGlhbFZhbHVlcyA9IHt9O1xuXG5cdFx0bGV0IG9yZGVyVHlwZU9wdGlvbnMgPSBbXTtcblx0XHRTdG9yZS5kaXNwYXRjaChBY3Rpb25zLmNhbGxBUEkoJ2NvbW11bml0eS1jaXR5LXNlbGVjdGVkJykpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcblx0XHRcdGNvbW11bml0eU9wdGlvbnMgPSByZXNwb25zZS5jb21tdW5pdHlDaXR5Lm1hcCgoaXRlbSkgPT4ge1xuXHRcdFx0XHRpdGVtLnZhbHVlID0gU3RyaW5nKGl0ZW0uY29tbXVuaXR5SWQpO1xuXHRcdFx0XHRpdGVtLmxhYmVsID0gaXRlbS5jb21tdW5pdHlOYW1lO1xuXHRcdFx0XHRyZXR1cm4gaXRlbTtcblx0XHRcdH0pO1xuXG5cdFx0XHRvcmRlclR5cGVPcHRpb25zID0gcmVzcG9uc2Uuc3lzRGljUGF5bWVudHMubWFwKChpdGVtKSA9PiB7XG5cdFx0XHRcdGl0ZW0udmFsdWUgPSBTdHJpbmcoaXRlbS5pZCk7XG5cdFx0XHRcdGl0ZW0ubGFiZWwgPSBpdGVtLmRpY05hbWU7XG5cdFx0XHRcdHJldHVybiBpdGVtO1xuXHRcdFx0fSk7XG5cblx0XHRcdF90aGlzLnNldFN0YXRlKHtcblx0XHRcdFx0Y29tbXVuaXR5T3B0aW9uczogY29tbXVuaXR5T3B0aW9ucyxcblx0XHRcdFx0b3JkZXJUeXBlT3B0aW9uczogb3JkZXJUeXBlT3B0aW9uc1xuXHRcdFx0fSlcblx0XHR9KS5jYXRjaChmdW5jdGlvbihlcnIpIHt9KTtcblxuXG5cdFx0U3RvcmUuZGlzcGF0Y2goQWN0aW9ucy5jYWxsQVBJKCdnZXQtY3VzdG9tTmFtZS1vcmRlck5hbWUnLCB7XG5cdFx0XHRjdXN0b21lcklkOiB0aGlzLnByb3BzLnBhcmFtcy5jdXN0b21lcklkXG5cdFx0fSwge30pKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cblx0XHRcdGxldCBpbml0aWFsVmFsdWVzID0ge307XG5cdFx0XHRpbml0aWFsVmFsdWVzID0gcmVzcG9uc2U7XG5cdFx0XHRpbml0aWFsVmFsdWVzLmNvbW11bml0eWlkID0gU3RyaW5nKGluaXRpYWxWYWx1ZXMuY29tbXVuaXR5aWQpO1xuXHRcdFx0X3RoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRpbml0aWFsVmFsdWVzLFxuXHRcdFx0XHRsb2FkaW5nOiBmYWxzZVxuXHRcdFx0fSlcblx0XHR9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcblx0XHRcdE5vdGlmeS5zaG93KFt7XG5cdFx0XHRcdG1lc3NhZ2U6IGVyci5tZXNzYWdlLFxuXHRcdFx0XHR0eXBlOiAnZGFuZ2VyJyxcblx0XHRcdH1dKTtcblx0XHR9KTtcblx0fVxuXG5cblx0cmVuZGVyKCkge1xuXG5cblx0XHRpZiAodGhpcy5zdGF0ZS5sb2FkaW5nKSB7XG5cdFx0XHRyZXR1cm4gKDxMb2FkaW5nLz4pO1xuXHRcdH1cblx0XHRsZXQge1xuXHRcdFx0aW5pdGlhbFZhbHVlcyxcblx0XHRcdGNvbW11bml0eU9wdGlvbnMsXG5cdFx0XHRvcmRlclR5cGVPcHRpb25zXG5cdFx0fSA9IHRoaXMuc3RhdGU7XG5cblxuXG5cdFx0cmV0dXJuIChcbiAgICAgICAgICAgIFxuICAgICAgICAgICA8ZGl2PiBcblx0XHRcdDxPcmRlckVkaXRGb3JtIG9uU3VibWl0PXt0aGlzLm9uU3VibWl0fSBjb21tdW5pdHlPcHRpb25zPXtjb21tdW5pdHlPcHRpb25zfSBpbml0aWFsVmFsdWVzPXtpbml0aWFsVmFsdWVzfSBvcmRlclR5cGVPcHRpb25zPXtvcmRlclR5cGVPcHRpb25zfSBvbkNhbmNlbD17dGhpcy5vbkNhbmNlbH0vPlxuXG4gICAgICAgICAgIDwvZGl2PlxuXG5cdFx0KTtcblx0fVxufVxuXG5cbi8vIGNvbnN0IHNlbGVjdG9yID0gZm9ybVZhbHVlU2VsZWN0b3IoJ29yZGVyRWRpdEZvcm0nKTtcblxuLy8gZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0YXRlKXtcblxuLy8gXHRsZXQgY29tbXVuaXR5cyA9IHN0YXRlLmNvbW1vblsnY29tbXVuaXR5LWNpdHktc2VsZWN0ZWQnXTtcblxuLy8gXHRpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY29tbXVuaXR5cykgIT09ICdbb2JqZWN0IEFycmF5XScpe1xuLy8gXHRcdGNvbW11bml0eXMgPSBbXTtcbi8vIFx0fVxuXG4vLyBcdGNvbnN0IGNvbW11bml0eWlkID0gc2VsZWN0b3Ioc3RhdGUsICdjb21tdW5pdHlpZCcpO1xuXG4vLyBcdGxldCBjaXR5TmFtZSA9ICcnO1xuLy8gXHRjb21tdW5pdHlzLm1hcChmdW5jdGlvbihpdGVtKXtcbi8vIFx0XHRpZihpdGVtLmNvbW11bml0eUlkID09IGNvbW11bml0eWlkKXtcbi8vIFx0XHRcdGNpdHlOYW1lID0gaXRlbS5jaXR5TmFtZTtcbi8vIFx0XHR9XG4vLyBcdH0pO1xuXG4vLyBcdHJldHVybiB7XG4vLyBcdFx0Y2l0eU5hbWUsXG4vLyBcdFx0aW5pdGlhbFZhbHVlczpzdGF0ZS5jb21tb25bJ2dldC1zaW1wbGUtb3JkZXInXSxcbi8vIFx0XHRjb21tdW5pdHlzLFxuLy8gICAgXHR9O1xuLy8gfVxuXG5cblxuLy8gZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKE9yZGVyQ3JlYXRlKTtcblxuLy8gfVxuXG4iXX0=