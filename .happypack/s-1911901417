'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./index.less');

var _materialUi = require('material-ui');

var _moreVert = require('material-ui/svg-icons/navigation/more-vert');

var _moreVert2 = _interopRequireDefault(_moreVert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TitleList = function (_Component) {
	_inherits(TitleList, _Component);

	function TitleList(props) {
		_classCallCheck(this, TitleList);

		return _possibleConstructorReturn(this, (TitleList.__proto__ || Object.getPrototypeOf(TitleList)).call(this, props));
	}

	_createClass(TitleList, [{
		key: 'render',
		value: function render() {
			var hide = this.props.hide;


			if (hide) {
				return null;
			}

			return null;

			return _react2.default.createElement(
				'div',
				{ className: 'titlelist' },
				_react2.default.createElement(
					'span',
					null,
					'\u5F53\u524D\u4F4D\u7F6E\uFF1A'
				),
				this.props.children.map(function (item) {
					return _react2.default.createElement(
						'span',
						{ key: item, className: 'list' },
						item
					);
				})
			);
		}
	}]);

	return TitleList;
}(_react.Component);

TitleList.displayName = 'TitleList';
TitleList.defaultProps = {
	hide: false
};
TitleList.propTypes = {
	/**
 *
 */
	children: _react2.default.PropTypes.node,
	/**
 *是否隐藏
 */
	hide: _react2.default.PropTypes.bool
};
exports.default = TitleList;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(TitleList, 'TitleList', '/Users/smile/Documents/kr-admin/src/Components/BreadCrumbs/index.js');
}();

;