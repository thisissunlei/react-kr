'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _redux = require('redux');

var _Actions = require('kr-ui/../Redux/Actions');

var actionCreators = _interopRequireWildcard(_Actions);

var _Redux = require('kr/Redux');

require('./index.less');

var _krUi = require('kr-ui');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchParam = function (_Component) {
	_inherits(SearchParam, _Component);

	function SearchParam(props, context) {
		_classCallCheck(this, SearchParam);

		var _this2 = _possibleConstructorReturn(this, (SearchParam.__proto__ || Object.getPrototypeOf(SearchParam)).call(this, props, context));

		_this2.onHandleOver = _this2.onHandleOver.bind(_this2);
		_this2.onSearch = _this2.onSearch.bind(_this2);
		_this2.onLeave = _this2.onLeave.bind(_this2);
		_this2.state = {
			primaryR: 'true',
			primaryI: 'false',
			active: 10000,
			activeI: _this2.props.params.accountType == 'PAYMENT' ? 10000 : _this2.props.params.index,
			myReceive: 10000,
			myIncome: 10000
		};

		return _this2;
	}

	_createClass(SearchParam, [{
		key: 'componentDidMount',
		value: function componentDidMount() {}
	}, {
		key: 'onSearch',
		value: function onSearch(type, childType, id, propInfo, index) {
			var _props = this.props,
			    onSearch = _props.onSearch,
			    params = _props.params;

			//console.log('5555555',window.location.href+'?type='+type+'&index='+index);


			if (type == 'PAYMENT' && childType == 'basic') {
				this.setState({
					primaryR: 'true',
					primaryI: 'false',
					activeI: 10000,
					active: 10000
				});
			}
			if (type == 'PAYMENT' && childType != 'basic') {
				this.setState({
					primaryR: 'false',
					primaryI: 'false',
					active: index,
					activeI: 10000
				});
			}

			if (type == 'INCOME' && childType == 'basic') {
				this.setState({
					primaryR: 'false',
					primaryI: 'true',
					activeI: 10000,
					active: 10000
				});
			}
			if (type == 'INCOME' && childType != 'basic') {
				this.setState({
					primaryR: 'false',
					primaryI: 'false',
					activeI: index,
					active: 10000
				});
			}

			var searchParam = {};

			searchParam.accountType = type;
			searchParam.childType = childType;
			searchParam.propertyId = id;
			searchParam.propInfo = propInfo;
			searchParam.orderId = params.orderId;
			searchParam.index = index;
			searchParam.pageSize = 30;
			onSearch && onSearch(searchParam);
		}
	}, {
		key: 'onHandleOver',
		value: function onHandleOver(type, index) {
			var _this = this;
			if (type == 'PAYMENT') {
				this.setState({
					myReceive: index,
					myIncome: 10000
				});
			}

			if (type == 'INCOME') {
				this.setState({
					myIncome: index,
					myReceive: 10000
				});
			}
		}
	}, {
		key: 'onLeave',
		value: function onLeave(type, index) {
			if (type == 'PAYMENT') {
				this.setState({
					myReceive: 10000,
					myIncome: 10000
				});
			}

			if (type == 'INCOME') {
				this.setState({
					myReceive: 10000,
					myIncome: 10000
				});
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			var _props2 = this.props,
			    detailPayment = _props2.detailPayment,
			    detailIncome = _props2.detailIncome,
			    detailBalance = _props2.detailBalance;

			//console.log('props',this.props.params.accountType,this.props.params.index);


			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_krUi.LineText, { title: '\u56DE\u6B3E', primary: this.state.primaryR, onClick: this.onSearch.bind(this, 'PAYMENT', 'basic', '', 'SETTLED') }),
				_react2.default.createElement(
					'div',
					{ className: 'ui-ListGroup' },
					_react2.default.createElement(
						_krUi.ListGroup,
						{ inline: false },
						detailPayment.map(function (item, index) {
							var className;
							var classPic;
							if (_this3.state.active == index) {
								className = 'active';
								classPic = 'activePic';
							} else if (_this3.state.myReceive == index) {
								className = 'active_hover';
								classPic = 'pic_color';
							} else {
								className = 'ui-listGroupItem';
								classPic = 'pic_color';
							}

							return _react2.default.createElement(
								_krUi.ListGroupItem,
								{ key: index },
								_react2.default.createElement(
									'div',
									{ className: className, onTouchTap: _this3.onSearch.bind(_this3, 'PAYMENT', item.propcode, item.id, item.propInfo, index), onMouseOver: _this3.onHandleOver.bind(_this3, 'PAYMENT', index), onMouseOut: _this3.onLeave.bind(_this3, 'PAYMENT', index) },
									_react2.default.createElement('span', { className: classPic }),
									_react2.default.createElement(
										'span',
										{ className: item.propname == '代收（水电、打印等）' ? 'receivedTextWater' : 'receivedText' },
										item.propname
									),
									_react2.default.createElement(
										'span',
										{ className: item.propname == '代收（水电、打印等）' ? 'receivedTextWaterMoney' : 'receivedMoney' },
										item.propamount
									)
								)
							);
						})
					)
				),
				_react2.default.createElement(_krUi.LineText, { title: '\u6536\u5165', primary: this.state.primaryI, onClick: this.onSearch.bind(this, 'INCOME', 'basic', '', 'SETTLED') }),
				_react2.default.createElement(
					'div',
					{ className: 'ui-ListGroup' },
					_react2.default.createElement(
						_krUi.ListGroup,
						{ inline: false },
						detailIncome.map(function (item, index) {
							var className;
							var classPic;

							if (_this3.state.activeI == index) {
								className = 'active';
								classPic = 'activePic';
							} else if (_this3.state.myIncome == index) {
								className = 'active_hover';
								classPic = 'pic_color';
							} else {
								className = 'ui-listGroupItem';
								classPic = 'pic_color';
							}
							return _react2.default.createElement(
								_krUi.ListGroupItem,
								{ key: index },
								_react2.default.createElement(
									'div',
									{ className: className, onTouchTap: _this3.onSearch.bind(_this3, 'INCOME', item.propcode, item.id, item.propInfo, index), onMouseOver: _this3.onHandleOver.bind(_this3, 'INCOME', index), onMouseOut: _this3.onLeave.bind(_this3, 'INCOME', index) },
									_react2.default.createElement('span', { className: classPic }),
									_react2.default.createElement(
										'span',
										{ className: item.propname == '代收（水电、打印等）' ? 'receivedTextWater' : 'receivedText' },
										item.propname
									),
									_react2.default.createElement(
										'span',
										{ className: item.propname == '代收（水电、打印等）' ? 'receivedTextWaterMoney' : 'receivedMoney' },
										item.propamount
									)
								)
							);
						})
					)
				),
				_react2.default.createElement(_krUi.LineText, { title: '\u4F59\u989D', primary: 'false', style: { color: '#999', cursor: 'default' }, styleLine: { background: '#999' } }),
				_react2.default.createElement(
					'div',
					{ className: 'ui-ListGroup' },
					_react2.default.createElement(
						_krUi.ListGroup,
						{ inline: false },
						_react2.default.createElement(
							_krUi.ListGroupItem,
							null,
							_react2.default.createElement(
								'div',
								{ className: 'ui-listGroupItem' },
								_react2.default.createElement(
									'span',
									{ className: 'receivedText', style: { cursor: 'default' } },
									'\u4F59\u989D'
								),
								_react2.default.createElement(
									'span',
									{ className: 'receivedMoney', style: { cursor: 'default' } },
									detailBalance
								)
							)
						)
					)
				)
			);
		}
	}]);

	return SearchParam;
}(_react.Component);

SearchParam.defaultProps = {};
SearchParam.PropTypes = {
	detailPayment: _react2.default.PropTypes.object,
	detailIncome: _react2.default.PropTypes.object,
	detailBalance: _react2.default.PropTypes.object,
	params: _react2.default.PropTypes.object
};
exports.default = SearchParam;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(SearchParam, 'SearchParam', '/Users/liuyihao/Code/kr-admin/src/Containers/Finance/Manage/OrderBill/OrderBillDetail/SearchParam/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,