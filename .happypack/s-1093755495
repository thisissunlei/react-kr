'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Redux = require('kr/Redux');

var _reduxForm = require('redux-form');

var _krUi = require('kr-ui');

var _reactDom = require('react-dom');

var _reactTooltip = require('react-tooltip');

var _reactTooltip2 = _interopRequireDefault(_reactTooltip);

var _dateformat = require('dateformat');

var _dateformat2 = _interopRequireDefault(_dateformat);

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var D3Content = function (_Component) {
	_inherits(D3Content, _Component);

	function D3Content(props, context) {
		_classCallCheck(this, D3Content);

		var _this2 = _possibleConstructorReturn(this, (D3Content.__proto__ || Object.getPrototypeOf(D3Content)).call(this, props, context));

		_this2.getLeft = function (value) {
			var currentYear = _this2.props.currentYear;

			var start = currentYear + '-1-1';
			var end = currentYear - 1 + '-12-31 12:00:00';
			var startTime = currentYear + '-1-1 12:00:00';
			var left = '-5px';
			start = new Date(start).getTime();
			end = new Date(end).getTime();
			if (value == end || value >= start) {
				left = '-5px';
			}
			if (value == startTime) {
				left = "10px";
			}
			return left;
		};

		_this2.renderRedInfo = function (itemData) {
			var infoList = _this2.state.infoList;

			var item = infoList || [];
			var id = _this2.props.id;
			var top = 225;
			var place = 'top';
			if (item.length > 1) {
				place = 'bottom';
				top = 220 * item.length;
			}
			return _react2.default.createElement(
				_krUi.Tooltips,
				{ place: place, type: 'dark', effect: 'solid', scroll: false, id: '' + item.pointDate + id, offsetTop: top },
				_react2.default.createElement(
					'div',
					{ className: 'react-tooltips-content' },
					item.map(function (value, i) {
						return _react2.default.createElement(
							'div',
							{ key: i, className: 'react-tooltip-content' },
							_react2.default.createElement(
								'span',
								null,
								value.contractName,
								'\u5206\u671F\u50AC\u6B3E'
							),
							_react2.default.createElement(
								'p',
								{ style: { width: '310px' } },
								(0, _dateformat2.default)(itemData.pointDate, "yyyy.mm.dd"),
								'\u65E5\u50AC\u6B3E\xA0(',
								(0, _dateformat2.default)(value.installmentBegindate, "yyyy.mm.dd"),
								'-',
								(0, _dateformat2.default)(value.installmentEnddate, "yyyy.mm.dd"),
								')'
							),
							_react2.default.createElement(
								'p',
								null,
								'\u5DE5\u4F4D:',
								_react2.default.createElement(
									'span',
									{ className: 'red-content', style: { marginRight: 5 } },
									value.stationnum
								),
								'\xA0\u4F1A\u8BAE\u5BA4:',
								_react2.default.createElement(
									'span',
									{ className: 'red-content' },
									value.boardroomNum
								),
								' \xA0 (',
								(0, _dateformat2.default)(value.billStartDate, "yyyy.mm.dd"),
								'-',
								(0, _dateformat2.default)(value.billEndDate, "yyyy.mm.dd"),
								')'
							),
							_react2.default.createElement(
								'p',
								null,
								'\u8D1F\u8D23\u4EBA\uFF1A',
								_react2.default.createElement(
									'span',
									{ className: 'red-content' },
									value.name ? value.name : '—'
								)
							),
							_react2.default.createElement(
								'p',
								null,
								'\u7535\u8BDD\uFF1A',
								_react2.default.createElement(
									'span',
									{ className: 'red-content' },
									value.phone ? value.phone : '—'
								)
							),
							_react2.default.createElement(
								'p',
								null,
								'\u50AC\u6B3E\u91D1\u989D\uFF1A',
								_react2.default.createElement(
									'span',
									{ className: 'red-content' },
									value.installmentAmount
								)
							),
							_react2.default.createElement('span', { className: 'content-lines' }),
							_react2.default.createElement(
								'p',
								null,
								'\u56DE\u6B3E\u91D1\u989D\uFF1A',
								_react2.default.createElement(
									'span',
									{ className: 'red-content' },
									value.installmentBackamount
								)
							)
						);
					})
				)
			);
		};

		_this2.renderBlueInfo = function () {
			var BlueinfoList = _this2.state.BlueinfoList;

			var items = BlueinfoList || [];
			var id = _this2.props.id;
			return _react2.default.createElement(
				_krUi.Tooltips,
				{ place: 'top', type: 'dark', effect: 'solid', id: '' + items.pointDate + id + 'sameblue', offsetTop: 130 },
				_react2.default.createElement(
					'div',
					{ className: 'react-tooltip-content', style: { width: '250px' } },
					_react2.default.createElement(
						'span',
						null,
						'\u5DE5\u4F4D\u53D8\u66F4'
					),
					_react2.default.createElement(
						'p',
						null,
						items.finaName,
						'(',
						(0, _dateformat2.default)(items.leaseBeginDate, "yyyy.mm.dd"),
						'-',
						(0, _dateformat2.default)(items.leaseEndDate, "yyyy.mm.dd"),
						')'
					),
					_react2.default.createElement(
						'p',
						null,
						'\u53D8\u66F4\u524D\u5DE5\u4F4D\uFF1A',
						_react2.default.createElement(
							'span',
							{ className: 'blue-content' },
							items.oldStationNum
						),
						' \xA0 \u4F1A\u8BAE\u5BA4\uFF1A',
						_react2.default.createElement(
							'span',
							{ className: 'blue-content' },
							items.oldBoardroomNum
						)
					),
					_react2.default.createElement(
						'p',
						null,
						'\u53D8\u66F4\u540E\u5DE5\u4F4D\uFF1A',
						_react2.default.createElement(
							'span',
							{ className: 'blue-content' },
							items.newStationNum
						),
						' \xA0 \u4F1A\u8BAE\u5BA4\uFF1A',
						_react2.default.createElement(
							'span',
							{ className: 'blue-content' },
							items.newBoardroomNum
						)
					)
				)
			);
		};

		_this2.countDays = _this2.countDays.bind(_this2);
		_this2.dealTime = _this2.dealTime.bind(_this2);
		_this2.getSpace = _this2.getSpace.bind(_this2);
		_this2.appendDiv = _this2.appendDiv.bind(_this2);
		_this2.timeNode = _this2.timeNode.bind(_this2);
		_this2.getSameTime = _this2.getSameTime.bind(_this2);
		_this2.renderBlueNode = _this2.renderBlueNode.bind(_this2);
		_this2.renderRedNode = _this2.renderRedNode.bind(_this2);
		_this2.renderwhiteBar = _this2.renderwhiteBar.bind(_this2);
		_this2.state = {
			detail: _this2.props.detail,
			finaBluePointVo: _this2.props.finaBluePointVo,
			finaRedPointVo: _this2.props.finaRedPointVo,
			whiteBar: _this2.props.whiteBar
		};
		_this2.NodeList = _this2.getSameTime();
		_this2.sameNode = _this2.NodeList[0];

		return _this2;
	}

	_createClass(D3Content, [{
		key: 'componentDidMount',
		value: function componentDidMount() {}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {

			if (!_.isEqual(this.props.detail, nextProps.detail)) {
				this.setState({
					detail: nextProps.detail
				});
			}
			if (!_.isEqual(this.props.finaBluePointVo, nextProps.finaBluePointVo)) {
				this.setState({
					detail: nextProps.finaBluePointVo
				});
			}
			if (!_.isEqual(this.props.finaRedPointVo, nextProps.finaRedPointVo)) {
				this.setState({
					detail: nextProps.finaRedPointVo
				});
			}
			if (!_.isEqual(this.props.whiteBar, nextProps.whiteBar)) {
				this.setState({
					detail: nextProps.whiteBar
				});
			}
			this.NodeList = this.getSameTime();
			this.sameNode = this.NodeList[0];
		}

		// 计算第几天

	}, {
		key: 'countDays',
		value: function countDays(date) {
			var currentYear = this.props.currentYear;

			var year = currentYear + '/1/1';
			var initial = new Date(year).getTime();
			var offset = date - initial;
			return Math.ceil(offset / 24 / 3600 / 1e3) + 1;
		}
		// 处理时间段

	}, {
		key: 'dealTime',
		value: function dealTime() {
			var detail = this.props.detail;


			detail = (0, _simpleAssign2.default)({}, detail);

			var width = void 0;
			var _this = this;
			var newArr = [];

			for (var j in detail) {
				for (var prop in detail[j]) {
					if (prop != '' || detail[j][prop] != '') {
						newArr.push(detail[j]);
					}
				}
			};
			var unique = {};
			newArr.forEach(function (a) {
				unique[JSON.stringify(a)] = 1;
			});
			newArr = Object.keys(unique).map(function (u) {
				return JSON.parse(u);
			});

			var timeList = newArr.map(function (item) {
				item.start = _this.countDays(item.begindate);
				item.end = _this.countDays(item.enddate);
				item.Begindate = (0, _dateformat2.default)(item.begindate, "yyyy.mm.dd");
				item.Enddate = (0, _dateformat2.default)(item.enddate, "yyyy.mm.dd");
				width = (item.end - item.start) / 365; //时间段的长度
				item.width = width * 100 / 100;
				item.left = item.start * 10000 / 365 * 100 / 10000;
				item.left = item.left.toFixed(2);
				item.width = item.width.toFixed(2);
				return item;
			});
			return timeList;
		}
		// 获取分期前的空白时间段

	}, {
		key: 'getSpace',
		value: function getSpace(timeList) {
			var whiteLength = void 0;
			var whiteWidth = timeList[0].start / 365;
			var whiteNode = {
				start: 0,
				end: timeList[0].start,
				width: whiteWidth * 100 / 100
			};
			return whiteNode;
		}
	}, {
		key: 'appendDiv',
		value: function appendDiv(list, time) {
			var nowNode;
			list && list.map(function (item, index) {
				if (index === 0 && item.begindate > time) {
					nowNode = 0;
				}
				if (index === list.length - 1 && item.end < time) {
					nowNode = index + 1;
				}
				if (item.start <= time && item.end >= time) {
					nowNode = index;
				}
			});
			return nowNode;
		}
		// 催款时间和工位变更时间节点位置（px）

	}, {
		key: 'timeNode',
		value: function timeNode(date) {
			var days = this.countDays(date);
			var marginLeft = days / 365;
			marginLeft = Math.round(marginLeft * 100) / 100;
			return marginLeft;
		}
		// 获取相同时间节点天数(天)

	}, {
		key: 'getSameTime',
		value: function getSameTime() {
			var that = this;
			var finaBluePointVo = this.renderBlueNode();
			var finaRedPointVo = this.renderRedNode();
			var finaBluePointVoList = [].concat(finaBluePointVo);
			var finaRedPointVoList = [].concat(finaRedPointVo);
			var sameNode = [];

			finaBluePointVo.map(function (item) {
				finaRedPointVo.map(function (value) {
					if (item.pointDay === value.pointDay) {
						var obj = value;
						// obj.arr = [];
						// obj.arr.concat(value.plan);
						var node = _jquery2.default.extend(item, obj);
						sameNode.push(node);
					}
				});
			});
			if (sameNode.length) {
				sameNode.map(function (item) {
					item.pointDay = that.countDays(item.pointDate);
					finaRedPointVoList.map(function (value, index) {
						if (item.pointDay === value.pointDay) {
							finaRedPointVoList.splice(index, 1);
							//console.log('finaRedPointVoList-----', finaRedPointVoList)

						}
					});
				});
			}
			if (sameNode.length) {
				sameNode.map(function (item) {
					item.pointDay = that.countDays(item.pointDate);
					finaBluePointVoList.map(function (value, index) {
						if (item.pointDay === value.pointDay) {
							finaBluePointVoList.splice(index, 1);
						}
					});
				});
			}
			var currentYear = this.props.currentYear;

			var year = currentYear + '/1/1';
			var initial = new Date(year).getTime();
			finaRedPointVoList.map(function (item, index) {
				if (item.pointDate < initial) {
					finaRedPointVoList.splice(index, 1);
				}
			});
			var unique = {};
			sameNode.forEach(function (a) {
				unique[JSON.stringify(a)] = 1;
			});
			sameNode = Object.keys(unique).map(function (u) {
				return JSON.parse(u);
			});
			var NodeList = [sameNode, finaBluePointVoList, finaRedPointVoList];
			return NodeList;
		}
	}, {
		key: 'renderBlueNode',
		value: function renderBlueNode() {
			var finaBluePointVo = this.props.finaBluePointVo;


			var that = this;
			var finaBluePointVoList = finaBluePointVo.map(function (item, index) {
				item.pointDay = that.countDays(item.pointDate);
				item.left = Math.round(that.countDays(item.pointDate) / 365 * 100) / 100 * 100;
				return item;
			});
			return finaBluePointVoList;
		}
	}, {
		key: 'renderRedNode',
		value: function renderRedNode() {
			var finaRedPointVo = this.props.finaRedPointVo;

			var finaRedPointVoList = finaRedPointVo;
			var currentYear = this.props.currentYear;

			var year = currentYear + '-1-1';
			var initial = new Date(year).getTime();

			var that = this;
			var newArr = [];

			for (var j in finaRedPointVoList) {
				finaRedPointVoList[j].pointDay = that.countDays(finaRedPointVoList[j].pointDate);
			};

			for (var _j in finaRedPointVoList) {
				if (finaRedPointVoList[_j].pointDate < initial) {
					finaRedPointVoList.splice(_j, 1);
				}
			};
			return finaRedPointVoList;
		}
	}, {
		key: 'renderwhiteBar',
		value: function renderwhiteBar() {
			var whiteBar = this.props.whiteBar;

			var that = this;
			whiteBar = whiteBar.map(function (item) {
				var days = that.countDays(item);
				var num = days * 10000 / 365 / 10000 * 100;
				return num;
			});
			return whiteBar;
		}
	}, {
		key: 'getRedInfo',
		value: function getRedInfo(data) {
			var _this = this;
			var id = this.props.id;
			var remindDate = (0, _dateformat2.default)(data.pointDate, 'yyyy-mm-dd HH:MM:ss');
			_Redux.Store.dispatch(_Redux.Actions.callAPI('getRedPoint', { billId: id, remindDate: remindDate })).then(function (response) {

				_this.setState({
					infoList: response
				}, function () {
					this.renderRedInfo(data);
				});
			}).catch(function (err) {
				console.log(err, err);
			});
		}
	}, {
		key: 'getBlueInfo',
		value: function getBlueInfo(data) {
			var _this = this;
			var id = this.props.id;
			_Redux.Store.dispatch(_Redux.Actions.callAPI('getBluePoint', { billId: id, detailId: data.detailId })).then(function (response) {

				_this.setState({
					BlueinfoList: response
				}, function () {
					this.renderBlueInfo();
				});
			}).catch(function (err) {
				console.log(err, err);
			});
		}
	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			var _props = this.props,
			    finaBluePointVo = _props.finaBluePointVo,
			    finaRedPointVo = _props.finaRedPointVo,
			    id = _props.id,
			    detail = _props.detail,
			    currentYear = _props.currentYear;

			var that = this;
			if (detail.length) {
				// 获取当前时间
				var timestamp = new Date().getTime();
				var now = this.countDays(timestamp);
				// 处理时间段
				var list = this.dealTime();
				var whiteNode = this.getSpace(list);
				list.unshift(whiteNode);
				var nodeList = this.appendDiv(list, now);
				var redNodeList = this.NodeList[2];
				var blueNodeList = this.NodeList[1];
				var sameNode = this.NodeList[0];
			} else {
				var list = [{
					width: "100%"
				}];
			}
			var whiteBar = this.renderwhiteBar();

			return _react2.default.createElement(
				'div',
				{ className: 'd3-container' },
				_react2.default.createElement(
					'div',
					{ className: 'year' },
					list.length == 2 && list.map(function (item, index) {
						if (index == 0) {
							return _react2.default.createElement(
								'div',
								{ className: 'white', style: { 'width': item.width * 100 + '%' }, key: index },
								item.content ? _react2.default.createElement('span', null) : ''
							);
						} else if (index < nodeList && index !== 0) {
							return _react2.default.createElement(
								'div',
								{ className: 'grey', style: { 'width': item.width * 100 + '%', marginLeft: item.left + '%' }, key: index },
								_react2.default.createElement(
									_krUi.Tooltips,
									{ place: 'top', offsetTop: 40 },
									_react2.default.createElement(
										'div',
										{ className: 'only-one' },
										'\u4E00\u6B21\u6027\u4ED8\u6B3E'
									)
								)
							);
						} else {
							return _react2.default.createElement(
								'div',
								{ className: 'blue', style: { 'width': item.width * 100 + '%', marginLeft: item.left + '%' }, key: index },
								_react2.default.createElement(
									_krUi.Tooltips,
									{ place: 'top', offsetTop: 40 },
									_react2.default.createElement(
										'div',
										{ className: 'only-one' },
										'\u4E00\u6B21\u6027\u4ED8\u6B3E'
									)
								)
							);
						}
					}),
					list.length > 2 && list.map(function (item, index) {
						if (index == 0) {
							return _react2.default.createElement(
								'div',
								{ className: 'white', style: { 'width': item.width * 100 + '%' }, key: index },
								item.content ? _react2.default.createElement('span', null) : ''
							);
						} else if (index < nodeList && index !== 0) {
							return _react2.default.createElement('div', { className: 'grey', style: { 'width': item.width * 100 + '%', marginLeft: item.left + '%' }, key: index });
						} else {
							return _react2.default.createElement('div', { className: 'blue', style: { 'width': item.width * 100 + '%', marginLeft: item.left + '%' }, key: index });
						}
					}),
					whiteBar && whiteBar.map(function (item, index) {
						if (item < 100) {
							return _react2.default.createElement('span', { className: 'wihiteBar', style: { marginLeft: item + '%' }, key: index });
						}
					}),
					blueNodeList && blueNodeList.map(function (item, index) {
						return _react2.default.createElement(
							'span',
							{ className: 'blue-node', key: index, style: { marginLeft: item.left + '%' }, 'data-tip': true, 'data-for': '' + item.pointDate + id + 'sameblue', onMouseOver: _this3.getBlueInfo.bind(_this3, item) },
							_this3.renderBlueInfo()
						);
					}),
					redNodeList && redNodeList.map(function (item, index) {

						var nodeKind = item.color === 1 ? 'grey-circle' : 'red-node';
						var left = _this3.getLeft(item.pointDate);
						var marginLeft = Math.round(item.pointDay / 365 * 100) / 100 * 100;
						if (marginLeft < 0) {
							return;
						}
						return _react2.default.createElement(
							'span',
							{ className: '' + nodeKind, key: index, style: { marginLeft: marginLeft + '%', left: left, position: 'absolute' }, 'data-tip': true, 'data-for': '' + item.pointDate + id, onMouseOver: _this3.getRedInfo.bind(_this3, item) },
							_this3.renderRedInfo(item)
						);
					}),
					sameNode && sameNode.map(function (item, index) {

						var nodeKind = item.color === 1 ? 'grey-circle' : 'red-node';
						return _react2.default.createElement(
							'div',
							{ className: 'same-div', key: index, style: { marginLeft: Math.round(item.pointDay / 365 * 100) / 100 * 100 + '%' } },
							_react2.default.createElement(
								'span',
								{ className: 'blue-node', 'data-tip': true, 'data-for': '' + item.pointDate + item.newStationNum + index + 'sameblue', onMouseOver: _this3.getBlueInfo.bind(_this3, item) },
								_this3.renderBlueInfo()
							),
							_react2.default.createElement(
								'span',
								{ className: '' + nodeKind, 'data-tip': true, 'data-for': '' + item.pointDate + item.newStationNum + index + 'samered', onMouseOver: _this3.getRedInfo.bind(_this3, item) },
								_this3.renderRedInfo(item)
							)
						);
					})
				)
			);
		}
	}]);

	return D3Content;
}(_react.Component);

D3Content.defaultProps = {
	detail: [],
	finaBluePointVo: [],
	finaRedPointVo: [],
	whiteBar: [],
	BlueinfoList: [],
	infoList: []
};
D3Content.propTypes = {
	params: _react2.default.PropTypes.object
};
exports.default = D3Content;