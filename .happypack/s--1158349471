'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reduxForm = require('redux-form');

var _Redux = require('kr/Redux');

var _fetch = require('kr/Redux/Utils/fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _krUi = require('kr-ui');

var _NewCreateForm = require('./NewCreateForm');

var _NewCreateForm2 = _interopRequireDefault(_NewCreateForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditCreate = function (_Component) {
  _inherits(EditCreate, _Component);

  function EditCreate(props, context) {
    _classCallCheck(this, EditCreate);

    var _this2 = _possibleConstructorReturn(this, (EditCreate.__proto__ || Object.getPrototypeOf(EditCreate)).call(this, props, context));

    _this2.onCreateSubmit = _this2.onCreateSubmit.bind(_this2);
    _this2.onCancel = _this2.onCancel.bind(_this2);

    _this2.state = {
      stationVos: [],
      initialValues: {},
      optionValues: {},
      formValues: {},
      openConfirmCreate: false
    };

    _Redux.Store.dispatch((0, _reduxForm.reset)('exitEditForm'));
    return _this2;
  }

  _createClass(EditCreate, [{
    key: 'onCreateSubmit',
    value: function onCreateSubmit(formValues) {
      var params = this.props.params;

      _Redux.Store.dispatch(_Redux.Actions.callAPI('addFnaContractWithdrawal', {}, formValues)).then(function (response) {
        _krUi.Notify.show([{
          message: '编辑成功',
          type: 'success'
        }]);
        location.href = "./#/operation/customerManage/" + params.customerId + "/order/" + params.orderId + "/agreement/exit/" + response.contractId + "/detail";
      }).catch(function (err) {
        _krUi.Notify.show([{
          message: err.message,
          type: 'danger'
        }]);
      });
    }
  }, {
    key: 'onCancel',
    value: function onCancel() {
      window.history.back();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {

      var _this = this;
      var params = this.props.params;

      var initialValues = {};
      var optionValues = {};
      var stationVos = [];

      _Redux.Store.dispatch(_Redux.Actions.callAPI('fina-contract-intention', {
        customerId: params.customerId,
        mainBillId: params.orderId
      })).then(function (response) {

        //initialValues.ContractStateType = 'EXECUTE';

        initialValues.mainbillid = params.orderId;

        initialValues.leaseBegindate = new Date();
        initialValues.leaseEnddate = new Date();

        optionValues.communityAddress = response.customer.communityAddress;
        optionValues.leaseAddress = response.customer.customerAddress;
        //合同类别，枚举类型（1:意向书,2:入住协议,3:增租协议,4.续租协议,5:减租协议,6退租协议）
        initialValues.contracttype = 'QUITRENT';

        optionValues.fnaCorporationList = response.fnaCorporation.map(function (item, index) {
          item.value = item.id;
          item.label = item.corporationName;
          return item;
        });
        optionValues.paymentList = response.payment.map(function (item, index) {
          item.value = item.id;
          item.label = item.dicName;
          return item;
        });
        optionValues.payTypeList = response.payType.map(function (item, index) {
          item.value = item.id;
          item.label = item.dicName;
          return item;
        });

        optionValues.floorList = response.customer.floor;
        optionValues.customerName = response.customer.customerName;
        optionValues.leaseAddress = response.customer.customerAddress;
        optionValues.communityName = response.customer.communityName;
        optionValues.communityId = response.customer.communityid;
        optionValues.mainbillCommunityId = response.mainbillCommunityId || 1;

        _Redux.Store.dispatch(_Redux.Actions.callAPI('getFnaContractWithdrawalById', {
          id: params.id
        })).then(function (response) {

          optionValues.contractFileList = response.contractFileList;
          optionValues.lessorContactName = response.lessorContactName;

          initialValues.id = response.id;
          initialValues.contractstate = response.contractstate;
          initialValues.leaseId = response.leaseId;
          initialValues.contractcode = response.contractcode;
          initialValues.leaseAddress = response.leaseAddress;
          initialValues.lessorContactName = response.lessorContactName;
          initialValues.leaseContact = response.leaseContact;
          initialValues.lessorContacttel = response.lessorContacttel;
          initialValues.leaseContacttel = response.leaseContacttel;
          initialValues.contractVersionType = response.contractVersion;
          if (response.payType) {
            initialValues.paytype = response.payType.id;
          }
          if (response.payment) {
            initialValues.paymodel = response.payment.id;
          }
          initialValues.stationnum = response.stationnum;
          initialValues.wherefloor = response.wherefloor;
          initialValues.rentaluse = response.rentaluse;
          initialValues.contractmark = response.contractmark;
          initialValues.totalrent = response.totalrent;
          initialValues.totaldeposit = response.totaldeposit;
          initialValues.lessorContactid = response.lessorContactid;
          initialValues.depositamount = response.depositamount;
          initialValues.totalreturn = response.totalreturn;
          //时间

          initialValues.signdate = new Date(response.signdate);
          initialValues.leaseBegindate = new Date(response.leaseBegindate);
          initialValues.leaseEnddate = new Date(response.leaseEnddate);
          initialValues.withdrawdate = response.withdrawdate;

          //处理stationvos
          stationVos = response.stationVos;

          _this.setState({
            initialValues: initialValues,
            optionValues: optionValues,
            stationVos: stationVos
          });
        }).catch(function (err) {
          _krUi.Notify.show([{
            message: '后台出错请联系管理员',
            type: 'danger'
          }]);
        });
      }).catch(function (err) {
        _krUi.Notify.show([{
          message: '后台出错请联系管理员',
          type: 'danger'
        }]);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _state = this.state,
          initialValues = _state.initialValues,
          optionValues = _state.optionValues,
          stationVos = _state.stationVos;

      console.log('stationVos', stationVos);
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_krUi.Title, { value: '\u7F16\u8F91\u9000\u79DF\u534F\u8BAE\u4E66_\u8D22\u52A1\u7BA1\u7406' }),
        _react2.default.createElement(_krUi.BreadCrumbs, { children: ['系统运营', '客户管理', '退租协议'] }),
        _react2.default.createElement(
          _krUi.Section,
          { title: '\u9000\u79DF\u534F\u8BAE\u4E66', description: '' },
          _react2.default.createElement(_NewCreateForm2.default, { onSubmit: this.onCreateSubmit, initialValues: initialValues, onCancel: this.onCancel, optionValues: optionValues, stationVos: stationVos })
        )
      );
    }
  }]);

  return EditCreate;
}(_react.Component);

exports.default = EditCreate;