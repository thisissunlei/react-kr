{"version":3,"sources":["src/Components/DatePicker/utils/childUtils.js"],"names":["createChildFragment","extendChildren","fragments","newFragments","validChildrenCount","firstKey","key","currentChild","undefined","children","extendedProps","extendedChildren","Children","map","child","isValidElement","newProps","newChildren","props","cloneElement"],"mappings":";;;;;QAGgBA,mB,GAAAA,mB;QAqBAC,c,GAAAA,c;;AAxBhB;;;;AACA;;;;;;AAEO,SAASD,mBAAT,CAA6BE,SAA7B,EAAwC;AAC7C,MAAMC,eAAe,EAArB;AACA,MAAIC,qBAAqB,CAAzB;AACA,MAAIC,iBAAJ;;AAEA;AACA,OAAK,IAAMC,GAAX,IAAkBJ,SAAlB,EAA6B;AAC3B,QAAMK,eAAeL,UAAUI,GAAV,CAArB;;AAEA,QAAIC,YAAJ,EAAkB;AAChB,UAAIH,uBAAuB,CAA3B,EAA8BC,WAAWC,GAAX;AAC9BH,mBAAaG,GAAb,IAAoBC,YAApB;AACAH;AACD;AACF;;AAED,MAAIA,uBAAuB,CAA3B,EAA8B,OAAOI,SAAP;AAC9B,MAAIJ,uBAAuB,CAA3B,EAA8B,OAAOD,aAAaE,QAAb,CAAP;AAC9B,SAAO,yCAAeF,YAAf,CAAP;AACD;;AAEM,SAASF,cAAT,CAAwBQ,QAAxB,EAAkCC,aAAlC,EAAiDC,gBAAjD,EAAmE;AACxE,SAAO,gBAAMC,QAAN,CAAeC,GAAf,CAAmBJ,QAAnB,EAA6B,UAACK,KAAD,EAAW;AAC7C,QAAI,CAAC,gBAAMC,cAAN,CAAqBD,KAArB,CAAL,EAAkC;AAChC,aAAOA,KAAP;AACD;;AAED,QAAME,WAAW,OAAON,aAAP,KAAyB,UAAzB,GACfA,cAAcI,KAAd,CADe,GACQJ,aADzB;;AAGA,QAAMO,cAAc,OAAON,gBAAP,KAA4B,UAA5B,GAClBA,iBAAiBG,KAAjB,CADkB,GACQH,mBAC1BA,gBAD0B,GACPG,MAAMI,KAAN,CAAYT,QAFjC;;AAIA,WAAO,gBAAMU,YAAN,CAAmBL,KAAnB,EAA0BE,QAA1B,EAAoCC,WAApC,CAAP;AACD,GAbM,CAAP;AAcD;;;;;;;;gCApCejB,mB;;gCAqBAC,c","file":"childUtils.js","sourceRoot":"/Users/tmac_zc/Code/kr-admin","sourcesContent":["import React from 'react';\nimport createFragment from 'react-addons-create-fragment';\n\nexport function createChildFragment(fragments) {\n  const newFragments = {};\n  let validChildrenCount = 0;\n  let firstKey;\n\n  // Only create non-empty key fragments\n  for (const key in fragments) {\n    const currentChild = fragments[key];\n\n    if (currentChild) {\n      if (validChildrenCount === 0) firstKey = key;\n      newFragments[key] = currentChild;\n      validChildrenCount++;\n    }\n  }\n\n  if (validChildrenCount === 0) return undefined;\n  if (validChildrenCount === 1) return newFragments[firstKey];\n  return createFragment(newFragments);\n}\n\nexport function extendChildren(children, extendedProps, extendedChildren) {\n  return React.Children.map(children, (child) => {\n    if (!React.isValidElement(child)) {\n      return child;\n    }\n\n    const newProps = typeof extendedProps === 'function' ?\n      extendedProps(child) : extendedProps;\n\n    const newChildren = typeof extendedChildren === 'function' ?\n      extendedChildren(child) : extendedChildren ?\n      extendedChildren : child.props.children;\n\n    return React.cloneElement(child, newProps, newChildren);\n  });\n}\n\n"]}