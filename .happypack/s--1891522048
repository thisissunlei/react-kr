'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Redux = require('kr/Redux');

var _krUi = require('kr-ui');

var _OrderEditForm = require('./OrderEditForm');

var _OrderEditForm2 = _interopRequireDefault(_OrderEditForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var OrderCreate = function (_Component) {
	_inherits(OrderCreate, _Component);

	function OrderCreate(props, context) {
		_classCallCheck(this, OrderCreate);

		var _this2 = _possibleConstructorReturn(this, (OrderCreate.__proto__ || Object.getPrototypeOf(OrderCreate)).call(this, props, context));

		_this2.onSubmit = function (values) {

			if (_this2.isOk) {
				return false;
			}

			_this2.isOk = true;
			values.customerid = _this2.context.params.customerId;

			var _this = _this2;

			_Redux.Store.dispatch(_Redux.Actions.callAPI('enter-order', {}, values)).then(function (response) {

				_krUi.Notify.show([{
					message: '保存成功',
					type: 'success'
				}]);

				window.setTimeout(function () {
					window.top.location.reload();
					_this.isOk = false;
				}, 100);
			}).catch(function (err) {

				_krUi.Notify.show([{
					message: '创建失败',
					type: 'danger'
				}]);

				window.setTimeout(function () {
					_this.isOk = false;
				}, 0);
			});
		};

		_this2.onCancel = function () {
			window.top.location.reload();
		};

		_this2.getInitValues = function () {
			var _this = _this2;
			var communityOptions = [];
			var initialValues = {};

			var orderTypeOptions = [];
			_Redux.Store.dispatch(_Redux.Actions.callAPI('community-city-selected')).then(function (response) {
				communityOptions = response.communityCity.map(function (item) {
					item.value = String(item.communityId);
					item.label = item.communityName;
					return item;
				});

				orderTypeOptions = response.sysDicPayments.map(function (item) {
					item.value = String(item.id);
					item.label = item.dicName;
					return item;
				});

				_this.setState({
					communityOptions: communityOptions,
					orderTypeOptions: orderTypeOptions
				});
			}).catch(function (err) {});

			_Redux.Store.dispatch(_Redux.Actions.callAPI('get-customName-orderName', {
				customerId: _this2.props.params.customerId
			}, {})).then(function (response) {

				var initialValues = {};
				initialValues = response;
				initialValues.communityid = String(initialValues.communityid);
				_this.setState({
					initialValues: initialValues,
					loading: false
				});
			}).catch(function (err) {
				_krUi.Notify.show([{
					message: err.message,
					type: 'danger'
				}]);
			});
		};

		_this2.isOk = false;

		_this2.state = {
			loading: true,
			communityOptions: [],
			initialValues: {},
			orderTypeOptions: [{
				value: '',
				label: '请选择类型'
			}, {
				value: 'STATION',
				label: '工位服务订单'
			}, {
				value: 'INCUBAZION',
				label: '孵化订单'
			}, {
				value: 'REGISTER',
				label: '注册订单'
			}, {
				value: 'INCUSTOM',
				label: '场内消费订单'
			}, {
				value: 'ACTIVITY',
				label: '广告订单'
			}, {
				value: 'ADDEDSERVICE',
				label: '增值服务订单'
			}, {
				value: 'TRAINING',
				label: '培训订单'
			}, {
				value: 'OTHER',
				label: '其他服务订单'
			}]

		};
		_Redux.Store.dispatch(_Redux.Actions.switchSidebarNav(false));
		_Redux.Store.dispatch(_Redux.Actions.switchHeaderNav(false));

		return _this2;
	}

	_createClass(OrderCreate, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var obj = document.body;
			obj.style.background = '#fff';
			this.getInitValues();
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {}
	}, {
		key: 'render',
		value: function render() {

			if (this.state.loading) {
				return _react2.default.createElement(_krUi.Loading, null);
			}
			var _state = this.state,
			    initialValues = _state.initialValues,
			    communityOptions = _state.communityOptions,
			    orderTypeOptions = _state.orderTypeOptions;


			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(_OrderEditForm2.default, { onSubmit: this.onSubmit, communityOptions: communityOptions, initialValues: initialValues, orderTypeOptions: orderTypeOptions, onCancel: this.onCancel })
			);
		}
	}]);

	return OrderCreate;
}(_react.Component);

// const selector = formValueSelector('orderEditForm');

// function mapStateToProps(state){

// 	let communitys = state.common['community-city-selected'];

// 	if(Object.prototype.toString.call(communitys) !== '[object Array]'){
// 		communitys = [];
// 	}

// 	const communityid = selector(state, 'communityid');

// 	let cityName = '';
// 	communitys.map(function(item){
// 		if(item.communityId == communityid){
// 			cityName = item.cityName;
// 		}
// 	});

// 	return {
// 		cityName,
// 		initialValues:state.common['get-simple-order'],
// 		communitys,
//    	};
// }


// export default connect(mapStateToProps)(OrderCreate);

// }


OrderCreate.contextTypes = {
	params: _react2.default.PropTypes.object.isRequired

};
exports.default = OrderCreate;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(OrderCreate, 'OrderCreate', '/Users/liuyihao/Code/kr-admin/src/Containers/Operation/CustomerManage/Order/Create/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,