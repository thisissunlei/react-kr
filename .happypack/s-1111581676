'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _krUi = require('kr-ui');

var _NewCreateDefinitionForm = require('./NewCreateDefinitionForm');

var _NewCreateDefinitionForm2 = _interopRequireDefault(_NewCreateDefinitionForm);

var _EquipmentAdvancedQueryForm = require('./EquipmentAdvancedQueryForm');

var _EquipmentAdvancedQueryForm2 = _interopRequireDefault(_EquipmentAdvancedQueryForm);

var _BatchUploadImageForm = require('./BatchUploadImageForm');

var _BatchUploadImageForm2 = _interopRequireDefault(_BatchUploadImageForm);

var _EditEquipmentForm = require('./EditEquipmentForm');

var _EditEquipmentForm2 = _interopRequireDefault(_EditEquipmentForm);

var _FinishUploadImgForm = require('./FinishUploadImgForm');

var _FinishUploadImgForm2 = _interopRequireDefault(_FinishUploadImgForm);

var _SingleUploadImgForm = require('./SingleUploadImgForm');

var _SingleUploadImgForm2 = _interopRequireDefault(_SingleUploadImgForm);

var _Redux = require('kr/Redux');

require('./index.less');

var _error = require('./images/error2.png');

var _error2 = _interopRequireDefault(_error);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EquipmentDefinition = function (_Component) {
  _inherits(EquipmentDefinition, _Component);

  function EquipmentDefinition(props, context) {
    _classCallCheck(this, EquipmentDefinition);

    var _this2 = _possibleConstructorReturn(this, (EquipmentDefinition.__proto__ || Object.getPrototypeOf(EquipmentDefinition)).call(this, props, context));

    _this2.onLoaded = function (response) {
      var list = response;
      _this2.setState({
        list: list
      });
    };

    _this2.onOperation = function (itemDetail) {
      _this2.setState({
        itemDetail: itemDetail
      });
    };

    _this2.openOnLineDialog = function () {
      _this2.setState({
        onLineOpen: !_this2.state.onLineOpen
      });
    };

    _this2.openOffLineDialog = function () {
      _this2.setState({
        openOffline: !_this2.state.openOffline
      });
    };

    _this2.openSingleUploadDialog = function (itemDetail) {
      _this2.setState({
        openSingleUpload: !_this2.state.openSingleUpload,
        itemDetail: itemDetail
      });
    };

    _this2.openNewCreateDefinitionDialog = function () {
      _this2.setState({
        openNewCreateDefinition: !_this2.state.openNewCreateDefinition
      });
    };

    _this2.openEquipmentAdvancedQueryDialog = function () {
      _this2.setState({
        openEquipmentAdvancedQuery: !_this2.state.openEquipmentAdvancedQuery
      });
    };

    _this2.openBatchUploadDialog = function () {
      _this2.setState({
        openBatchUpload: !_this2.state.openBatchUpload
      });
    };

    _this2.closeBatchUpload = function () {
      _this2.setState({
        openBatchUpload: false
      });
    };

    _this2.openEditEquipmentDialog = function (item) {
      _this2.setState({
        openEditEquipment: !_this2.state.openEditEquipment,
        itemDetail: item

      });
    };

    _this2.openFinishUploadDialog = function () {
      _this2.setState({
        openFinishUpload: !_this2.state.openFinishUpload
      });
    };

    _this2.openFinishUploadDialogLast = function () {
      _this2.setState({
        openFinishUpload: true
      });
    };

    _this2.tipOpen = function () {
      var _this = _this2;
      _this.setState({
        openTipWarn: true,
        tipText: "请上传图片!"
      });
      setTimeout(function () {
        _this.setState({
          openTipWarn: false
        });
      }, 3000);
    };

    _this2.tipCommunityOpen = function () {
      var _this = _this2;
      _this.setState({
        openTipWarn: true,
        tipText: "请选择社区!"
      });
      setTimeout(function () {
        _this.setState({
          openTipWarn: false
        });
      }, 3000);
    };

    _this2.onSearchSubmit = function (value) {
      if (value.filter == "deviceCode") {
        _this2.setState({
          filter: value.filter,
          content: value.content,
          equipmentParams: {
            deviceCode: value.content
          }
        });
      } else {
        _this2.setState({
          filter: value.filter,
          content: value.content,
          equipmentParams: {
            hardwareId: value.content
          }
        });
      }
    };

    _this2.onEquipmentAdvanceSearchReset = function () {
      _this2.refs.inputFilter.refs.realInput.value = "";
      _this2.setState({
        filter: 'deviceCode',
        content: '',
        equipmentParams: {
          deviceCode: ""
        }
      });
    };

    _this2.onEquipmentAdvanceSearchSubmit = function (values) {
      _this2.refs.inputFilter.refs.realInput.value = "";
      var _this = _this2;
      _this2.openEquipmentAdvancedQueryDialog();
      if (values.type == "hardwareId") {
        _this.setState({
          filter: "deviceCode",
          content: "",
          equipmentParams: {
            communityId: values.communityId || "",
            hardwareId: values.value || "",
            floor: values.floor || "",
            functionId: values.functionId || "",
            propertyId: values.propertyId || "",
            typeId: values.typeId || ""
          }
        });
      } else {
        _this.setState({
          filter: "deviceCode",
          content: "",
          timer: new Date(),
          equipmentParams: {
            communityId: values.communityId || "",
            deviceCode: values.value || "",
            floor: values.floor || "",
            functionId: values.functionId || "",
            propertyId: values.propertyId || "",
            typeId: values.typeId || ""
          }
        });
      }
      if (!values.value) {

        _this2.refs.inputFilter.refs.realInput.value = "";
        _this.setState({
          filter: "deviceCode"
        });
      }
    };

    _this2.onBatchUpload = function (values) {
      var _this = _this2;
      if (!values.uploadImage) {
        _this2.tipOpen();
        return;
      }
      if (!values.communitys) {
        _this2.tipCommunityOpen();
        return;
      }
    };

    _this2.isDoorNumHas = function () {
      console.log("在index已经执行");
      var _this = _this2;
      _this.setState({
        openTipWarn: true,
        tipText: "门编号已经存在!"
      });
      setTimeout(function () {
        _this.setState({
          openTipWarn: false
        });
      }, 3000);
    };

    _this2.hardwareIdHas = function () {
      var _this = _this2;
      _this.setState({
        openTipWarn: true,
        tipText: "硬件ID已经存在!"
      }, function () {});
      setTimeout(function () {
        _this.setState({
          openTipWarn: false
        });
      }, 3000);
    };

    _this2.seleletZero = function () {
      var _this = _this2;
      _this.setState({
        openTipWarn: true,
        tipText: "您选择的设备不存在，请重新选择!"
      });
      setTimeout(function () {
        _this.setState({
          openTipWarn: false
        });
      }, 3000);
    };

    _this2.onSubmitNewCreateEquipment = function (values) {

      if (!values.locationId) {
        values.locationId = 0;
      }
      var _this = _this2;
      _Redux.Store.dispatch(_Redux.Actions.callAPI('equipmentNewCreateOrEdit', {}, values)).then(function (response) {
        if (values.id) {
          _krUi.Message.success("编辑设备成功");
        } else {
          _krUi.Message.success("新增设备成功");
        }
        _this.setState({
          openEditEquipment: false,
          openNewCreateDefinition: false,
          equipmentParams: {
            deviceCode: "",
            page: 1,
            pageSize: 15,
            timer: new Date()
          }
        });
      }).catch(function (err) {
        _krUi.Message.error(err.message);
        _this.setState({
          openEditEquipment: false,
          openNewCreateDefinition: false,
          equipmentParams: {
            deviceCode: "",
            page: 1,
            pageSize: 15,
            timer: new Date()
          }
        });
      });
    };

    _this2.onlineOrOffline = function (itemData) {
      _this2.openOnLineDialog();
      _this2.setState({
        onlineOfflineParams: {
          deviceId: itemData.id,
          status: "ONLINE"
        }
      });
    };

    _this2.offlineOrOnline = function (itemData) {
      _this2.openOffLineDialog();
      _this2.setState({
        onlineOfflineParams: {
          deviceId: itemData.id,
          status: "OFFLINE"
        }
      });
    };

    _this2.confirmOnline = function () {
      var _this = _this2;
      var onlineOfflineParams = _this2.state.onlineOfflineParams;
      _Redux.Store.dispatch(_Redux.Actions.callAPI('onlineOrOffline', {}, onlineOfflineParams)).then(function (response) {
        _krUi.Message.success("上线成功");
        _this.setState({
          onLineOpen: false,
          openOffline: false,
          equipmentParams: {
            filter: "deviceCode",
            content: '',
            page: 1,
            pageSize: 15,
            timer: new Date()
          }
        });
      }).catch(function (err) {
        _krUi.Message.error(err.message);
        _this.setState({
          onLineOpen: false,
          openOffline: false,
          equipmentParams: {
            filter: "deviceCode",
            content: '',
            page: 1,
            pageSize: 15,
            timer: new Date()
          }
        });
      });
    };

    _this2.confirmOffline = function () {
      var _this = _this2;

      var onlineOfflineParams = _this2.state.onlineOfflineParams;
      _Redux.Store.dispatch(_Redux.Actions.callAPI('onlineOrOffline', {}, onlineOfflineParams)).then(function (response) {
        _krUi.Message.success("下线成功");
        _this.setState({
          onLineOpen: false,
          openOffline: false,
          equipmentParams: {
            filter: "deviceCode",
            content: '',
            page: 1,
            pageSize: 15,
            timer: new Date()
          }
        });
      }).catch(function (err) {
        _krUi.Message.error(err.message);
        _this.setState({
          onLineOpen: false,
          openOffline: false,
          equipmentParams: {
            filter: "deviceCode",
            content: '',
            page: 1,
            pageSize: 15,
            timer: new Date()
          }
        });
      });
    };

    _this2.state = {
      openNewCreateDefinition: false,
      openEquipmentAdvancedQuery: false,
      openBatchUpload: false,
      openEditEquipment: false,
      openFinishUpload: false,
      onLineOpen: false,
      openOffline: false,
      openSingleUpload: false,

      singleRequestURI: '',
      filter: 'deviceCode',
      content: '',
      openTipWarn: false,
      tipText: "",
      onLined: false,
      timer: '',
      itemDetail: {},
      equipmentParams: {
        filter: "deviceCode",
        content: '',
        page: 1,
        pageSize: 15
      },
      onlineOfflineParams: {}
    };
    return _this2;
  }
  //操作相关

  // 是否打开上线确认窗口

  // 是否打开下线确认窗口

  // 是否打开单张上传图片

  // 是否打开新增设备定义

  // 是否打开高级搜索

  // 是否打开批量上传图片

  // 关闭批量上传

  // 是否打开编辑

  // 是否打开上传图片完成

  // 最终必须打开成功/失败的Table

  // 是否打开提示上传图片

  // 是否打开提示选择社区

  // 查询


  // 高级查询重置

  // 设备高级查询提交

  // 提交---批量上传

  //校验门编号存在

  // 硬件ID已经存在，则提示窗口显示

  //  并没有选择社区 

  // 提交---->新建


  // 打开上线

  // 打开下线

  // 最终确定确定上线

  // 最终确定下线


  _createClass(EquipmentDefinition, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state = this.state,
          list = _state.list,
          itemDetail = _state.itemDetail,
          seleced = _state.seleced,
          openTipWarn = _state.openTipWarn,
          tipText = _state.tipText;

      var options = [{
        label: "门编号",
        value: "deviceCode"
      }, {
        label: "硬件编号",
        value: "hardwareId"
      }];
      return _react2.default.createElement(
        'div',
        { style: { minHeight: '910', backgroundColor: "#fff" } },
        _react2.default.createElement(
          'div',
          { className: 'uploadWarn', style: { display: openTipWarn ? "block" : "none" } },
          _react2.default.createElement('img', { src: _error2.default, className: 'tipImg' }),
          tipText
        ),
        _react2.default.createElement(_krUi.Title, { value: '\u8BBE\u5907\u5B9A\u4E49 ' }),
        _react2.default.createElement(
          _krUi.Section,
          { title: '\u8BBE\u5907\u5B9A\u4E49', description: '' },
          _react2.default.createElement(
            'form',
            { name: 'searchForm', className: 'searchForm searchList', style: { marginBottom: 10, height: 45 } },
            _react2.default.createElement(
              _krUi.Grid,
              null,
              _react2.default.createElement(
                _krUi.Row,
                null,
                _react2.default.createElement(
                  _krUi.ListGroup,
                  null,
                  _react2.default.createElement(
                    _krUi.ListGroupItem,
                    null,
                    _react2.default.createElement(_krUi.Button, { label: '\u65B0\u589E\u5B9A\u4E49', onTouchTap: this.openNewCreateDefinitionDialog })
                  ),
                  _react2.default.createElement(
                    _krUi.ListGroupItem,
                    { style: { marginLeft: 10 } },
                    _react2.default.createElement(_krUi.Button, { label: '\u6279\u91CF\u4E0A\u4F20\u56FE\u7247', onTouchTap: this.openBatchUploadDialog, style: { width: 100, height: 30 } })
                  ),
                  _react2.default.createElement(
                    _krUi.ListGroupItem,
                    { style: { float: 'right' } },
                    _react2.default.createElement(_krUi.Button, { type: 'search', searchClick: this.openEquipmentAdvancedQueryDialog,
                      searchStyle: { marginLeft: '30', marginTop: '10', display: 'inline-block', float: 'right' }
                    }),
                    _react2.default.createElement(_krUi.SearchForms, { onSubmit: this.onSearchSubmit, ref: 'inputFilter',
                      style: { marginTop: 5, zIndex: 10000 },
                      content: this.state.content,
                      searchFilter: options
                    })
                  )
                )
              )
            )
          ),
          _react2.default.createElement(
            _krUi.Table,
            {
              className: 'member-list-table',
              style: { marginTop: 10, position: 'inherit' },
              onLoaded: this.onLoaded,
              ajax: true,
              onProcessData: function onProcessData(state) {
                return state;
              },
              onOperation: this.onOperation,
              exportSwitch: false,
              onExport: this.onExport,
              ajaxFieldListName: 'items',
              ajaxUrlName: 'equipmentList',
              ajaxParams: this.state.equipmentParams
            },
            _react2.default.createElement(
              _krUi.TableHeader,
              null,
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u793E\u533A\u540D\u79F0'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u5C55\u793A\u6807\u9898'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u95E8\u7F16\u53F7'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u667A\u80FD\u786C\u4EF6ID'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u7C7B\u578B'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u5C5E\u6027'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u5BF9\u5E94\u529F\u80FD'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u662F\u5426\u4E0A\u7EBF'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u8FDE\u63A5\u72B6\u6001'
              ),
              _react2.default.createElement(
                _krUi.TableHeaderColumn,
                null,
                '\u64CD\u4F5C'
              )
            ),
            _react2.default.createElement(
              _krUi.TableBody,
              { style: { position: 'inherit' } },
              _react2.default.createElement(
                _krUi.TableRow,
                { displayCheckbox: true },
                _react2.default.createElement(_krUi.TableRowColumn, { name: 'communityName',
                  component: function component(value, oldValue) {
                    if (value == "") {
                      value = "-";
                    }
                    return _react2.default.createElement(
                      'span',
                      null,
                      value
                    );
                  }
                }),
                _react2.default.createElement(_krUi.TableRowColumn, { style: { width: 160, overflow: "visible" }, name: 'showTitle', component: function component(value, oldValue) {
                    var TooltipStyle = "";
                    if (value.length == "") {
                      TooltipStyle = "none";
                    } else {
                      TooltipStyle = "block";
                    }
                    return _react2.default.createElement(
                      'div',
                      { style: { display: TooltipStyle, paddingTop: 5 }, className: 'financeDetail-hover' },
                      _react2.default.createElement(
                        'span',
                        { className: 'tableOver', style: { maxWidth: 160, display: "inline-block", overflowX: "hidden", textOverflow: " ellipsis", whiteSpace: " nowrap" } },
                        value
                      ),
                      _react2.default.createElement(
                        _krUi.Tooltip,
                        { offsetTop: 5, place: 'top' },
                        value
                      )
                    );
                  } }),
                _react2.default.createElement(_krUi.TableRowColumn, { name: 'deviceCode', style: { overflow: "hidden" },
                  component: function component(value, oldValue) {
                    if (value == "") {
                      value = "-";
                    }
                    return _react2.default.createElement(
                      'span',
                      null,
                      value
                    );
                  }
                }),
                _react2.default.createElement(_krUi.TableRowColumn, { style: { width: 160, overflow: "visible" }, name: 'hardwareId', component: function component(value, oldValue) {
                    var TooltipStyle = "";
                    if (value.length == "") {
                      TooltipStyle = "none";
                    } else {
                      TooltipStyle = "block";
                    }
                    return _react2.default.createElement(
                      'div',
                      { style: { display: TooltipStyle, paddingTop: 5 }, className: 'financeDetail-hover' },
                      _react2.default.createElement(
                        'span',
                        { className: 'tableOver', style: { maxWidth: 160, display: "inline-block", overflowX: "hidden", textOverflow: " ellipsis", whiteSpace: " nowrap" } },
                        value
                      ),
                      _react2.default.createElement(
                        _krUi.Tooltip,
                        { offsetTop: 5, place: 'top' },
                        value
                      )
                    );
                  } }),
                _react2.default.createElement(_krUi.TableRowColumn, { name: 'typeName',
                  component: function component(value, oldValue) {
                    if (value == "") {
                      value = "-";
                    }
                    return _react2.default.createElement(
                      'span',
                      null,
                      value
                    );
                  }
                }),
                _react2.default.createElement(_krUi.TableRowColumn, { name: 'propertyName',
                  component: function component(value, oldValue) {
                    if (value == "") {
                      value = "-";
                    }
                    return _react2.default.createElement(
                      'span',
                      null,
                      value
                    );
                  }
                }),
                _react2.default.createElement(_krUi.TableRowColumn, { name: 'functionName',
                  component: function component(value, oldValue) {
                    if (value == "") {
                      value = "-";
                    }
                    return _react2.default.createElement(
                      'span',
                      null,
                      value
                    );
                  }
                }),
                _react2.default.createElement(_krUi.TableRowColumn, { name: 'enable',
                  component: function component(value, oldValue) {
                    var spanColorOnline = "";
                    if (value == "OFFLINE") {
                      value = "未上线";
                      spanColorOnline = "#ff6868";
                    } else if (value == "ONLINE") {
                      value = "已上线";
                    }
                    return _react2.default.createElement(
                      'span',
                      { style: { color: spanColorOnline } },
                      value
                    );
                  } }),
                _react2.default.createElement(_krUi.TableRowColumn, { name: 'activityTypeId',
                  component: function component(value, oldValue) {
                    var spanColor = "";
                    if (value == "UNLINK") {
                      value = "未连接";
                      spanColor = "#ff6868";
                    } else if (value == "LINK") {
                      value = "已连接";
                    }
                    return _react2.default.createElement(
                      'span',
                      { style: { color: spanColor } },
                      value
                    );
                  } }),
                _react2.default.createElement(_krUi.TableRowColumn, { type: 'operation', name: 'enable', options: [{ label: '已上线', value: 'ONLINE' }, { label: '未上线', value: 'OFFLINE' }],

                  component: function component(value, oldValue, itemData) {
                    if (value == "未上线") {
                      return _react2.default.createElement(
                        'span',
                        null,
                        _react2.default.createElement(_krUi.Button, { label: '\u4E0A\u7EBF', type: 'operation', operation: 'online', onClick: _this3.onlineOrOffline.bind(_this3, itemData) }),
                        _react2.default.createElement(_krUi.Button, { label: '\u7F16\u8F91', type: 'operation', operation: 'edit', onClick: _this3.openEditEquipmentDialog.bind(_this3, itemData) }),
                        _react2.default.createElement(_krUi.Button, { label: '\u4E0A\u4F20\u56FE\u7247', type: 'operation', operation: 'singleUpload', onClick: _this3.openSingleUploadDialog.bind(_this3, itemData) })
                      );
                    }
                    if (value == "已上线") {
                      return _react2.default.createElement(
                        'span',
                        null,
                        _react2.default.createElement(_krUi.Button, { label: '\u4E0B\u7EBF', type: 'operation', operation: 'offline', onClick: _this3.offlineOrOnline.bind(_this3, itemData) }),
                        _react2.default.createElement(_krUi.Button, { label: '\u4E0A\u4F20\u56FE\u7247', type: 'operation', operation: 'singleUpload', onClick: _this3.openSingleUploadDialog.bind(_this3, itemData) })
                      );
                    }
                  } })
              )
            ),
            _react2.default.createElement(_krUi.TableFooter, null)
          )
        ),
        _react2.default.createElement(
          _krUi.Dialog,
          {
            title: '\u65B0\u589E\u8BBE\u5907\u5B9A\u4E49',
            open: this.state.openNewCreateDefinition,
            onClose: this.openNewCreateDefinitionDialog,
            contentStyle: { width: 687 }
          },
          _react2.default.createElement(_NewCreateDefinitionForm2.default, {
            onCancel: this.openNewCreateDefinitionDialog,
            style: { paddingTop: '35px' },
            onSubmit: this.onSubmitNewCreateEquipment,
            isDoorNumHas: this.isDoorNumHas,
            hardwareIdHas: this.hardwareIdHas,
            saveAndNewCreate: this.saveAndNewCreate
          })
        ),
        _react2.default.createElement(
          _krUi.Dialog,
          {
            title: '\u7F16\u8F91\u8BBE\u5907',
            open: this.state.openEditEquipment,
            onClose: this.openEditEquipmentDialog,
            contentStyle: { width: 687 }
          },
          _react2.default.createElement(_EditEquipmentForm2.default, {
            detail: itemDetail,
            onSubmit: this.onSubmitNewCreateEquipment,
            isDoorNumHas: this.isDoorNumHas,
            hardwareIdHas: this.hardwareIdHas,
            saveAndNewCreate: this.saveAndNewCreate,
            closeEditEquipment: this.openEditEquipmentDialog
          })
        ),
        _react2.default.createElement(
          _krUi.Dialog,
          {
            title: '\u9AD8\u7EA7\u67E5\u8BE2',
            open: this.state.openEquipmentAdvancedQuery,
            onClose: this.openEquipmentAdvancedQueryDialog,
            contentStyle: { width: 687 }
          },
          _react2.default.createElement(_EquipmentAdvancedQueryForm2.default, {
            onSubmit: this.onEquipmentAdvanceSearchSubmit,
            onReset: this.onEquipmentAdvanceSearchReset,
            params: this.params,
            onCancel: this.openEquipmentAdvancedQueryDialog,
            onFilterState: this.onFilterState,
            style: { marginTop: 37 },
            content: this.state.content,
            filter: this.state.filter
          })
        ),
        _react2.default.createElement(
          _krUi.Dialog,
          {
            title: '\u6279\u91CF\u4E0A\u4F20\u56FE\u7247',
            open: this.state.openBatchUpload,
            onClose: this.openBatchUploadDialog,
            contentStyle: { width: 687 }
          },
          _react2.default.createElement(_BatchUploadImageForm2.default, {
            tipCommunityOpen: this.tipCommunityOpen,
            tipOpen: this.tipOpen,
            onCancel: this.openBatchUploadDialog,
            onSubmit: this.onBatchUpload,
            seleletZero: this.seleletZero,
            closeBatchUpload: this.closeBatchUpload,
            openFinishTable: this.openFinishUploadDialogLast,
            finishUpload: this.finishUpload
          })
        ),
        _react2.default.createElement(
          _krUi.Dialog,
          {
            title: '\u4E0A\u4F20\u56FE\u7247',
            open: this.state.openFinishUpload,
            onClose: this.openFinishUploadDialog,
            contentStyle: { width: 687 }
          },
          _react2.default.createElement(_FinishUploadImgForm2.default, {
            closeUploadImg: this.openFinishUploadDialog,
            onCancel: this.openFinishUploadDialog
          })
        ),
        _react2.default.createElement(
          _krUi.Dialog,
          {
            title: '\u63D0\u793A',
            open: this.state.onLineOpen,
            onClose: this.openOnLineDialog,
            contentStyle: { width: 443, height: 236 }
          },
          _react2.default.createElement(
            'div',
            { style: { marginTop: 45 } },
            _react2.default.createElement(
              'p',
              { style: { textAlign: "center", color: "#333333", fontSize: 14 } },
              '\u786E\u5B9A\u8981\u4E0A\u7EBF\u5417\uFF1F'
            ),
            _react2.default.createElement(
              _krUi.Grid,
              { style: { marginTop: 60, marginBottom: '4px' } },
              _react2.default.createElement(
                _krUi.Row,
                null,
                _react2.default.createElement(
                  _krUi.ListGroup,
                  null,
                  _react2.default.createElement(
                    _krUi.ListGroupItem,
                    { style: { width: 175, textAlign: 'right', padding: 0, paddingRight: 15 } },
                    _react2.default.createElement(_krUi.Button, { label: '\u786E\u5B9A', type: 'submit', onClick: this.confirmOnline })
                  ),
                  _react2.default.createElement(
                    _krUi.ListGroupItem,
                    { style: { width: 175, textAlign: 'left', padding: 0, paddingLeft: 15 } },
                    _react2.default.createElement(_krUi.Button, { label: '\u53D6\u6D88', type: 'button', cancle: true, onTouchTap: this.openOnLineDialog })
                  )
                )
              )
            )
          )
        ),
        _react2.default.createElement(
          _krUi.Dialog,
          {
            title: '\u63D0\u793A',
            open: this.state.openOffline,
            onClose: this.openOffLineDialog,
            contentStyle: { width: 443, height: 236 }
          },
          _react2.default.createElement(
            'div',
            { style: { marginTop: 45 } },
            _react2.default.createElement(
              'p',
              { style: { textAlign: "center", color: "#333333", fontSize: 14 } },
              '\u786E\u5B9A\u8981\u4E0B\u7EBF\u5417\uFF1F'
            ),
            _react2.default.createElement(
              _krUi.Grid,
              { style: { marginTop: 60, marginBottom: '4px' } },
              _react2.default.createElement(
                _krUi.Row,
                null,
                _react2.default.createElement(
                  _krUi.ListGroup,
                  null,
                  _react2.default.createElement(
                    _krUi.ListGroupItem,
                    { style: { width: 175, textAlign: 'right', padding: 0, paddingRight: 15 } },
                    _react2.default.createElement(_krUi.Button, { label: '\u786E\u5B9A', type: 'submit', onClick: this.confirmOffline })
                  ),
                  _react2.default.createElement(
                    _krUi.ListGroupItem,
                    { style: { width: 175, textAlign: 'left', padding: 0, paddingLeft: 15 } },
                    _react2.default.createElement(_krUi.Button, { label: '\u53D6\u6D88', type: 'button', cancle: true, onTouchTap: this.openOffLineDialog })
                  )
                )
              )
            )
          )
        ),
        _react2.default.createElement(
          _krUi.Dialog,
          {
            title: '\u4E0A\u4F20\u56FE\u7247',
            open: this.state.openSingleUpload,
            onClose: this.openSingleUploadDialog,
            contentStyle: { width: 443 }
          },
          _react2.default.createElement(_SingleUploadImgForm2.default, {
            tipOpen: this.tipOpen,
            detail: itemDetail,
            onCancel: this.openSingleUploadDialog,
            openSingleUploadDialog: this.openSingleUploadDialog
          })
        )
      );
    }
  }]);

  return EquipmentDefinition;
}(_react.Component);

exports.default = EquipmentDefinition;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(EquipmentDefinition, 'EquipmentDefinition', '/Users/dongfanai/Desktop/project/kr-admin/src/Containers/Operation/BasicConfig/EquipmentDefinition/index.js');
}();

;