{"version":3,"sources":["src/Components/DatePicker/internal/AutoLockScrolling.js"],"names":["originalBodyOverflow","lockingCounter","AutoLockScrolling","locked","props","lock","preventScrolling","nextProps","allowScrolling","body","document","getElementsByTagName","style","overflow","propTypes","bool","isRequired"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA,IAAIA,uBAAuB,IAA3B;AACA,IAAIC,iBAAiB,CAArB;;IAEMC,iB;;;;;;;;;;;;;;4MA0BJC,M,GAAS,K;;;;;wCArBW;AAClB,UAAI,KAAKC,KAAL,CAAWC,IAAX,KAAoB,IAAxB,EAA8B;AAC5B,aAAKC,gBAAL;AACD;AACF;;;8CAEyBC,S,EAAW;AACnC,UAAI,KAAKH,KAAL,CAAWC,IAAX,KAAoBE,UAAUF,IAAlC,EAAwC;AACtC,YAAIE,UAAUF,IAAd,EAAoB;AAClB,eAAKC,gBAAL;AACD,SAFD,MAEO;AACL,eAAKE,cAAL;AACD;AACF;AACF;;;2CAEsB;AACrB,WAAKA,cAAL;AACD;;AAED;;;;uCAGmB;AACjB,UAAI,KAAKL,MAAL,KAAgB,IAApB,EAA0B;AACxB;AACD;;AAEDF,uBAAiBA,iBAAiB,CAAlC;AACA,WAAKE,MAAL,GAAc,IAAd;;AAEA;AACA,UAAIF,mBAAmB,CAAvB,EAA0B;AACxB,YAAMQ,OAAOC,SAASC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAb;AACAX,+BAAuBS,KAAKG,KAAL,CAAWC,QAAlC;AACAJ,aAAKG,KAAL,CAAWC,QAAX,GAAsB,QAAtB;AACD;AACF;;;qCAEgB;AACf,UAAI,KAAKV,MAAL,KAAgB,IAApB,EAA0B;AACxBF,yBAAiBA,iBAAiB,CAAlC;AACA,aAAKE,MAAL,GAAc,KAAd;AACD;;AAED,UAAIF,mBAAmB,CAAnB,IAAwBD,yBAAyB,IAArD,EAA2D;AACzD,YAAMS,OAAOC,SAASC,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,CAAb;AACAF,aAAKG,KAAL,CAAWC,QAAX,GAAsBb,wBAAwB,EAA9C;AACAA,+BAAuB,IAAvB;AACD;AACF;;;6BAEQ;AACP,aAAO,IAAP;AACD;;;;;;AA3DGE,iB,CACGY,S,GAAY;AACjBT,QAAM,iBAAUU,IAAV,CAAeC;AADJ,C;eA6DNd,iB;;;;;;;;;gCAjEXF,oB;;gCACAC,c;;gCAEEC,iB","file":"AutoLockScrolling.js","sourceRoot":"/Users/tmac_zc/Code/kr-admin","sourcesContent":["import {Component, PropTypes} from 'react';\n\nlet originalBodyOverflow = null;\nlet lockingCounter = 0;\n\nclass AutoLockScrolling extends Component {\n  static propTypes = {\n    lock: PropTypes.bool.isRequired,\n  };\n\n  componentDidMount() {\n    if (this.props.lock === true) {\n      this.preventScrolling();\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.lock !== nextProps.lock) {\n      if (nextProps.lock) {\n        this.preventScrolling();\n      } else {\n        this.allowScrolling();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.allowScrolling();\n  }\n\n  // force to only lock/unlock once\n  locked = false;\n\n  preventScrolling() {\n    if (this.locked === true) {\n      return;\n    }\n\n    lockingCounter = lockingCounter + 1;\n    this.locked = true;\n\n    // only lock the first time the component is mounted.\n    if (lockingCounter === 1) {\n      const body = document.getElementsByTagName('body')[0];\n      originalBodyOverflow = body.style.overflow;\n      body.style.overflow = 'hidden';\n    }\n  }\n\n  allowScrolling() {\n    if (this.locked === true) {\n      lockingCounter = lockingCounter - 1;\n      this.locked = false;\n    }\n\n    if (lockingCounter === 0 && originalBodyOverflow !== null) {\n      const body = document.getElementsByTagName('body')[0];\n      body.style.overflow = originalBodyOverflow || '';\n      originalBodyOverflow = null;\n    }\n  }\n\n  render() {\n    return null;\n  }\n}\n\nexport default AutoLockScrolling;\n"]}