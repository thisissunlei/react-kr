'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _PlanMap = require('./Lib/PlanMap');

var _PlanMap2 = _interopRequireDefault(_PlanMap);

var _Redux = require('kr/Redux');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PlanMapComponent = function (_React$Component) {
	_inherits(PlanMapComponent, _React$Component);

	function PlanMapComponent(props) {
		_classCallCheck(this, PlanMapComponent);

		var _this2 = _possibleConstructorReturn(this, (PlanMapComponent.__proto__ || Object.getPrototypeOf(PlanMapComponent)).call(this, props));

		_this2.onCheckedStation = function (clickStation, selectedStations) {
			var onCheckedStation = _this2.props.onCheckedStation;

			onCheckedStation && onCheckedStation(clickStation, selectedStations);
		};

		_this2.swapStationStaff = function (originStation, targetStation) {
			console.log('---<<', originStation, targetStation);
		};

		_this2.drawCanvas = function () {
			var _this2$state = _this2.state,
			    configs = _this2$state.configs,
			    plugns = _this2$state.plugns;

			var planMap = new _PlanMap2.default('planMapCanvas', configs, plugns);
		};

		_this2.initializeStyle = function () {
			var planMapWrap = _this2.refs.planMapWrap;

			var loc = planMapWrap.getBoundingClientRect();
			var configs = _this2.state.configs;
			configs.width = loc.width;
			configs.height = 800;

			_this2.setState({
				configs: configs
			}, function () {
				this.drawCanvas();
			});
		};

		_this2.getBasicInfo = function () {

			var _this = _this2;
			_Redux.Store.dispatch(_Redux.Actions.callAPI('planMap', (0, _simpleAssign2.default)({}, _this2.props))).then(function (response) {
				var data = response.shift();
				var stationsDataOrigin = data.figures;
				var stations = [];
				stations = stationsDataOrigin.map(function (item, index) {
					var obj = {};
					var cellcoord = item.cellcoord;
					cellcoord = cellcoord.split(',');
					var x = cellcoord.shift().split(':').pop();
					var y = cellcoord.pop().split(':').pop();

					obj.x = x;
					obj.y = y;

					obj.width = item.cellwidth;
					obj.height = item.cellheight;
					obj.name = item.cellname;
					obj.basic = {
						name: item.cellname,
						id: 'yay'
					};
					return obj;
				});

				var configs = {
					width: 0,
					height: 0,
					stations: stations,
					backgroundImage: 'http://optest02.krspace.cn' + data.bgfilepath
				};
				_this.setState({ configs: configs }, function () {
					this.initializeStyle();
				});
			}).catch(function (error) {});
		};

		_this2.state = {
			configs: {},
			plugns: {
				onCheckedStation: _this2.onCheckedStation,
				swapStationStaff: _this2.swapStationStaff
			}
		};

		return _this2;
	}

	//点选工位

	//交换工位员工信息


	_createClass(PlanMapComponent, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.getBasicInfo();
			window.addEventListener("resize", function () {
				//this.initializeStyle();
			}, false);
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {}
	}, {
		key: 'render',
		value: function render() {

			return _react2.default.createElement(
				'div',
				{ ref: 'planMapWrap' },
				_react2.default.createElement('canvas', { id: 'planMapCanvas' })
			);
		}
	}]);

	return PlanMapComponent;
}(_react2.default.Component);

PlanMapComponent.displayName = 'PlanMapComponent';
PlanMapComponent.defaultProps = {
	communityId: 4,
	wherefloor: 3,
	mainBillId: 521,
	startDate: '2016-12-30',
	endDate: '2016-12-31',
	contractId: ''
};
PlanMapComponent.propTypes = {
	communityId: _react2.default.PropTypes.any,
	wherefloor: _react2.default.PropTypes.any,
	mainBillId: _react2.default.PropTypes.any,
	startDate: _react2.default.PropTypes.string,
	endDate: _react2.default.PropTypes.string,
	contractId: _react2.default.PropTypes.any,
	//选中的工位
	checkedStations: _react2.default.PropTypes.array
};
exports.default = PlanMapComponent;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(PlanMapComponent, 'PlanMapComponent', '/Users/liuyihao/Code/kr-admin/src/Components/PlanMap/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,