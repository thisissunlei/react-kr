'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Utils = require('kr/Utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KrForm = function (_React$Component) {
  _inherits(KrForm, _React$Component);

  _createClass(KrForm, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        blur: this.blur,
        focus: this.focus,
        error: this.error,
        change: this.change,
        initializeValidations: this.initializeValidations,
        initializeField: this.initializeField,
        syncErrors: this.state.syncErrors,
        fields: this.state.fields,
        values: this.state.values
      };
    }
  }]);

  function KrForm(props, context) {
    _classCallCheck(this, KrForm);

    var _this2 = _possibleConstructorReturn(this, (KrForm.__proto__ || Object.getPrototypeOf(KrForm)).call(this, props, context));

    _this2.error = function (fieldName) {
      var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var syncErrors = _this2.state.syncErrors;

      syncErrors[fieldName] = message;

      _this2.setState({
        syncErrors: syncErrors
      });
    };

    _this2.blur = function (name) {
      var fields = _this2.state.fields;


      var fieldsItem = fields[name] || {};
      fieldsItem.touched = true;
      fieldsItem.active = false;

      fields[name] = fieldsItem;

      _this2.setState({
        fields: fields
      });
    };

    _this2.focus = function (name) {
      var fields = _this2.state.fields;


      var fieldsItem = fields[name] || {};
      fieldsItem.touched = true;
      fieldsItem.active = true;

      fields[name] = fieldsItem;

      _this2.setState({
        fields: fields
      });
    };

    _this2.initializeField = function (name) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      _this2.change(name, value);
    };

    _this2.initializeValidations = function (name, validation) {
      var validations = _this2.state.validations;

      validations[name] = validation;

      _this2.setState({
        validations: validations
      });
    };

    _this2.change = function (fieldName, value) {
      var _this2$state = _this2.state,
          values = _this2$state.values,
          validations = _this2$state.validations,
          syncErrors = _this2$state.syncErrors;

      var checkValidation = validations[fieldName];

      values[fieldName] = value;

      if ((typeof checkValidation === 'undefined' ? 'undefined' : _typeof(checkValidation)) === 'object') {
        syncErrors[fieldName] = _this2.getErrorMessage(values[fieldName], checkValidation);
      }

      _this2.setState({
        values: values,
        syncErrors: syncErrors
      });
    };

    _this2.getErrorMessage = function (value, validation) {
      var errors = validation.errors;


      if (typeof errors === 'undefined') {
        return '';
      }

      if (errors.hasOwnProperty('requiredValue') && !value) {
        return errors['requiredValue'];
      }

      if (errors.hasOwnProperty('minLength') && String(value).length < validation['minLength']) {

        return errors['minLength'];
      }

      if (errors.hasOwnProperty('maxLength') && String(value).length > validation['maxLength']) {
        return errors['maxLength'];
      }

      if (errors.hasOwnProperty('pattern') && !validation['pattern'].test(value)) {
        return errors['pattern'];
      }

      return '';
    };

    _this2.validate = function () {

      var valiabled = true;

      var _this2$state2 = _this2.state,
          validations = _this2$state2.validations,
          values = _this2$state2.values,
          syncErrors = _this2$state2.syncErrors,
          fields = _this2$state2.fields;

      var validationKeys = Object.keys(validations);

      var checkValidation = {};
      var _this = _this2;

      validationKeys.map(function (fieldName, index) {

        if (!validations.hasOwnProperty(fieldName)) {
          return;
        }

        checkValidation = validations[fieldName];

        syncErrors[fieldName] = _this.getErrorMessage(values[fieldName], checkValidation);

        fields[fieldName] = (0, _simpleAssign2.default)({}, fields[fieldName], { touched: true });

        if (syncErrors[fieldName]) {
          valiabled = false;
        }
      });

      _this2.setState({
        syncErrors: syncErrors,
        fields: fields
      });

      return valiabled;
    };

    _this2.handleSubmit = function (onSubmit) {
      //校验
      var values = _this2.state.values;

      onSubmit && onSubmit(values);
    };

    _this2.reset = function () {
      var _this2$state3 = _this2.state,
          values = _this2$state3.values,
          syncErrors = _this2$state3.syncErrors,
          fields = _this2$state3.fields;


      Object.keys(values).map(function (item, index) {
        values[item] = '';
      });

      Object.keys(syncErrors).map(function (item, index) {
        syncErrors[item] = '';
      });

      /*
            fields = Object.keys(fields).map(function(item,index){
                return Object.assign({},item,{touched:false});
            });
            */

      _this2.setState({
        values: values
      });
    };

    _this2.submit = function (event) {

      event = event || window.event;
      //取消默认事件
      event.preventDefault();

      //校验
      if (!_this2.validate()) {
        return;
      }

      var values = _this2.state.values;
      var onSubmit = _this2.props.onSubmit;

      onSubmit && onSubmit(values);

      return false;
    };

    var initialValues = _this2.props.initialValues;


    _this2.state = {
      initialValues: initialValues,
      registeredFields: [],
      syncErrors: {},
      fields: {},
      values: initialValues,
      initial: {},
      validations: {}
    };

    return _this2;
  }

  _createClass(KrForm, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {

      if (!(0, _Utils.ShallowEqual)(nextProps.initialValues, this.props.initialValues)) {
        this.setState({
          values: nextProps.initialValues
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          name = _props.name,
          children = _props.children;


      return _react2.default.createElement(
        'form',
        { name: name, onSubmit: this.submit },
        children
      );
    }
  }]);

  return KrForm;
}(_react2.default.Component);

KrForm.displayName = 'KrForm';
KrForm.defaultProps = {
  initialValues: {}
};
KrForm.propTypes = {
  name: _react2.default.PropTypes.string,
  initialValues: _react2.default.PropTypes.object
};
KrForm.childContextTypes = {
  blur: _react2.default.PropTypes.func.isRequired,
  focus: _react2.default.PropTypes.func.isRequired,
  error: _react2.default.PropTypes.func.isRequired,
  change: _react2.default.PropTypes.func.isRequired,
  initializeField: _react2.default.PropTypes.func.isRequired,
  syncErrors: _react2.default.PropTypes.object.isRequired,
  fields: _react2.default.PropTypes.object.isRequired,
  initializeValidations: _react2.default.PropTypes.func.isRequired,
  values: _react2.default.PropTypes.object.isRequired
};
exports.default = KrForm;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(KrForm, 'KrForm', '/Users/smile/Documents/kr-admin/src/Components/KrForm/Form/index.js');
}();

;