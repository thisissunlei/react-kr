'use strict';

var _stripDiacritics = require('./stripDiacritics');

var _stripDiacritics2 = _interopRequireDefault(_stripDiacritics);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function filterOptions(options, filterValue, excludeOptions, props) {
	var _this = this;

	if (props.ignoreAccents) {
		filterValue = (0, _stripDiacritics2.default)(filterValue);
	}

	if (props.ignoreCase) {
		filterValue = filterValue.toLowerCase();
	}

	if (excludeOptions) excludeOptions = excludeOptions.map(function (i) {
		return i[props.valueKey];
	});

	return options.filter(function (option) {
		if (excludeOptions && excludeOptions.indexOf(option[props.valueKey]) > -1) return false;
		if (props.filterOption) return props.filterOption.call(_this, option, filterValue);
		if (!filterValue) return true;
		var valueTest = String(option[props.valueKey]);
		var labelTest = String(option[props.labelKey]);
		if (props.ignoreAccents) {
			if (props.matchProp !== 'label') valueTest = (0, _stripDiacritics2.default)(valueTest);
			if (props.matchProp !== 'value') labelTest = (0, _stripDiacritics2.default)(labelTest);
		}
		if (props.ignoreCase) {
			if (props.matchProp !== 'label') valueTest = valueTest.toLowerCase();
			if (props.matchProp !== 'value') labelTest = labelTest.toLowerCase();
		}
		return props.matchPos === 'start' ? props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;
	});
}

module.exports = filterOptions;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(filterOptions, 'filterOptions', '/Users/tmac_zc/Code/kr-admin/src/Components/Select/utils/defaultFilterOptions.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9Db21wb25lbnRzL1NlbGVjdC91dGlscy9kZWZhdWx0RmlsdGVyT3B0aW9ucy5qcyJdLCJuYW1lcyI6WyJmaWx0ZXJPcHRpb25zIiwib3B0aW9ucyIsImZpbHRlclZhbHVlIiwiZXhjbHVkZU9wdGlvbnMiLCJwcm9wcyIsImlnbm9yZUFjY2VudHMiLCJpZ25vcmVDYXNlIiwidG9Mb3dlckNhc2UiLCJtYXAiLCJpIiwidmFsdWVLZXkiLCJmaWx0ZXIiLCJpbmRleE9mIiwib3B0aW9uIiwiZmlsdGVyT3B0aW9uIiwiY2FsbCIsInZhbHVlVGVzdCIsIlN0cmluZyIsImxhYmVsVGVzdCIsImxhYmVsS2V5IiwibWF0Y2hQcm9wIiwibWF0Y2hQb3MiLCJzdWJzdHIiLCJsZW5ndGgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFFQSxTQUFTQSxhQUFULENBQXdCQyxPQUF4QixFQUFpQ0MsV0FBakMsRUFBOENDLGNBQTlDLEVBQThEQyxLQUE5RCxFQUFxRTtBQUFBOztBQUNwRSxLQUFJQSxNQUFNQyxhQUFWLEVBQXlCO0FBQ3hCSCxnQkFBYywrQkFBZ0JBLFdBQWhCLENBQWQ7QUFDQTs7QUFFRCxLQUFJRSxNQUFNRSxVQUFWLEVBQXNCO0FBQ3JCSixnQkFBY0EsWUFBWUssV0FBWixFQUFkO0FBQ0E7O0FBRUQsS0FBSUosY0FBSixFQUFvQkEsaUJBQWlCQSxlQUFlSyxHQUFmLENBQW1CO0FBQUEsU0FBS0MsRUFBRUwsTUFBTU0sUUFBUixDQUFMO0FBQUEsRUFBbkIsQ0FBakI7O0FBRXBCLFFBQU9ULFFBQVFVLE1BQVIsQ0FBZSxrQkFBVTtBQUMvQixNQUFJUixrQkFBa0JBLGVBQWVTLE9BQWYsQ0FBdUJDLE9BQU9ULE1BQU1NLFFBQWIsQ0FBdkIsSUFBaUQsQ0FBQyxDQUF4RSxFQUEyRSxPQUFPLEtBQVA7QUFDM0UsTUFBSU4sTUFBTVUsWUFBVixFQUF3QixPQUFPVixNQUFNVSxZQUFOLENBQW1CQyxJQUFuQixRQUE4QkYsTUFBOUIsRUFBc0NYLFdBQXRDLENBQVA7QUFDeEIsTUFBSSxDQUFDQSxXQUFMLEVBQWtCLE9BQU8sSUFBUDtBQUNsQixNQUFJYyxZQUFZQyxPQUFPSixPQUFPVCxNQUFNTSxRQUFiLENBQVAsQ0FBaEI7QUFDQSxNQUFJUSxZQUFZRCxPQUFPSixPQUFPVCxNQUFNZSxRQUFiLENBQVAsQ0FBaEI7QUFDQSxNQUFJZixNQUFNQyxhQUFWLEVBQXlCO0FBQ3hCLE9BQUlELE1BQU1nQixTQUFOLEtBQW9CLE9BQXhCLEVBQWlDSixZQUFZLCtCQUFnQkEsU0FBaEIsQ0FBWjtBQUNqQyxPQUFJWixNQUFNZ0IsU0FBTixLQUFvQixPQUF4QixFQUFpQ0YsWUFBWSwrQkFBZ0JBLFNBQWhCLENBQVo7QUFDakM7QUFDRCxNQUFJZCxNQUFNRSxVQUFWLEVBQXNCO0FBQ3JCLE9BQUlGLE1BQU1nQixTQUFOLEtBQW9CLE9BQXhCLEVBQWlDSixZQUFZQSxVQUFVVCxXQUFWLEVBQVo7QUFDakMsT0FBSUgsTUFBTWdCLFNBQU4sS0FBb0IsT0FBeEIsRUFBaUNGLFlBQVlBLFVBQVVYLFdBQVYsRUFBWjtBQUNqQztBQUNELFNBQU9ILE1BQU1pQixRQUFOLEtBQW1CLE9BQW5CLEdBQ0xqQixNQUFNZ0IsU0FBTixLQUFvQixPQUFwQixJQUErQkosVUFBVU0sTUFBVixDQUFpQixDQUFqQixFQUFvQnBCLFlBQVlxQixNQUFoQyxNQUE0Q3JCLFdBQTVFLElBQ0NFLE1BQU1nQixTQUFOLEtBQW9CLE9BQXBCLElBQStCRixVQUFVSSxNQUFWLENBQWlCLENBQWpCLEVBQW9CcEIsWUFBWXFCLE1BQWhDLE1BQTRDckIsV0FGdEUsR0FJTEUsTUFBTWdCLFNBQU4sS0FBb0IsT0FBcEIsSUFBK0JKLFVBQVVKLE9BQVYsQ0FBa0JWLFdBQWxCLEtBQWtDLENBQWxFLElBQ0NFLE1BQU1nQixTQUFOLEtBQW9CLE9BQXBCLElBQStCRixVQUFVTixPQUFWLENBQWtCVixXQUFsQixLQUFrQyxDQUxuRTtBQU9BLEVBckJNLENBQVA7QUFzQkE7O0FBRURzQixPQUFPQyxPQUFQLEdBQWlCekIsYUFBakI7Ozs7Ozs7OytCQW5DU0EsYSIsImZpbGUiOiJkZWZhdWx0RmlsdGVyT3B0aW9ucy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvdG1hY196Yy9Db2RlL2tyLWFkbWluIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHN0cmlwRGlhY3JpdGljcyBmcm9tICcuL3N0cmlwRGlhY3JpdGljcyc7XG5cbmZ1bmN0aW9uIGZpbHRlck9wdGlvbnMgKG9wdGlvbnMsIGZpbHRlclZhbHVlLCBleGNsdWRlT3B0aW9ucywgcHJvcHMpIHtcblx0aWYgKHByb3BzLmlnbm9yZUFjY2VudHMpIHtcblx0XHRmaWx0ZXJWYWx1ZSA9IHN0cmlwRGlhY3JpdGljcyhmaWx0ZXJWYWx1ZSk7XG5cdH1cblxuXHRpZiAocHJvcHMuaWdub3JlQ2FzZSkge1xuXHRcdGZpbHRlclZhbHVlID0gZmlsdGVyVmFsdWUudG9Mb3dlckNhc2UoKTtcblx0fVxuXG5cdGlmIChleGNsdWRlT3B0aW9ucykgZXhjbHVkZU9wdGlvbnMgPSBleGNsdWRlT3B0aW9ucy5tYXAoaSA9PiBpW3Byb3BzLnZhbHVlS2V5XSk7XG5cblx0cmV0dXJuIG9wdGlvbnMuZmlsdGVyKG9wdGlvbiA9PiB7XG5cdFx0aWYgKGV4Y2x1ZGVPcHRpb25zICYmIGV4Y2x1ZGVPcHRpb25zLmluZGV4T2Yob3B0aW9uW3Byb3BzLnZhbHVlS2V5XSkgPiAtMSkgcmV0dXJuIGZhbHNlO1xuXHRcdGlmIChwcm9wcy5maWx0ZXJPcHRpb24pIHJldHVybiBwcm9wcy5maWx0ZXJPcHRpb24uY2FsbCh0aGlzLCBvcHRpb24sIGZpbHRlclZhbHVlKTtcblx0XHRpZiAoIWZpbHRlclZhbHVlKSByZXR1cm4gdHJ1ZTtcblx0XHR2YXIgdmFsdWVUZXN0ID0gU3RyaW5nKG9wdGlvbltwcm9wcy52YWx1ZUtleV0pO1xuXHRcdHZhciBsYWJlbFRlc3QgPSBTdHJpbmcob3B0aW9uW3Byb3BzLmxhYmVsS2V5XSk7XG5cdFx0aWYgKHByb3BzLmlnbm9yZUFjY2VudHMpIHtcblx0XHRcdGlmIChwcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcpIHZhbHVlVGVzdCA9IHN0cmlwRGlhY3JpdGljcyh2YWx1ZVRlc3QpO1xuXHRcdFx0aWYgKHByb3BzLm1hdGNoUHJvcCAhPT0gJ3ZhbHVlJykgbGFiZWxUZXN0ID0gc3RyaXBEaWFjcml0aWNzKGxhYmVsVGVzdCk7XG5cdFx0fVxuXHRcdGlmIChwcm9wcy5pZ25vcmVDYXNlKSB7XG5cdFx0XHRpZiAocHJvcHMubWF0Y2hQcm9wICE9PSAnbGFiZWwnKSB2YWx1ZVRlc3QgPSB2YWx1ZVRlc3QudG9Mb3dlckNhc2UoKTtcblx0XHRcdGlmIChwcm9wcy5tYXRjaFByb3AgIT09ICd2YWx1ZScpIGxhYmVsVGVzdCA9IGxhYmVsVGVzdC50b0xvd2VyQ2FzZSgpO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJvcHMubWF0Y2hQb3MgPT09ICdzdGFydCcgPyAoXG5cdFx0XHQocHJvcHMubWF0Y2hQcm9wICE9PSAnbGFiZWwnICYmIHZhbHVlVGVzdC5zdWJzdHIoMCwgZmlsdGVyVmFsdWUubGVuZ3RoKSA9PT0gZmlsdGVyVmFsdWUpIHx8XG5cdFx0XHQocHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnICYmIGxhYmVsVGVzdC5zdWJzdHIoMCwgZmlsdGVyVmFsdWUubGVuZ3RoKSA9PT0gZmlsdGVyVmFsdWUpXG5cdFx0KSA6IChcblx0XHRcdChwcm9wcy5tYXRjaFByb3AgIT09ICdsYWJlbCcgJiYgdmFsdWVUZXN0LmluZGV4T2YoZmlsdGVyVmFsdWUpID49IDApIHx8XG5cdFx0XHQocHJvcHMubWF0Y2hQcm9wICE9PSAndmFsdWUnICYmIGxhYmVsVGVzdC5pbmRleE9mKGZpbHRlclZhbHVlKSA+PSAwKVxuXHRcdCk7XG5cdH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZpbHRlck9wdGlvbnM7XG4iXX0=