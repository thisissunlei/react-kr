'use strict';

var _promisePolyfill = require('promise-polyfill');

var _promisePolyfill2 = _interopRequireDefault(_promisePolyfill);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _urlSearchParams = require('url-search-params');

var _urlSearchParams2 = _interopRequireDefault(_urlSearchParams);

var _reactRouter = require('react-router');

var _apis = require('../../Configs/apis');

var _apis2 = _interopRequireDefault(_apis);

var _es6Promise = require('es6-promise');

var _es6Promise2 = _interopRequireDefault(_es6Promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_es6Promise2.default.polyfill();

var env = process.env.NODE_ENV;

function getUrl(path) {
	var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;


	var server = '';

	if (env === 'test') {
		server = 'http://optest.krspace.cn';
	}if (env === 'development') {
		server = 'http://optest.krspace.cn';
	} else if (env === 'test01') {
		server = 'http://optest01.krspace.cn';
	} else if (env === 'test02') {
		server = 'http://optest02.krspace.cn';
	} else {
		server = '';
	}

	/*
    if (path.match(/^http/) != 'null') {
        return path;
    }
    */
	//本地联调接口
	// let url = APIS[path].url;
	// if(url.indexOf('apixr')){
	// 	server = ''
	// }


	var url = _apis2.default[path].url;

	if (url.indexOf('mockjsdata') !== -1) {
		server = '';
	}
	try {
		server += _apis2.default[path].url;
	} catch (err) {
		console.error(path + ' not defined in apis.js');
		return false;
	}

	if (Object.keys(params).length) {
		for (var item in params) {
			if (params.hasOwnProperty(item)) {
				server = server.replace('{' + item + '}', encodeURI(params[item]));
				delete params[item];
			}
		}
	}

	if (!mode) {

		var searchParams = new _urlSearchParams2.default();

		for (var _item in params) {
			if (params.hasOwnProperty(_item)) {
				searchParams.set(_item, params[_item]);
			}
		}

		if (server.indexOf('?') !== -1) {
			server += '&' + searchParams.toString();
		} else {
			server += '?' + searchParams.toString();
		}
	}

	//去除多余参数
	server = server.replace(/={.*?}/gi, '=');

	return server;
}

function getMethod(path) {

	var apiConfig = _apis2.default[path];
	return apiConfig.method;
}

function check401(res) {
	if (res.code === -4011) {
		window.location.href = '/';
	}
	return res;
}

function jsonParse(res) {
	return res.json();
}

var http = {

	request: function request() {
		var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'demo';
		var params = arguments[1];
		var payload = arguments[2];
		var method = arguments[3];


		var url = getUrl(path, params);

		method = method || getMethod(path);
		var promise = '';

		if (!url) {
			return;
		}

		switch (method) {
			case 'get':
				{

					promise = http.get(url, params);
					break;
				}
			case 'post':
				{
					promise = http.post(url, params, payload);
					break;
				}

			case 'put':
				{
					promise = http.update(url, params, payload);
					break;
				}
			case 'delete':
				{
					promise = http.remove(url, params, payload);
					break;
				}
			default:
				{
					promise = http.get(url, params, payload);
					break;
				}
		}

		return promise;
	},
	transformPreResponse: function transformPreResponse(response) {
		var data = response;
		//处理mock 数据
		if (Object.prototype.toString.call(response) === '[object Array]') {
			data = response.pop();
		}
		return data;
	},

	transformResponse: function transformResponse(response) {
		return response.data;
	},
	get: function get(url, params) {
		return new _promisePolyfill2.default(function (resolve, reject) {

			if (!url) {
				return;
			}

			(0, _isomorphicFetch2.default)(url, {
				method: 'GET',
				headers: {
					'Accept': '*',
					'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
				},
				mode: 'cors',
				credentials: 'include'
			}).then(jsonParse).then(check401).then(http.transformPreResponse).then(function (json) {
				if (parseInt(json.code) > 0) {
					//处理数据格式
					resolve(http.transformResponse(json));
				} else {
					reject(json);
				}
			}).catch(function (err) {
				return reject(err);
			});
		});
	},

	getdemo: function getdemo(url, params) {
		return new _promisePolyfill2.default(function (resolve, reject) {

			if (!url) {
				return;
			}

			var xhr = new XMLHttpRequest();

			xhr.withCredentials = true;
			xhr.open('GET', url, true);
			xhr.responseType = 'json';
			xhr.onload = function (e) {
				if (this.status >= 200 || this.status < 300) {
					var json = http.transformPreResponse(xhr.response);
					if (json && json.code && parseInt(json.code) > 0) {
						//处理数据格式
						resolve(http.transformResponse(json));
					} else {
						reject(json);
					}
				} else {
					reject(xhr.response);
				}
			};
			xhr.send();
		});
	},

	post: function post(url, params, payload) {
		return new _promisePolyfill2.default(function (resolve, reject) {

			if (!url) {
				return;
			}

			var bodyParams = [];
			for (var p in payload) {
				bodyParams.push(encodeURIComponent(p) + "=" + encodeURIComponent(payload[p]));
			}

			(0, _isomorphicFetch2.default)(url, {
				method: 'POST',
				credentials: 'include',
				mode: 'cors',
				headers: {
					'Accept': '*',
					'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8',
					"Cookie": document.cookie
				},
				body: bodyParams.join('&')
			}).then(jsonParse).then(check401).then(http.transformPreResponse).then(function (json) {

				if (parseInt(json.code) > 0) {
					//处理数据格式
					resolve(http.transformResponse(json));
				} else {
					reject(json);
				}
			}).catch(function (err) {
				return reject(err);
			});
		});
	},

	update: function update(url, params, payload) {
		return new _promisePolyfill2.default(function (resolve, reject) {
			var searchParams = new _urlSearchParams2.default();

			if (!url) {
				return;
			}

			for (var prop in payload) {
				searchParams.set(prop, payload[prop]);
			}

			(0, _isomorphicFetch2.default)(url, {
				method: 'PUT',
				credentials: 'include',
				mode: 'cors',
				headers: {
					'Accept': '*',
					'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
				},
				body: searchParams
			}).then(jsonParse).then(check401).then(http.transformPreResponse).then(function (json) {
				if (parseInt(json.code) > 0) {
					//处理数据格式
					resolve(http.transformResponse(json));
				} else {
					reject(json);
				}
			}).catch(function (err) {
				return reject(err);
			});
		});
	},

	remove: function remove(url, params, payload) {
		return new _promisePolyfill2.default(function (resolve, reject) {
			var searchParams = new _urlSearchParams2.default();

			if (!url) {
				return;
			}

			for (var prop in payload) {
				searchParams.set(prop, payload[prop]);
			}

			return (0, _isomorphicFetch2.default)(url, {
				method: 'DELETE',
				credentials: 'include',
				mode: 'cors',
				headers: {
					'Accept': '*',
					'Content-Type': 'application/x-www-form-urlencoded; charset=utf-8'
				},
				body: searchParams
			}).then(jsonParse).then(check401).then(http.transformPreResponse).then(function (json) {
				if (parseInt(json.code) > 0) {
					//处理数据格式
					resolve(http.transformResponse(json));
				} else {
					reject(json);
				}
			}).catch(function (err) {
				return reject(err);
			});
		});
	}
};

module.exports = http;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(env, 'env', '/Users/tmac_zc/Code/kr-admin/src/Redux/Utils/fetch.js');

	__REACT_HOT_LOADER__.register(getUrl, 'getUrl', '/Users/tmac_zc/Code/kr-admin/src/Redux/Utils/fetch.js');

	__REACT_HOT_LOADER__.register(getMethod, 'getMethod', '/Users/tmac_zc/Code/kr-admin/src/Redux/Utils/fetch.js');

	__REACT_HOT_LOADER__.register(check401, 'check401', '/Users/tmac_zc/Code/kr-admin/src/Redux/Utils/fetch.js');

	__REACT_HOT_LOADER__.register(jsonParse, 'jsonParse', '/Users/tmac_zc/Code/kr-admin/src/Redux/Utils/fetch.js');

	__REACT_HOT_LOADER__.register(http, 'http', '/Users/tmac_zc/Code/kr-admin/src/Redux/Utils/fetch.js');
}();

;
//# sourceMappingURL=data:application/json;base64,