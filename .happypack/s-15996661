'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _NowtifyItem = require('./NowtifyItem');

var _NowtifyItem2 = _interopRequireDefault(_NowtifyItem);

require('./index.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var defaultConfig = {
  localPath: '/node_modules/react-nowtify/',
  containerID: 'nowtify-wrapper',
  displayTimeout: 2000,
  transition: 'growl',
  sound: true,
  dismissible: true,
  keepHistory: false
};

var defaultNotificationSound = require('file!./notification-sound.mp3');

var _notifications = [];
var _config = defaultConfig;

var NowtifyBox = function (_React$Component) {
  _inherits(NowtifyBox, _React$Component);

  function NowtifyBox(props) {
    _classCallCheck(this, NowtifyBox);

    var _this = _possibleConstructorReturn(this, (NowtifyBox.__proto__ || Object.getPrototypeOf(NowtifyBox)).call(this, props));

    _this.state = {
      notificationSound: new Audio(defaultNotificationSound)
    };
    return _this;
  }

  _createClass(NowtifyBox, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.handleNewNotifications(this.props.notifications);
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate(props) {
      this.handleNewNotifications(props.notifications);
    }

    /**
     * Dispatch notifications
     * @param  [] notifications Array of formatted notifications (JSON)
     * @return {[type]}               [description]
     */

  }, {
    key: 'handleNewNotifications',
    value: function handleNewNotifications(notifications) {
      notifications.map(function (notification) {
        this.addNotification(notification);
      }.bind(this));
    }

    /**
     * Display a notification
     * @param  {} notification JSON formatted notification
     * @return  inject new notification to the component notifications pool.
     */

  }, {
    key: 'addNotification',
    value: function addNotification(notification) {
      return _notifications.push(notification);
    }

    /**
     * TODO
     * Remove a notification
     * @param  {} notification JSON formatted notification
     * @return  inject new notification to the component notifications pool.
     */

  }, {
    key: 'removeNotification',
    value: function removeNotification(id) {
      // TODO
      // HINT: ajouter les notifications avec un systeme key:value ou (key est un timestamp)
      /*
      
       if(!this.state.keepHistory){
      }*/
      return true;
    }

    /**
     * Play soung on new notification
     * @return {[type]} [description]
     */

  }, {
    key: 'playNotificationSound',
    value: function playNotificationSound(notificationSound) {
      if (notificationSound || this.props.config.sound) {
        return this.state.notificationSound.play();
      }
      return false;
    }
  }, {
    key: 'render',
    value: function render() {
      var notificationNodes = _notifications.map(function (notification, index) {
        var _this2 = this;

        return _react2.default.createElement(_NowtifyItem2.default, {
          key: index,
          data: notification,
          position: index,
          displayTimeout: this.props.config.displayTimeout,
          onRemove: function onRemove(id) {
            return _this2.removeNotification(id);
          },
          playSound: function playSound() {
            return _this2.playNotificationSound(notification.sound);
          }
        });
      }.bind(this));
      return _react2.default.createElement(
        'div',
        { className: 'nowtify-box' },
        _react2.default.createElement(
          'div',
          { className: 'nowtify-box__notification-list' },
          notificationNodes
        )
      );
    }
  }]);

  return NowtifyBox;
}(_react2.default.Component);

;

/**
 * Init Nowtify
 * @param  {} config configuration JSON formatted
 * @return {[type]}        [description]
 */
function init(config) {
  return setConfig(config);
}

/**
 * Show an array of notifications
 * @param  [] notifications Array of formated notifications.
 * @return {[type]}               [description]
 */
function show(notifications) {
  _reactDom2.default.render(_react2.default.createElement(NowtifyBox, { config: _config, notifications: notifications }), document.getElementById(_config.containerID));
};

/**
 * Set Nowtify configuration
 * @param {} config JSON object
 */
function setConfig(config) {
  _config = {
    localPath: config.localPath ? config.localPath : _config.localPath,
    containerID: config.containerID ? config.containerID : _config.containerID,
    displayTimeout: config.displayTimeout ? config.displayTimeout : _config.displayTimeout,
    transition: config.transition ? config.transisiton : _config.transition,
    sound: config.sound ? config.sound : _config.sound,
    dismissible: config.dismissible ? config.dismissible : _config.dismissible,
    keepHistory: config.dismissible ? config.dismissible : _config.keepHistory
  };
  return _config;
}

/**
 * Get Nowtify configuration
 * @return {} config JSON object
 */
function getConfig() {
  return _config;
}

module.exports = {
  init: init,
  getConfig: getConfig,
  setConfig: setConfig,
  show: show
};
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(defaultConfig, 'defaultConfig', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Notify/index.js');

  __REACT_HOT_LOADER__.register(_notifications, '_notifications', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Notify/index.js');

  __REACT_HOT_LOADER__.register(_config, '_config', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Notify/index.js');

  __REACT_HOT_LOADER__.register(NowtifyBox, 'NowtifyBox', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Notify/index.js');

  __REACT_HOT_LOADER__.register(init, 'init', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Notify/index.js');

  __REACT_HOT_LOADER__.register(show, 'show', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Notify/index.js');

  __REACT_HOT_LOADER__.register(setConfig, 'setConfig', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Notify/index.js');

  __REACT_HOT_LOADER__.register(getConfig, 'getConfig', '/Users/dongfanai/Desktop/project/kr-admin/src/Components/Notify/index.js');
}();

;