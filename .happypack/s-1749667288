'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

require('./index.less');

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _krUi = require('kr-ui');

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SearchForms = function (_Component) {
	_inherits(SearchForms, _Component);

	function SearchForms(props, context) {
		_classCallCheck(this, SearchForms);

		var _this2 = _possibleConstructorReturn(this, (SearchForms.__proto__ || Object.getPrototypeOf(SearchForms)).call(this, props, context));

		_this2.click = _this2.click.bind(_this2);
		_this2.selectShow = _this2.selectShow.bind(_this2);
		_this2.state = {
			num: 0,
			value: ''
		};
		_this2.hasClass = _this2.hasClass.bind(_this2);
		_this2.removeClass = _this2.removeClass.bind(_this2);
		_this2.toggleClass = _this2.toggleClass.bind(_this2);
		_this2.selectHidden = _this2.selectHidden.bind(_this2);
		_this2.getValue = _this2.getValue.bind(_this2);
		_this2.renderFilter = _this2.renderFilter.bind(_this2);
		_this2.bodyEvent = _this2.bodyEvent.bind(_this2);
		// this.bodyEvent()
		return _this2;
	}
	// var aa = document.getElementById("keywords").value;


	_createClass(SearchForms, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this = this;
			(0, _jquery2.default)('.search-val').bind('keypress', function (event) {

				if (event.keyCode == "13") {
					event.preventDefault ? event.preventDefault() : event.returnValue = false;
					_this.click();
					// alert('你输入的内容为：' + $('.search-val').val());  
				}
			});
		}
	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (!this.isInit && nextProps.value) {
				var value = nextProps.value;
				this.setState({
					value: value
				});
				this.isInit = true;
			}
		}
	}, {
		key: 'hasClass',
		value: function hasClass(obj, cls) {
			return obj.className.match(new RegExp('(\\s|^)' + cls + '(\\s|$)'));
		}
	}, {
		key: 'removeClass',
		value: function removeClass(obj, cls) {
			if (this.hasClass(obj, cls)) {
				var reg = new RegExp('(\\s|^)' + cls + '(\\s|$)');
				obj.className = obj.className.replace(reg, '');
			}
		}
	}, {
		key: 'toggleClass',
		value: function toggleClass(obj, cls) {
			if (hasClass(obj, cls)) {
				removeClass(obj, cls);
			} else {
				obj.className += ' ' + cls;
			}
		}
	}, {
		key: 'click',
		value: function click() {
			var _this3 = this;

			var num = this.state.num;

			var _this = this;
			var form = _reactDom2.default.findDOMNode(this.form);
			var searchButton = form.getElementsByClassName('icon-searching')[0];
			var searchForm = form.getElementsByClassName('search-status')[0];

			if (!num) {
				if (!this.hasClass(searchButton, 'click')) {
					searchButton.className = searchButton.className + ' click';
					searchForm.className = searchForm.className + " show-form";
				}
				_this.setState({
					num: 1
				});
			} else {
				var searchWord;

				(function () {
					var searchName = '';
					var _props = _this3.props,
					    searchFilter = _props.searchFilter,
					    inputName = _props.inputName;

					var filterValue = '';

					var filterDom = document.getElementsByClassName('search-name');
					if (filterDom.length) {
						searchName = document.getElementsByClassName('search-name')[0].innerHTML;
						searchFilter.forEach(function (item) {
							if (item.label === searchName) {
								filterValue = item.value;
							}
						});
					}
					if (!inputName) {
						inputName = 'keywords';
					}
					searchWord = document.getElementById(inputName).value;

					var value = {
						filter: filterValue || '',
						content: searchWord || ''
					};
					var onSubmit = _this3.props.onSubmit;

					onSubmit && onSubmit(value);
					// if(this.hasClass(searchForm, 'show-form')){
					//        this.removeClass(searchForm,'show-form');
					// 	this.removeClass(searchButton,'click');
					// }
					// _this.setState({
					// 		num:0
					// 	})
				})();
			}
		}
	}, {
		key: 'selectShow',
		value: function selectShow() {
			var list = _reactDom2.default.findDOMNode(this.selectList);
			var ul = list.getElementsByTagName('ul')[0];
			if (!this.hasClass(ul, 'show-li')) {
				ul.className += ' show-li';
			}
		}
	}, {
		key: 'selectHidden',
		value: function selectHidden() {
			var list = _reactDom2.default.findDOMNode(this.selectList);
			var ul = list.getElementsByTagName('ul')[0];
			this.removeClass(ul, 'show-li');
		}
	}, {
		key: 'getValue',
		value: function getValue(event) {
			var searchFilter = this.props.searchFilter;

			var filterValue = '';
			var list = _reactDom2.default.findDOMNode(this.selectList);
			var ul = list.getElementsByTagName('ul')[0];
			var className = event.target.className;
			var aa = document.getElementsByClassName(className)[0].innerHTML;
			document.getElementsByClassName('search-name')[0].innerHTML = aa;
			this.removeClass(ul, 'show-li');
			searchFilter.forEach(function (item) {
				if (item.label === aa) {
					filterValue = item.value;
				}
			});
			var onFilter = this.props.onFilter;

			onFilter && onFilter(filterValue);
		}
	}, {
		key: 'bodyEvent',
		value: function bodyEvent(event) {
			var _this = this;
			var targetName = event.target.className;
			console.log(event.target.className, 'event');
			if (targetName == icon - searching) {
				console.log('icon-searching');
				_this.click();
			} else {
				console.log('icon-searching');
			}
			var targetList = ['icon-searching', 'search-val', 'search-name', 'filter-container', 'icon-searching click'];
			(0, _jquery2.default)('.icon-searching').click(function (event) {
				console.log('pppp', event);
				// const form = ReactDOM.findDOMNode(_this.form);

				// let searchName = '';
				// let {searchFilter} = _this.props;
				// let filterValue = '';

				// const filterDom = document.getElementsByClassName('search-name');
				// if(filterDom.length){
				// 	searchName = document.getElementsByClassName('search-name')[0].innerHTML;
				// 	searchFilter.forEach((item)=>{
				// 		if(item.label === searchName ){
				// 			filterValue = item.value
				// 		}
				// 	})
				// }
				// var searchWord = document.getElementById("keywords").value;

				// if(form){
				// 	const searchButton = form.getElementsByClassName('icon-searching')[0];
				// 	const searchForm = form.getElementsByClassName('search-status')[0];
				// 	let name = event.target.className;
				// 	let close = true;
				// 	if(parseInt(name)+1){return;}
				// 	targetList.forEach((item)=>{
				// 		if(item === name){
				// 			close = false;
				// 		}
				// 	})
				// 	if(name == 'icon-searching click' || name == 'icon-searching'){
				// 		_this.click();
				// 	}
				// 	if(filterValue || searchWord){return;}
				// 	// if(close){
				// 	// 	_this.removeClass(searchForm,'show-form');
				// 	// 	_this.removeClass(searchButton,'click');
				// 	// 	_this.setState({num:0})
				// 	// }
				// }

			});
		}
	}, {
		key: 'renderFilter',
		value: function renderFilter() {
			var _this4 = this;

			var searchFilter = this.props.searchFilter;
			var value = this.state.value;

			var select = '请选择';
			if (searchFilter) {
				select = searchFilter[0].label;
			}

			// console.log('searchFilter',searchFilter);
			if (searchFilter) {

				return _react2.default.createElement(
					'div',
					{ className: 'search-filter', ref: function ref(div) {
							_this4.selectList = div;
						} },
					_react2.default.createElement(
						'span',
						{ className: 'filter-container', onMouseOver: this.selectShow, onMouseOut: this.selectHidden },
						_react2.default.createElement(
							'span',
							{ className: 'search-name' },
							select
						),
						_react2.default.createElement('em', { className: 'icon-return' })
					),
					_react2.default.createElement(
						'ul',
						{ onMouseOver: this.selectShow, onMouseOut: this.selectHidden, ref: function ref(li) {
								_this4.li = li;
							} },
						searchFilter && searchFilter.map(function (item, index) {

							return _react2.default.createElement(
								'li',
								{ className: '' + index, onClick: _this4.getValue, key: index },
								item.label
							);
						})
					)
				);
			}
		}
	}, {
		key: 'render',
		value: function render() {
			var _this5 = this;

			var placeholder = this.props.placeholder || "请输入查找内容";

			var _props2 = this.props,
			    style = _props2.style,
			    inputName = _props2.inputName;


			if (!inputName) {
				inputName = 'keywords';
			}
			return _react2.default.createElement(
				'div',
				{ className: 'search-form ', ref: function ref(div) {
						_this5.form = div;
					}, name: 'search-form', style: style },
				_react2.default.createElement(
					'div',
					{ className: 'search-status' },
					this.renderFilter(),
					_react2.default.createElement(
						'div',
						{ className: 'search-content' },
						_react2.default.createElement('input', { type: 'text', autoComplete: 'off', className: 'search-val', placeholder: placeholder, name: inputName, id: inputName })
					)
				),
				_react2.default.createElement('span', { className: 'icon-searching', onClick: this.click })
			);
		}
	}]);

	return SearchForms;
}(_react.Component);

SearchForms.PropTypes = {
	searchFilter: _react2.default.PropTypes.array,
	style: _react2.default.PropTypes.object,
	//事件
	onSubmit: _react2.default.PropTypes.func,
	onFilter: _react2.default.PropTypes.func

};
exports.default = SearchForms;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(SearchForms, 'SearchForms', '/Users/tmac_zc/Code/kr-admin/src/Components/SearchForms/index.js');
}();

;
//# sourceMappingURL=data:application/json;base64,