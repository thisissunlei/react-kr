'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _fetch = require('kr/Redux/Utils/fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _promisePolyfill = require('promise-polyfill');

var _promisePolyfill2 = _interopRequireDefault(_promisePolyfill);

var _es6Promise = require('es6-promise');

var _es6Promise2 = _interopRequireDefault(_es6Promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_es6Promise2.default.polyfill();

function callAPIMiddleware(_ref) {
	var dispatch = _ref.dispatch,
	    getState = _ref.getState;


	return function (next) {

		return function (action) {
			var types = action.types,
			    apiName = action.apiName,
			    request = action.request,
			    _action$payload = action.payload,
			    payload = _action$payload === undefined ? {} : _action$payload;


			if (!types) {
				return next(action);
			}

			if (!Array.isArray(types) || types.length !== 3 || !types.every(function (type) {
				return typeof type === 'string';
			})) {
				//throw new Error('参数有问题');
			}

			if (!apiName) {
				//throw new Error('参数有问题');
			}

			var _types = _slicedToArray(types, 3),
			    requestType = _types[0],
			    successType = _types[1],
			    failureType = _types[2];

			//获取数据

			dispatch((0, _simpleAssign2.default)({}, payload, {
				type: requestType,
				name: apiName
			}));

			return new _promisePolyfill2.default(function (resolve, reject) {

				_fetch2.default.request(apiName, request, payload).then(function (response) {

					dispatch((0, _simpleAssign2.default)({}, payload, {
						type: successType,
						response: response,
						name: apiName
					}));

					resolve(response);
				}).catch(function (err) {

					dispatch((0, _simpleAssign2.default)({}, payload, {
						type: failureType,
						error: err,
						name: apiName
					}));
					reject(err);
				});
			});
		};
	};
}

module.exports = callAPIMiddleware;
;

var _temp = function () {
	if (typeof __REACT_HOT_LOADER__ === 'undefined') {
		return;
	}

	__REACT_HOT_LOADER__.register(callAPIMiddleware, 'callAPIMiddleware', '/Users/dongfanai/Desktop/project/kr-admin/src/Redux/Middlewares/callAPIMiddleware.js');
}();

;