'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _simpleAssign = require('simple-assign');

var _simpleAssign2 = _interopRequireDefault(_simpleAssign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _transitions = require('../styles/transitions');

var _transitions2 = _interopRequireDefault(_transitions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getStyles(props) {
  var defaultStyles = {
    position: 'absolute',
    lineHeight: '22px',
    top: 38,
    transition: _transitions2.default.easeOut(),
    zIndex: 1, // Needed to display label above Chrome's autocomplete field background
    transform: 'scale(1) translate(0, 0)',
    transformOrigin: 'left top',
    pointerEvents: 'auto',
    userSelect: 'none'
  };

  var shrinkStyles = props.shrink ? (0, _simpleAssign2.default)({
    transform: 'scale(0.75) translate(0, -28px)',
    pointerEvents: 'none'
  }, props.shrinkStyle) : null;

  return {
    root: (0, _simpleAssign2.default)(defaultStyles, props.style, shrinkStyles)
  };
}

var TextFieldLabel = function TextFieldLabel(props) {
  var muiTheme = props.muiTheme,
      className = props.className,
      children = props.children,
      htmlFor = props.htmlFor,
      onTouchTap = props.onTouchTap;
  var prepareStyles = muiTheme.prepareStyles;

  var styles = getStyles(props);

  return _react2.default.createElement(
    'label',
    {
      className: className,
      style: prepareStyles(styles.root),
      htmlFor: htmlFor,
      onTouchTap: onTouchTap
    },
    children
  );
};

TextFieldLabel.propTypes = {
  /**
   * The label contents.
   */
  children: _react.PropTypes.node,
  /**
   * The css class name of the root element.
   */
  className: _react.PropTypes.string,
  /**
   * Disables the label if set to true.
   */
  disabled: _react.PropTypes.bool,
  /**
   * The id of the target element that this label should refer to.
   */
  htmlFor: _react.PropTypes.string,
  /**
   * @ignore
   * The material-ui theme applied to this component.
   */
  muiTheme: _react.PropTypes.object.isRequired,
  /**
   * Callback function for when the label is selected via a touch tap.
   */
  onTouchTap: _react.PropTypes.func,
  /**
   * True if the floating label should shrink.
   */
  shrink: _react.PropTypes.bool,
  /**
   * Override the inline-styles of the root element when shrunk.
   */
  shrinkStyle: _react.PropTypes.object,
  /**
   * Override the inline-styles of the root element.
   */
  style: _react.PropTypes.object
};

TextFieldLabel.defaultProps = {
  disabled: false,
  shrink: false
};

var _default = TextFieldLabel;
exports.default = _default;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(getStyles, 'getStyles', '/Users/liuyihao/Code/kr-admin/src/Components/DatePicker/TextField/TextFieldLabel.js');

  __REACT_HOT_LOADER__.register(TextFieldLabel, 'TextFieldLabel', '/Users/liuyihao/Code/kr-admin/src/Components/DatePicker/TextField/TextFieldLabel.js');

  __REACT_HOT_LOADER__.register(_default, 'default', '/Users/liuyihao/Code/kr-admin/src/Components/DatePicker/TextField/TextFieldLabel.js');
}();

;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9Db21wb25lbnRzL0RhdGVQaWNrZXIvVGV4dEZpZWxkL1RleHRGaWVsZExhYmVsLmpzIl0sIm5hbWVzIjpbImdldFN0eWxlcyIsInByb3BzIiwiZGVmYXVsdFN0eWxlcyIsInBvc2l0aW9uIiwibGluZUhlaWdodCIsInRvcCIsInRyYW5zaXRpb24iLCJlYXNlT3V0IiwiekluZGV4IiwidHJhbnNmb3JtIiwidHJhbnNmb3JtT3JpZ2luIiwicG9pbnRlckV2ZW50cyIsInVzZXJTZWxlY3QiLCJzaHJpbmtTdHlsZXMiLCJzaHJpbmsiLCJzaHJpbmtTdHlsZSIsInJvb3QiLCJzdHlsZSIsIlRleHRGaWVsZExhYmVsIiwibXVpVGhlbWUiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsImh0bWxGb3IiLCJvblRvdWNoVGFwIiwicHJlcGFyZVN0eWxlcyIsInN0eWxlcyIsInByb3BUeXBlcyIsIm5vZGUiLCJzdHJpbmciLCJkaXNhYmxlZCIsImJvb2wiLCJvYmplY3QiLCJpc1JlcXVpcmVkIiwiZnVuYyIsImRlZmF1bHRQcm9wcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7OztBQUVBLFNBQVNBLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQ3hCLE1BQU1DLGdCQUFnQjtBQUNwQkMsY0FBVSxVQURVO0FBRXBCQyxnQkFBWSxNQUZRO0FBR3BCQyxTQUFLLEVBSGU7QUFJcEJDLGdCQUFZLHNCQUFZQyxPQUFaLEVBSlE7QUFLcEJDLFlBQVEsQ0FMWSxFQUtUO0FBQ1hDLGVBQVcsMEJBTlM7QUFPcEJDLHFCQUFpQixVQVBHO0FBUXBCQyxtQkFBZSxNQVJLO0FBU3BCQyxnQkFBWTtBQVRRLEdBQXRCOztBQVlBLE1BQU1DLGVBQWVaLE1BQU1hLE1BQU4sR0FBZSw0QkFBYztBQUNoREwsZUFBVyxpQ0FEcUM7QUFFaERFLG1CQUFlO0FBRmlDLEdBQWQsRUFHakNWLE1BQU1jLFdBSDJCLENBQWYsR0FHRyxJQUh4Qjs7QUFLQSxTQUFPO0FBQ0xDLFVBQU0sNEJBQWNkLGFBQWQsRUFBNkJELE1BQU1nQixLQUFuQyxFQUEwQ0osWUFBMUM7QUFERCxHQUFQO0FBR0Q7O0FBRUQsSUFBTUssaUJBQWlCLFNBQWpCQSxjQUFpQixDQUFDakIsS0FBRCxFQUFXO0FBQUEsTUFFOUJrQixRQUY4QixHQU81QmxCLEtBUDRCLENBRTlCa0IsUUFGOEI7QUFBQSxNQUc5QkMsU0FIOEIsR0FPNUJuQixLQVA0QixDQUc5Qm1CLFNBSDhCO0FBQUEsTUFJOUJDLFFBSjhCLEdBTzVCcEIsS0FQNEIsQ0FJOUJvQixRQUo4QjtBQUFBLE1BSzlCQyxPQUw4QixHQU81QnJCLEtBUDRCLENBSzlCcUIsT0FMOEI7QUFBQSxNQU05QkMsVUFOOEIsR0FPNUJ0QixLQVA0QixDQU05QnNCLFVBTjhCO0FBQUEsTUFTekJDLGFBVHlCLEdBU1JMLFFBVFEsQ0FTekJLLGFBVHlCOztBQVVoQyxNQUFNQyxTQUFTekIsVUFBVUMsS0FBVixDQUFmOztBQUVBLFNBQ0U7QUFBQTtBQUFBO0FBQ0UsaUJBQVdtQixTQURiO0FBRUUsYUFBT0ksY0FBY0MsT0FBT1QsSUFBckIsQ0FGVDtBQUdFLGVBQVNNLE9BSFg7QUFJRSxrQkFBWUM7QUFKZDtBQU1HRjtBQU5ILEdBREY7QUFVRCxDQXRCRDs7QUF3QkFILGVBQWVRLFNBQWYsR0FBMkI7QUFDekI7OztBQUdBTCxZQUFVLGlCQUFVTSxJQUpLO0FBS3pCOzs7QUFHQVAsYUFBVyxpQkFBVVEsTUFSSTtBQVN6Qjs7O0FBR0FDLFlBQVUsaUJBQVVDLElBWks7QUFhekI7OztBQUdBUixXQUFTLGlCQUFVTSxNQWhCTTtBQWlCekI7Ozs7QUFJQVQsWUFBVSxpQkFBVVksTUFBVixDQUFpQkMsVUFyQkY7QUFzQnpCOzs7QUFHQVQsY0FBWSxpQkFBVVUsSUF6Qkc7QUEwQnpCOzs7QUFHQW5CLFVBQVEsaUJBQVVnQixJQTdCTztBQThCekI7OztBQUdBZixlQUFhLGlCQUFVZ0IsTUFqQ0U7QUFrQ3pCOzs7QUFHQWQsU0FBTyxpQkFBVWM7QUFyQ1EsQ0FBM0I7O0FBd0NBYixlQUFlZ0IsWUFBZixHQUE4QjtBQUM1QkwsWUFBVSxLQURrQjtBQUU1QmYsVUFBUTtBQUZvQixDQUE5Qjs7ZUFLZUksYzs7Ozs7Ozs7O2dDQTVGTmxCLFM7O2dDQXVCSGtCLGMiLCJmaWxlIjoiVGV4dEZpZWxkTGFiZWwuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2xpdXlpaGFvL0NvZGUva3ItYWRtaW4iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXN9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0cmFuc2l0aW9ucyBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMpIHtcbiAgY29uc3QgZGVmYXVsdFN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsaW5lSGVpZ2h0OiAnMjJweCcsXG4gICAgdG9wOiAzOCxcbiAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9ucy5lYXNlT3V0KCksXG4gICAgekluZGV4OiAxLCAvLyBOZWVkZWQgdG8gZGlzcGxheSBsYWJlbCBhYm92ZSBDaHJvbWUncyBhdXRvY29tcGxldGUgZmllbGQgYmFja2dyb3VuZFxuICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgwLCAwKScsXG4gICAgdHJhbnNmb3JtT3JpZ2luOiAnbGVmdCB0b3AnLFxuICAgIHBvaW50ZXJFdmVudHM6ICdhdXRvJyxcbiAgICB1c2VyU2VsZWN0OiAnbm9uZScsXG4gIH07XG5cbiAgY29uc3Qgc2hyaW5rU3R5bGVzID0gcHJvcHMuc2hyaW5rID8gT2JqZWN0LmFzc2lnbih7XG4gICAgdHJhbnNmb3JtOiAnc2NhbGUoMC43NSkgdHJhbnNsYXRlKDAsIC0yOHB4KScsXG4gICAgcG9pbnRlckV2ZW50czogJ25vbmUnLFxuICB9LCBwcm9wcy5zaHJpbmtTdHlsZSkgOiBudWxsO1xuXG4gIHJldHVybiB7XG4gICAgcm9vdDogT2JqZWN0LmFzc2lnbihkZWZhdWx0U3R5bGVzLCBwcm9wcy5zdHlsZSwgc2hyaW5rU3R5bGVzKSxcbiAgfTtcbn1cblxuY29uc3QgVGV4dEZpZWxkTGFiZWwgPSAocHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIG11aVRoZW1lLFxuICAgIGNsYXNzTmFtZSxcbiAgICBjaGlsZHJlbixcbiAgICBodG1sRm9yLFxuICAgIG9uVG91Y2hUYXAsXG4gIH0gPSBwcm9wcztcblxuICBjb25zdCB7cHJlcGFyZVN0eWxlc30gPSBtdWlUaGVtZTtcbiAgY29uc3Qgc3R5bGVzID0gZ2V0U3R5bGVzKHByb3BzKTtcblxuICByZXR1cm4gKFxuICAgIDxsYWJlbFxuICAgICAgY2xhc3NOYW1lPXtjbGFzc05hbWV9XG4gICAgICBzdHlsZT17cHJlcGFyZVN0eWxlcyhzdHlsZXMucm9vdCl9XG4gICAgICBodG1sRm9yPXtodG1sRm9yfVxuICAgICAgb25Ub3VjaFRhcD17b25Ub3VjaFRhcH1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9sYWJlbD5cbiAgKTtcbn07XG5cblRleHRGaWVsZExhYmVsLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBsYWJlbCBjb250ZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjc3MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAvKipcbiAgICogRGlzYWJsZXMgdGhlIGxhYmVsIGlmIHNldCB0byB0cnVlLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuICAvKipcbiAgICogVGhlIGlkIG9mIHRoZSB0YXJnZXQgZWxlbWVudCB0aGF0IHRoaXMgbGFiZWwgc2hvdWxkIHJlZmVyIHRvLlxuICAgKi9cbiAgaHRtbEZvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogVGhlIG1hdGVyaWFsLXVpIHRoZW1lIGFwcGxpZWQgdG8gdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBtdWlUaGVtZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHdoZW4gdGhlIGxhYmVsIGlzIHNlbGVjdGVkIHZpYSBhIHRvdWNoIHRhcC5cbiAgICovXG4gIG9uVG91Y2hUYXA6IFByb3BUeXBlcy5mdW5jLFxuICAvKipcbiAgICogVHJ1ZSBpZiB0aGUgZmxvYXRpbmcgbGFiZWwgc2hvdWxkIHNocmluay5cbiAgICovXG4gIHNocmluazogUHJvcFR5cGVzLmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50IHdoZW4gc2hydW5rLlxuICAgKi9cbiAgc2hyaW5rU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5UZXh0RmllbGRMYWJlbC5kZWZhdWx0UHJvcHMgPSB7XG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgc2hyaW5rOiBmYWxzZSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRGaWVsZExhYmVsO1xuIl19